{
  "id": "prt_9711bcfbf001lktH97aQfj3JC1",
  "messageID": "msg_9711b80a5001bVZPJ0r9XNFluA",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01CdbaBLdiYcoGTUV9WxTkZ9",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/energy-management/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Checkbox } from '@/components/ui/checkbox'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { Alert, AlertDescription } from '@/components/ui/alert'\n00009| import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n00010| import { Label } from '@/components/ui/label'\n00011| import { Textarea } from '@/components/ui/textarea'\n00012| import { Input } from '@/components/ui/input'\n00013| import { Progress } from '@/components/ui/progress'\n00014| import { Battery, CheckCircle, AlertTriangle, Clock, Target, Lightbulb } from 'lucide-react'\n00015| import Link from 'next/link'\n00016| import { useTranslation } from '@/lib/language-context'\n00017| \n00018| interface EnergyActivity {\n00019|   type: 'cognitive' | 'physical' | 'emotional' | 'social'\n00020|   activity: string\n00021|   energyCost: number\n00022|   duration: number\n00023|   canReduce: boolean\n00024| }\n00025| \n00026| export default function EnergyManagement() {\n00027|   const [currentStep, setCurrentStep] = useState(0)\n00028|   const [assessmentData, setAssessmentData] = useState({\n00029|     currentEnergyLevel: '',\n00030|     symptoms: [] as string[],\n00031|     dailyActivities: [] as EnergyActivity[],\n00032|     triggers: [] as string[],\n00033|     restPeriods: '',\n00034|     goals: '',\n00035|     energyLimits: ''\n00036|   })\n00037|   const [isComplete, setIsComplete] = useState(false)\n00038|   const { t } = useTranslation()\n00039| \n00040|   const steps = [\n00041|     'Energy Assessment',\n00042|     'Activity Mapping', \n00043|     'Trigger Identification',\n00044|     'Energy Plan Creation',\n00045|     'Results & Guidance'\n00046|   ]\n00047| \n00048|   const energyLevels = [\n00049|     { value: 'severe', label: 'Severe limitation - Can only do essential self-care tasks', score: 1 },\n00050|     { value: 'moderate', label: 'Moderate limitation - Reduced activities, frequent rest needed', score: 2 },\n00051|     { value: 'mild', label: 'Mild limitation - Some activities affected, weekend recovery', score: 3 },\n00052|     { value: 'minimal', label: 'Minimal limitation - Slight reduction in stamina', score: 4 }\n00053|   ]\n00054| \n00055|   const commonSymptoms = [\n00056|     'Post-exertional malaise',\n00057|     'Unrefreshing sleep',\n00058|     'Cognitive difficulties (brain fog)',\n00059|     'Orthostatic intolerance',\n00060|     'Temperature sensitivity',\n00061|     'Sensory hypersensitivity',\n00062|     'Muscle/joint pain',\n00063|     'Flu-like symptoms'\n00064|   ]\n00065| \n00066|   const activityTypes = [\n00067|     { type: 'cognitive', label: 'Cognitive (thinking, concentrating)', examples: 'Reading, computer work, decision making' },\n00068|     { type: 'physical', label: 'Physical (movement, exertion)', examples: 'Walking, household tasks, exercise' },\n00069|     { type: 'emotional', label: 'Emotional (stress, feelings)', examples: 'Difficult conversations, worry, excitement' },\n00070|     { type: 'social', label: 'Social (interaction, engagement)', examples: 'Meetings, social events, phone calls' }\n00071|   ]\n00072| \n00073|   const calculateEnergyBudget = () => {\n00074|     const energyLevel = energyLevels.find(e => e.value === assessmentData.currentEnergyLevel)?.score || 0\n00075|     const baseEnergy = energyLevel * 25 // 25, 50, 75, 100\n00076|     const symptomDrain = assessmentData.symptoms.length * 5\n00077|     const availableEnergy = Math.max(10, baseEnergy - symptomDrain)\n00078|     \n00079|     return {\n00080|       totalEnergy: baseEnergy,\n00081|       symptomDrain,\n00082|       availableEnergy,\n00083|       safeLevel: availableEnergy * 0.8, // 80% of available energy for safety margin\n00084|       emergencyReserve: availableEnergy * 0.2\n00085|     }\n00086|   }\n00087| \n00088|   const generateEnergyPlan = () => {\n00089|     const budget = calculateEnergyBudget()\n00090|     const plan = {\n00091|       dailyEnergyBudget: budget.safeLevel,\n00092|       restSchedule: 'Plan rest periods between activities',\n00093|       activityPacing: 'Break activities into smaller chunks',\n00094|       monitoringSigns: 'Watch for early warning signs of energy depletion',\n00095|       emergencyProtocol: 'What to do during flare-ups'\n00096|     }\n00097| \n00098|     const recommendations: string[] = []\n00099|     \n00100|     if (budget.availableEnergy < 30) {\n00101|       recommendations.push('Focus on essential activities only')\n00102|       recommendations.push('Frequent rest periods (every 15-30 minutes)')\n00103|       recommendations.push('Consider assistance with daily activities')\n00104|     } else if (budget.availableEnergy < 60) {\n00105|       recommendations.push('Moderate activity levels with regular breaks')\n00106|       recommendations.push('Alternate between different types of activities')\n00107|       recommendations.push('Plan demanding activities for your best time of day')\n00108|     } else {\n00109|       recommendations.push('Maintain awareness of energy limits')\n00110|       recommendations.push('Pre-emptive rest before activities')\n00111|       recommendations.push('Monitor for gradual increases in tolerance')\n00112|     }\n00113| \n00114|     return { plan, recommendations, budget }\n00115|   }\n00116| \n00117|   const nextStep = () => {\n00118|     if (currentStep < steps.length - 1) {\n00119|       setCurrentStep(prev => prev + 1)\n00120|     } else {\n00121|       setIsComplete(true)\n00122|     }\n00123|   }\n00124| \n00125|   const prevStep = () => {\n00126|     if (currentStep > 0) {\n00127|       setCurrentStep(prev => prev - 1)\n00128|     }\n00129|   }\n00130| \n00131|   if (isComplete) {\n00132|     const { plan, recommendations, budget } = generateEnergyPlan()\n00133|     \n00134|     return (\n00135|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00136|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00137|           <Card>\n00138|             <CardHeader className=\"text-center\">\n00139|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00140|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00141|                 NICE NG206 Energy Management Plan\n00142|               </CardTitle>\n00143|               <CardDescription>\n00144|                 Personalised energy management based on NICE guidelines for ME/CFS\n00145|               </CardDescription>\n00146|             </CardHeader>\n00147|             <CardContent className=\"space-y-6\">\n00148|               <div className=\"grid md:grid-cols-2 gap-6\">\n00149|                 <Card className=\"border-blue-200 bg-blue-50\">\n00150|                   <CardHeader>\n00151|                     <CardTitle className=\"text-lg flex items-center gap-2\">\n00152|                       <Battery className=\"h-5 w-5\" />\n00153|                       Your Energy Budget\n00154|                     </CardTitle>\n00155|                   </CardHeader>\n00156|                   <CardContent>\n00157|                     <div className=\"space-y-3\">\n00158|                       <div className=\"flex justify-between items-center\">\n00159|                         <span className=\"text-sm\">Total Energy Capacity:</span>\n00160|                         <Badge>{budget.totalEnergy}%</Badge>\n00161|                       </div>\n00162|                       <div className=\"flex justify-between items-center\">\n00163|                         <span className=\"text-sm\">Symptom Energy Cost:</span>\n00164|                         <Badge variant=\"destructive\">-{budget.symptomDrain}%</Badge>\n00165|                       </div>\n00166|                       <div className=\"flex justify-between items-center\">\n00167|                         <span className=\"text-sm\">Available Energy:</span>\n00168|                         <Badge variant=\"secondary\">{budget.availableEnergy}%</Badge>\n00169|                       </div>\n00170|                       <div className=\"border-t pt-2\">\n00171|                         <div className=\"flex justify-between items-center font-semibold\">\n00172|                           <span className=\"text-sm\">Safe Daily Budget:</span>\n00173|                           <Badge className=\"bg-green-100 text-green-800\">{Math.round(budget.safeLevel)}%</Badge>\n00174|                         </div>\n00175|                       </div>\n00176|                     </div>\n00177|                   </CardContent>\n00178|                 </Card>\n00179| \n00180|                 <Card className=\"border-green-200 bg-green-50\">\n00181|                   <CardHeader>\n00182|                     <CardTitle className=\"text-lg flex items-center gap-2\">\n00183|                       <Target className=\"h-5 w-5\" />\n00184|                       NICE NG206 Principles\n00185|                     </CardTitle>\n00186|                   </CardHeader>\n00187|                   <CardContent>\n00188|                     <ul className=\"text-sm space-y-2\">\n00189|                       <li>• Energy management is self-management led by you</li>\n00190|                       <li>• Do not use more energy than you perceive you have</li>\n00191|                       <li>• Do not 'push through' your symptoms</li>\n00192|                       <li>• Activity is never automatically increased</li>\n00193|                       <li>• Flexible approach - adjust based on symptoms</li>\n00194|                       <li>• Long-term approach - stabilisation takes time</li>\n00195|                     </ul>\n00196|                   </CardContent>\n00197|                 </Card>\n00198|               </div>\n00199| \n00200|               <Alert className=\"border-yellow-200 bg-yellow-50\">\n00201|                 <Lightbulb className=\"h-4 w-4\" />\n00202|                 <AlertDescription>\n00203|                   <strong>NICE NG206 Key Point:</strong> Energy management helps you learn to use the amount of energy you have while reducing your risk of post-exertional malaise. You are the expert in judging your own limits.\n00204|                 </AlertDescription>\n00205|               </Alert>\n00206| \n00207|               <Card>\n00208|                 <CardHeader>\n00209|                   <CardTitle>Your Personalised Recommendations</CardTitle>\n00210|                 </CardHeader>\n00211|                 <CardContent>\n00212|                   <div className=\"grid md:grid-cols-2 gap-4\">\n00213|                     <div>\n00214|                       <h4 className=\"font-semibold mb-2\">Daily Management:</h4>\n00215|                       <ul className=\"text-sm space-y-1\">\n00216|                         {recommendations.map((rec, index) => (\n00217|                           <li key={index} className=\"flex items-start gap-2\">\n00218|                             <span className=\"text-green-600\">•</span>\n00219|                             {rec}\n00220|                           </li>\n00221|                         ))}\n00222|                       </ul>\n00223|                     </div>\n00224|                     <div>\n00225|                       <h4 className=\"font-semibold mb-2\">Activity Planning:</h4>\n00226|                       <ul className=\"text-sm space-y-1\">\n00227|                         <li>• Plan periods of rest and activity</li>\n00228|                         <li>• Alternate between different activity types</li>\n00229|                         <li>• Break activities into small chunks</li>\n00230|                         <li>• Use pre-emptive rest</li>\n00231|                         <li>• Monitor for early warning signs</li>\n00232|                       </ul>\n00233|                     </div>\n00234|                   </div>\n00235|                 </CardContent>\n00236|               </Card>\n00237| \n00238|               <div className=\"bg-red-50 p-4 rounded-lg border border-red-200\">\n00239|                 <h4 className=\"font-semibold mb-2 text-red-900 flex items-center gap-2\">\n00240|                   <AlertTriangle className=\"h-4 w-4\" />\n00241|                   Flare-up and Relapse Management\n00242|                 </h4>\n00243|                 <div className=\"text-red-800 text-sm space-y-2\">\n00244|                   <p><strong>During a flare-up:</strong> Temporarily reduce activity levels and increase rest periods</p>\n00245|                   <p><strong>During a relapse:</strong> Substantially reduce activities and reassess energy limits to stabilise symptoms</p>\n00246|                   <p><strong>Recovery:</strong> Do not return to usual activity levels until symptoms have stabilised</p>\n00247|                 </div>\n00248|               </div>\n00249| \n00250|               <div className=\"flex gap-4 justify-center\">\n00251|                 <Button onClick={() => {\n00252|                   setCurrentStep(0)\n00253|                   setAssessmentData({\n00254|                     currentEnergyLevel: '',\n00255|                     symptoms: [],\n00256|                     dailyActivities: [],\n00257|                     triggers: [],\n00258|                     restPeriods: '',\n00259|                     goals: '',\n00260|                     energyLimits: ''\n00261|                   })\n00262|                   setIsComplete(false)\n00263|                 }} variant=\"outline\">\n00264|                   Create New Plan\n00265|                 </Button>\n00266|                 <Button onClick={() => {\n00267|                   const content = `NICE NG206 Energy Management Plan\n00268|                   \n00269| Energy Budget: ${Math.round(budget.safeLevel)}% daily\n00270| Current Energy Level: ${assessmentData.currentEnergyLevel}\n00271| Symptoms: ${assessmentData.symptoms.join(', ')}\n00272| \n00273| Recommendations:\n00274| ${recommendations.map(r => `• ${r}`).join('\\n')}\n00275| \n00276| Remember: You are the expert in judging your own limits. Do not push through symptoms.`\n00277|                   \n00278|                   const blob = new Blob([content], { type: 'text/plain' })\n00279|                   const url = URL.createObjectURL(blob)\n00280|                   const a = document.createElement('a')\n00281|                   a.href = url\n00282|                   a.download = 'energy-management-plan.txt'\n00283|                   a.click()\n00284|                   URL.revokeObjectURL(url)\n00285|                 }}>\n00286|                   Download Plan\n00287|                 </Button>\n00288|               </div>\n00289|             </CardContent>\n00290|           </Card>\n00291|         </div>\n00292|       </div>\n00293|     )\n00294|   }\n00295| \n00296|   const progress = ((currentStep + 1) / steps.length) * 100\n00297| \n00298|   return (\n00299|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00300|       <div className=\"container mx-auto px-4 max-w-3xl\">\n00301|         <div className=\"mb-6\">\n00302|           <div className=\"flex items-center gap-4 mb-4\">\n00303|             <Battery className=\"h-5 w-5 text-blue-600\" />\n00304|             <div>\n00305|               <h1 className=\"text-2xl font-bold text-gray-900\">NICE NG206 Energy Management</h1>\n00306|               <p className=\"text-gray-600\">Create your personalised energy management plan</p>\n00307|             </div>\n00308|           </div>\n00309|           \n00310|           <Progress value={progress} className=\"h-2\" />\n00311|           <p className=\"text-sm text-gray-600 mt-2\">\n00312|             Step {currentStep + 1} of {steps.length}: {steps[currentStep]}\n00313|           </p>\n00314|         </div>\n00315| \n00316|         <Card>\n00317|           <CardHeader>\n00318|             <CardTitle className=\"text-lg\">\n00319|               {steps[currentStep]}\n00320|             </CardTitle>\n00321|             <CardDescription>\n00322|               {currentStep === 0 && \"Assess your current energy level and symptoms\"}\n00323|               {currentStep === 1 && \"Map your daily activities and energy costs\"}\n00324|               {currentStep === 2 && \"Identify triggers for symptom worsening\"}\n00325|               {currentStep === 3 && \"Set goals and energy limits\"}\n00326|               {currentStep === 4 && \"Review your personalised plan\"}\n00327|             </CardDescription>\n00328|           </CardHeader>\n00329|           <CardContent>\n00330|             <div className=\"space-y-6\">\n00331|               {currentStep === 0 && (\n00332|                 <div className=\"space-y-4\">\n00333|                   <div>\n00334|                     <Label className=\"text-base font-medium\">Current Energy Level</Label>\n00335|                     <RadioGroup \n00336|                       value={assessmentData.currentEnergyLevel} \n00337|                       onValueChange={(value) => setAssessmentData(prev => ({ ...prev, currentEnergyLevel: value }))}\n00338|                       className=\"mt-2\"\n00339|                     >\n00340|                       {energyLevels.map((level) => (\n00341|                         <div key={level.value} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00342|                           <RadioGroupItem value={level.value} id={level.value} className=\"mt-1\" />\n00343|                           <Label htmlFor={level.value} className=\"cursor-pointer flex-1\">\n00344|                             {level.label}\n00345|                           </Label>\n00346|                         </div>\n00347|                       ))}\n00348|                     </RadioGroup>\n00349|                   </div>\n00350| \n00351|                   <div>\n00352|                     <Label className=\"text-base font-medium\">Current Symptoms (Select all that apply)</Label>\n00353|                     <div className=\"grid md:grid-cols-2 gap-2 mt-2\">\n00354|                       {commonSymptoms.map((symptom) => (\n00355|                         <div key={symptom} className=\"flex items-center space-x-2\">\n00356|                           <Checkbox\n00357|                             id={symptom}\n00358|                             checked={assessmentData.symptoms.includes(symptom)}\n00359|                             onCheckedChange={(checked) => {\n00360|                               if (checked) {\n00361|                                 setAssessmentData(prev => ({ \n00362|                                   ...prev, \n00363|                                   symptoms: [...prev.symptoms, symptom] \n00364|                                 }))\n00365|                               } else {\n00366|                                 setAssessmentData(prev => ({ \n00367|                                   ...prev, \n00368|                                   symptoms: prev.symptoms.filter(s => s !== symptom) \n00369|                                 }))\n00370|                               }\n00371|                             }}\n00372|                           />\n00373|                           <Label htmlFor={symptom} className=\"text-sm\">{symptom}</Label>\n00374|                         </div>\n00375|                       ))}\n00376|                     </div>\n00377|                   </div>\n00378|                 </div>\n00379|               )}\n00380| \n00381|               {currentStep === 1 && (\n00382|                 <div className=\"space-y-4\">\n00383|                   <p className=\"text-sm text-gray-600\">\n00384|                     NICE NG206: Consider all types of activity - cognitive, physical, emotional and social\n00385|                   </p>\n00386|                   {activityTypes.map((type) => (\n00387|                     <Card key={type.type} className=\"border-gray-200\">\n00388|                       <CardHeader className=\"pb-2\">\n00389|                         <CardTitle className=\"text-base flex items-center gap-2\">\n00390|                           {type.label}\n00391|                         </CardTitle>\n00392|                         <CardDescription className=\"text-xs\">{type.examples}</CardDescription>\n00393|                       </CardHeader>\n00394|                       <CardContent>\n00395|                         <div className=\"space-y-3\">\n00396|                           <p className=\"text-sm text-gray-600\">\n00397|                             Rate the energy cost of these activities (1 = Very Low, 5 = Very High):\n00398|                           </p>\n00399|                           \n00400|                           {/* Sample activities for each category */}\n00401|                           {type.type === 'cognitive' && (\n00402|                             <div className=\"space-y-2\">\n00403|                               {['Reading for 30 minutes', 'Computer work for 1 hour', 'Making decisions/planning'].map((activity, idx) => (\n00404|                                 <div key={idx} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n00405|                                   <span className=\"text-sm\">{activity}</span>\n00406|                                   <div className=\"flex gap-1\">\n00407|                                     {[1,2,3,4,5].map(cost => (\n00408|                                       <Button\n00409|                                         key={cost}\n00410|                                         size=\"sm\"\n00411|                                         variant={assessmentData.dailyActivities.find(a => a.activity === activity)?.energyCost === cost ? \"default\" : \"outline\"}\n00412|                                         className=\"w-8 h-8 p-0\"\n00413|                                         onClick={() => {\n00414|                                           const newActivity: EnergyActivity = {\n00415|                                             type: type.type as 'cognitive' | 'physical' | 'emotional' | 'social',\n00416|                                             activity,\n00417|                                             energyCost: cost,\n00418|                                             duration: 30,\n00419|                                             canReduce: true\n00420|                                           }\n00421|                                           setAssessmentData(prev => ({\n00422|                                             ...prev,\n00423|                                             dailyActivities: [\n00424|                                               ...prev.dailyActivities.filter(a => a.activity !== activity),\n00425|                                               newActivity\n00426|                                             ]\n00427|                                           }))\n00428|                                         }}\n00429|                                       >\n00430|                                         {cost}\n00431|                                       </Button>\n00432|                                     ))}\n00433|                                   </div>\n00434|                                 </div>\n00435|                               ))}\n00436|                             </div>\n00437|                           )}\n00438|                           \n00439|                           {type.type === 'physical' && (\n00440|                             <div className=\"space-y-2\">\n00441|                               {['Walking for 15 minutes', 'Light household tasks', 'Climbing stairs'].map((activity, idx) => (\n00442|                                 <div key={idx} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n00443|                                   <span className=\"text-sm\">{activity}</span>\n00444|                                   <div className=\"flex gap-1\">\n00445|                                     {[1,2,3,4,5].map(cost => (\n00446|                                       <Button\n00447|                                         key={cost}\n00448|                                         size=\"sm\"\n00449|                                         variant={assessmentData.dailyActivities.find(a => a.activity === activity)?.energyCost === cost ? \"default\" : \"outline\"}\n00450|                                         className=\"w-8 h-8 p-0\"\n00451|                                         onClick={() => {\n00452|                                           const newActivity: EnergyActivity = {\n00453|                                             type: type.type as 'cognitive' | 'physical' | 'emotional' | 'social',\n00454|                                             activity,\n00455|                                             energyCost: cost,\n00456|                                             duration: 30,\n00457|                                             canReduce: true\n00458|                                           }\n00459|                                           setAssessmentData(prev => ({\n00460|                                             ...prev,\n00461|                                             dailyActivities: [\n00462|                                               ...prev.dailyActivities.filter(a => a.activity !== activity),\n00463|                                               newActivity\n00464|                                             ]\n00465|                                           }))\n00466|                                         }}\n00467|                                       >\n00468|                                         {cost}\n00469|                                       </Button>\n00470|                                     ))}\n00471|                                   </div>\n00472|                                 </div>\n00473|                               ))}\n00474|                             </div>\n00475|                           )}\n00476|                           \n00477|                           {type.type === 'emotional' && (\n00478|                             <div className=\"space-y-2\">\n00479|                               {['Difficult conversations', 'Managing stress/worry', 'Emotional situations'].map((activity, idx) => (\n00480|                                 <div key={idx} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n00481|                                   <span className=\"text-sm\">{activity}</span>\n00482|                                   <div className=\"flex gap-1\">\n00483|                                     {[1,2,3,4,5].map(cost => (\n00484|                                       <Button\n00485|                                         key={cost}\n00486|                                         size=\"sm\"\n00487|                                         variant={assessmentData.dailyActivities.find(a => a.activity === activity)?.energyCost === cost ? \"default\" : \"outline\"}\n00488|                                         className=\"w-8 h-8 p-0\"\n00489|                                         onClick={() => {\n00490|                                           const newActivity: EnergyActivity = {\n00491|                                             type: type.type as 'cognitive' | 'physical' | 'emotional' | 'social',\n00492|                                             activity,\n00493|                                             energyCost: cost,\n00494|                                             duration: 30,\n00495|                                             canReduce: true\n00496|                                           }\n00497|                                           setAssessmentData(prev => ({\n00498|                                             ...prev,\n00499|                                             dailyActivities: [\n00500|                                               ...prev.dailyActivities.filter(a => a.activity !== activity),\n00501|                                               newActivity\n00502|                                             ]\n00503|                                           }))\n00504|                                         }}\n00505|                                       >\n00506|                                         {cost}\n00507|                                       </Button>\n00508|                                     ))}\n00509|                                   </div>\n00510|                                 </div>\n00511|                               ))}\n00512|                             </div>\n00513|                           )}\n00514|                           \n00515|                           {type.type === 'social' && (\n00516|                             <div className=\"space-y-2\">\n00517|                               {['Phone calls (30 min)', 'Social events/gatherings', 'Work meetings'].map((activity, idx) => (\n00518|                                 <div key={idx} className=\"flex items-center justify-between p-2 bg-gray-50 rounded\">\n00519|                                   <span className=\"text-sm\">{activity}</span>\n00520|                                   <div className=\"flex gap-1\">\n00521|                                     {[1,2,3,4,5].map(cost => (\n00522|                                       <Button\n00523|                                         key={cost}\n00524|                                         size=\"sm\"\n00525|                                         variant={assessmentData.dailyActivities.find(a => a.activity === activity)?.energyCost === cost ? \"default\" : \"outline\"}\n00526|                                         className=\"w-8 h-8 p-0\"\n00527|                                         onClick={() => {\n00528|                                           const newActivity: EnergyActivity = {\n00529|                                             type: type.type as 'cognitive' | 'physical' | 'emotional' | 'social',\n00530|                                             activity,\n00531|                                             energyCost: cost,\n00532|                                             duration: 30,\n00533|                                             canReduce: true\n00534|                                           }\n00535|                                           setAssessmentData(prev => ({\n00536|                                             ...prev,\n00537|                                             dailyActivities: [\n00538|                                               ...prev.dailyActivities.filter(a => a.activity !== activity),\n00539|                                               newActivity\n00540|                                             ]\n00541|                                           }))\n00542|                                         }}\n00543|                                       >\n00544|                                         {cost}\n00545|                                       </Button>\n00546|                                     ))}\n00547|                                   </div>\n00548|                                 </div>\n00549|                               ))}\n00550|                             </div>\n00551|                           )}\n00552|                         </div>\n00553|                       </CardContent>\n00554|                     </Card>\n00555|                   ))}\n00556|                   \n00557|                   {assessmentData.dailyActivities.length > 0 && (\n00558|                     <Card className=\"bg-green-50 border-green-200\">\n00559|                       <CardHeader>\n00560|                         <CardTitle className=\"text-sm text-green-900\">Activities Mapped ({assessmentData.dailyActivities.length})</CardTitle>\n00561|                       </CardHeader>\n00562|                       <CardContent>\n00563|                         <div className=\"text-xs text-green-800\">\n00564|                           You've mapped {assessmentData.dailyActivities.length} activities. This will help create your personalized energy management plan.\n00565|                         </div>\n00566|                       </CardContent>\n00567|                     </Card>\n00568|                   )}\n00569|                 </div>\n00570|               )}\n00571| \n00572|               {currentStep === 2 && (\n00573|                 <div className=\"space-y-4\">\n00574|                   <div>\n00575|                     <Label htmlFor=\"triggers\" className=\"text-base font-medium\">\n00576|                       What activities or situations consistently trigger symptom worsening?\n00577|                     </Label>\n00578|                     <Textarea\n00579|                       id=\"triggers\"\n00580|                       placeholder=\"e.g., phone calls, standing for long periods, bright lights, social events...\"\n00581|                       value={assessmentData.triggers.join('\\n')}\n00582|                       onChange={(e) => setAssessmentData(prev => ({ \n00583|                         ...prev, \n00584|                         triggers: e.target.value.split('\\n').filter(t => t.trim()) \n00585|                       }))}\n00586|                       className=\"mt-2\"\n00587|                     />\n00588|                   </div>\n00589|                 </div>\n00590|               )}\n00591| \n00592|               {currentStep === 3 && (\n00593|                 <div className=\"space-y-4\">\n00594|                   <div>\n00595|                     <Label htmlFor=\"goals\" className=\"text-base font-medium\">\n00596|                       What are your priorities and goals for managing your energy?\n00597|                     </Label>\n00598|                     <Textarea\n00599|                       id=\"goals\"\n00600|                       placeholder=\"e.g., be able to work part-time, maintain relationships, manage household tasks...\"\n00601|                       value={assessmentData.goals}\n00602|                       onChange={(e) => setAssessmentData(prev => ({ ...prev, goals: e.target.value }))}\n00603|                       className=\"mt-2\"\n00604|                     />\n00605|                   </div>\n00606|                   <div>\n00607|                     <Label htmlFor=\"limits\" className=\"text-base font-medium\">\n00608|                       What have you learned about your energy limits?\n00609|                     </Label>\n00610|                     <Textarea\n00611|                       id=\"limits\"\n00612|                       placeholder=\"e.g., can work for 2 hours before needing rest, social events drain me for days...\"\n00613|                       value={assessmentData.energyLimits}\n00614|                       onChange={(e) => setAssessmentData(prev => ({ ...prev, energyLimits: e.target.value }))}\n00615|                       className=\"mt-2\"\n00616|                     />\n00617|                   </div>\n00618|                 </div>\n00619|               )}\n00620| \n00621|               <div className=\"flex justify-between pt-6\">\n00622|                 <Button \n00623|                   onClick={prevStep} \n00624|                   disabled={currentStep === 0}\n00625|                   variant=\"outline\"\n00626|                   className=\"flex items-center gap-2\"\n00627|                 >\n00628|                   Previous\n00629|                 </Button>\n00630|                 \n00631|                 <Button \n00632|                   onClick={nextStep}\n00633|                   disabled={currentStep === 0 && !assessmentData.currentEnergyLevel}\n00634|                   className=\"flex items-center gap-2\"\n00635|                 >\n00636|                   {currentStep === steps.length - 1 ? 'Create Plan' : 'Next'}\n00637|                 </Button>\n00638|               </div>\n00639|             </div>\n00640|           </CardContent>\n00641|         </Card>\n00642|       </div>\n00643|     </div>\n00644|   )\n00645| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Input } from '@/components/ui/input'\nimport { Progress } from '@/components/ui/progress'\nimport { Battery, CheckCircle, AlertTriangle, Clock, Target, Lightbulb } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface EnergyActivity {\n  type: 'cognitive' | 'physical' | 'emotional' | 'social'\n  activity: string"
    },
    "title": "app/energy-management/page.tsx",
    "time": {
      "start": 1758539272599,
      "end": 1758539272603
    }
  }
}