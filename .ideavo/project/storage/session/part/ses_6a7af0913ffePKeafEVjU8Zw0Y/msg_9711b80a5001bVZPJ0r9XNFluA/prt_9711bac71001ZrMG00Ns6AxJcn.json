{
  "id": "prt_9711bac71001ZrMG00Ns6AxJcn",
  "messageID": "msg_9711b80a5001bVZPJ0r9XNFluA",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_013PhsyHji1qoazfZimcmNaz",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/red-flag-checker/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Checkbox } from '@/components/ui/checkbox'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { Alert, AlertDescription } from '@/components/ui/alert'\n00009| import { FileText, AlertTriangle, CheckCircle, Activity, Heart, Brain } from 'lucide-react'\n00010| import Link from 'next/link'\n00011| import { useTranslation } from '@/lib/language-context'\n00012| \n00013| const getRedFlagSymptoms = (t: any) => t.redFlag.symptoms.list.map((symptom: string, index: number) => ({\n00014|   id: ['fever', 'weight_loss', 'chest_pain', 'dyspnea', 'neurological', 'bleeding', 'lymphadenopathy', 'jaundice'][index],\n00015|   symptom,\n00016|   category: t.redFlag.urgentCategories[index] || t.redFlag.urgentCategories[0],\n00017|   priority: 'high',\n00018|   tests: [\n00019|     ['CBC with differential', 'ESR', 'CRP', 'Blood cultures', 'Chest X-ray'],\n00020|     ['CBC', 'Comprehensive metabolic panel', 'TSH', 'HbA1c', 'CT chest/abdomen/pelvis'],\n00021|     ['ECG', 'Troponin', 'Chest X-ray', 'Echocardiogram', 'Stress test'],\n00022|     ['Chest X-ray', 'ECG', 'Echocardiogram', 'Pulmonary function tests', 'D-dimer'],\n00023|     ['MRI brain', 'Neurological consultation', 'EEG if seizures'],\n00024|     ['CBC with platelet count', 'PT/PTT', 'Peripheral blood smear'],\n00025|     ['CBC with differential', 'LDH', 'CT chest/abdomen/pelvis'],\n00026|     ['Liver function tests', 'Hepatitis panel', 'Abdominal ultrasound']\n00027|   ][index]\n00028| }))\n00029| \n00030| const getRoutineLabs = (t: any) => [\n00031|   {\n00032|     category: t.redFlag.routineLabs.categories.essential.title,\n00033|     tests: t.redFlag.routineLabs.categories.essential.tests,\n00034|     indication: t.redFlag.routineLabs.categories.essential.indication\n00035|   },\n00036|   {\n00037|     category: t.redFlag.routineLabs.categories.additional.title,\n00038|     tests: t.redFlag.routineLabs.categories.additional.tests,\n00039|     indication: t.redFlag.routineLabs.categories.additional.indication\n00040|   },\n00041|   {\n00042|     category: t.redFlag.routineLabs.categories.paediatric.title,\n00043|     tests: t.redFlag.routineLabs.categories.paediatric.tests,\n00044|     indication: t.redFlag.routineLabs.categories.paediatric.indication\n00045|   }\n00046| ]\n00047| \n00048| export default function RedFlagChecker() {\n00049|   const [selectedRedFlags, setSelectedRedFlags] = useState<string[]>([])\n00050|   const [selectedRoutineLabs, setSelectedRoutineLabs] = useState<string[]>([])\n00051|   const [isComplete, setIsComplete] = useState(false)\n00052|   const { t } = useTranslation()\n00053|   const redFlagSymptoms = getRedFlagSymptoms(t)\n00054|   const routineLabs = getRoutineLabs(t)\n00055| \n00056|   const handleRedFlagChange = (redFlagId: string, checked: boolean) => {\n00057|     if (checked) {\n00058|       setSelectedRedFlags(prev => [...prev, redFlagId])\n00059|     } else {\n00060|       setSelectedRedFlags(prev => prev.filter(id => id !== redFlagId))\n00061|     }\n00062|   }\n00063| \n00064|   const handleRoutineLabChange = (categoryKey: string, checked: boolean) => {\n00065|     if (checked) {\n00066|       setSelectedRoutineLabs(prev => [...prev, categoryKey])\n00067|     } else {\n00068|       setSelectedRoutineLabs(prev => prev.filter(cat => cat !== categoryKey))\n00069|     }\n00070|   }\n00071| \n00072|   const generateRecommendations = () => {\n00073|     const urgentTests = new Set<string>()\n00074|     const routineTests = new Set<string>()\n00075|     \n00076|     // Add tests based on red flags\n00077|     selectedRedFlags.forEach(flagId => {\n00078|       const flag = redFlagSymptoms.find(f => f.id === flagId)\n00079|       if (flag) {\n00080|         flag.tests.forEach(test => urgentTests.add(test))\n00081|       }\n00082|     })\n00083| \n00084|     // Add routine tests\n00085|     selectedRoutineLabs.forEach(categoryKey => {\n00086|       const category = routineLabs.find(cat => cat.category === categoryKey)\n00087|       if (category) {\n00088|         category.tests.forEach(test => routineTests.add(test))\n00089|       }\n00090|     })\n00091| \n00092|     const hasHighPriorityFlags = selectedRedFlags.some(flagId => \n00093|       redFlagSymptoms.find(f => f.id === flagId)?.priority === 'high'\n00094|     )\n00095| \n00096|     return {\n00097|       urgentTests: Array.from(urgentTests),\n00098|       routineTests: Array.from(routineTests),\n00099|       hasHighPriorityFlags,\n00100|       recommendation: hasHighPriorityFlags ? 'urgent' : selectedRedFlags.length > 0 ? 'priority' : 'routine'\n00101|     }\n00102|   }\n00103| \n00104|   if (isComplete) {\n00105|     const recommendations = generateRecommendations()\n00106|     \n00107|     return (\n00108|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00109|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00110|           <Card>\n00111|             <CardHeader className=\"text-center\">\n00112|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00113|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00114|                 {t.redFlag.results.complete}\n00115|               </CardTitle>\n00116|               <CardDescription>\n00117|                 Laboratory and diagnostic recommendations based on clinical presentation\n00118|               </CardDescription>\n00119|             </CardHeader>\n00120|             <CardContent className=\"space-y-6\">\n00121|               {recommendations.hasHighPriorityFlags && (\n00122|                 <Alert className=\"border-red-200 bg-red-50\">\n00123|                   <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n00124|                   <AlertDescription className=\"text-red-800\">\n00125|                     <strong>{t.redFlag.results.urgentEval}:</strong> High-priority red flags detected. \n00126|                     Consider immediate or expedited workup.\n00127|                   </AlertDescription>\n00128|                 </Alert>\n00129|               )}\n00130| \n00131|               <div className=\"grid md:grid-cols-2 gap-6\">\n00132|                 {recommendations.urgentTests.length > 0 && (\n00133|                   <Card className=\"border-red-200\">\n00134|                     <CardHeader className=\"pb-3\">\n00135|                       <CardTitle className=\"text-lg text-red-800 flex items-center gap-2\">\n00136|                         <Heart className=\"h-5 w-5\" />\n00137|                         {t.redFlag.results.priorityTests}\n00138|                       </CardTitle>\n00139|                     </CardHeader>\n00140|                     <CardContent>\n00141|                       <ul className=\"space-y-2\">\n00142|                         {recommendations.urgentTests.map((test, index) => (\n00143|                           <li key={index} className=\"flex items-center gap-2 text-sm\">\n00144|                             <Activity className=\"h-3 w-3 text-red-600\" />\n00145|                             {test}\n00146|                           </li>\n00147|                         ))}\n00148|                       </ul>\n00149|                     </CardContent>\n00150|                   </Card>\n00151|                 )}\n00152| \n00153|                 {recommendations.routineTests.length > 0 && (\n00154|                   <Card className=\"border-blue-200\">\n00155|                     <CardHeader className=\"pb-3\">\n00156|                       <CardTitle className=\"text-lg text-blue-800 flex items-center gap-2\">\n00157|                         <FileText className=\"h-5 w-5\" />\n00158|                         {t.redFlag.results.routineTests}\n00159|                       </CardTitle>\n00160|                     </CardHeader>\n00161|                     <CardContent>\n00162|                       <ul className=\"space-y-2\">\n00163|                         {recommendations.routineTests.map((test, index) => (\n00164|                           <li key={index} className=\"flex items-center gap-2 text-sm\">\n00165|                             <Activity className=\"h-3 w-3 text-blue-600\" />\n00166|                             {test}\n00167|                           </li>\n00168|                         ))}\n00169|                       </ul>\n00170|                     </CardContent>\n00171|                   </Card>\n00172|                 )}\n00173|               </div>\n00174| \n00175|               {selectedRedFlags.length === 0 && selectedRoutineLabs.length === 0 && (\n00176|                 <Card className=\"border-green-200 bg-green-50\">\n00177|                   <CardContent className=\"pt-6\">\n00178|                     <div className=\"text-center text-green-800\">\n00179|                       <CheckCircle className=\"h-8 w-8 mx-auto mb-2\" />\n00180|                       <h3 className=\"font-semibold mb-2\">{t.redFlag.results.noRedFlags}</h3>\n00181|                       <p className=\"text-sm\">\n00182|                         Patient can proceed to targeted ME/CFS, Long COVID, or POTS assessment.\n00183|                         Consider basic metabolic panel if not done recently.\n00184|                       </p>\n00185|                     </div>\n00186|                   </CardContent>\n00187|                 </Card>\n00188|               )}\n00189| \n00190|               <div className=\"bg-gray-50 p-4 rounded-lg\">\n00191|                 <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n00192|                   <Brain className=\"h-4 w-4\" />\n00193|                   {t.redFlag.results.clinicalSupport}\n00194|                 </h4>\n00195|                 <div className=\"text-sm space-y-2\">\n00196|                   {recommendations.recommendation === 'urgent' && (\n00197|                     <p className=\"text-red-700\">\n00198|                       {t.redFlag.results.urgent}\n00199|                     </p>\n00200|                   )}\n00201|                   {recommendations.recommendation === 'priority' && (\n00202|                     <p className=\"text-yellow-700\">\n00203|                       {t.redFlag.results.priority}\n00204|                     </p>\n00205|                   )}\n00206|                   {recommendations.recommendation === 'routine' && (\n00207|                     <p className=\"text-green-700\">\n00208|                       {t.redFlag.results.routine}\n00209|                     </p>\n00210|                   )}\n00211|                 </div>\n00212|               </div>\n00213| \n00214|               <div className=\"flex gap-4 justify-center\">\n00215|                 <Button onClick={() => {\n00216|                   setSelectedRedFlags([])\n00217|                   setSelectedRoutineLabs([])\n00218|                   setIsComplete(false)\n00219|                 }} variant=\"outline\">\n00220|                   {t.redFlag.results.reassess}\n00221|                 </Button>\n00222|                 {recommendations.recommendation === 'routine' && (\n00223|                   <Button asChild>\n00224|                     <Link href=\"/stand-test\">\n00225|                       {t.common.continue} to Stand-Test Pro\n00226|                     </Link>\n00227|                   </Button>\n00228|                 )}\n00229|               </div>\n00230|             </CardContent>\n00231|           </Card>\n00232|         </div>\n00233|       </div>\n00234|     )\n00235|   }\n00236| \n00237|   return (\n00238|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00239|       <div className=\"container mx-auto px-4 max-w-4xl\">\n00240|         <div className=\"mb-6\">\n00241|           <div className=\"flex items-center gap-4 mb-4\">\n00242|             <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n00243|             <div>\n00244|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.redFlag.title}</h1>\n00245|               <p className=\"text-gray-600\">{t.redFlag.description}</p>\n00246|             </div>\n00247|           </div>\n00248|         </div>\n00249| \n00250|         <div className=\"space-y-6\">\n00251|           <Card>\n00252|             <CardHeader>\n00253|               <CardTitle className=\"text-lg text-red-800\">{t.redFlag.symptoms.title}</CardTitle>\n00254|               <CardDescription>\n00255|                 {t.redFlag.symptoms.description}\n00256|               </CardDescription>\n00257|             </CardHeader>\n00258|             <CardContent>\n00259|               <div className=\"grid md:grid-cols-2 gap-4\">\n00260|                 {redFlagSymptoms.map((flag, index) => (\n00261|                   <div key={flag.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00262|                     <Checkbox\n00263|                       id={flag.id}\n00264|                       checked={selectedRedFlags.includes(flag.id)}\n00265|                       onCheckedChange={(checked) => handleRedFlagChange(flag.id, !!checked)}\n00266|                     />\n00267|                     <div className=\"flex-1\">\n00268|                       <label htmlFor={flag.id} className=\"text-sm font-medium cursor-pointer\">\n00269|                         {t.redFlag.symptoms.list[index]}\n00270|                       </label>\n00271|                       <div className=\"flex gap-2 mt-1\">\n00272|                         <Badge \n00273|                           variant={flag.priority === 'high' ? 'destructive' : 'secondary'}\n00274|                           className=\"text-xs\"\n00275|                         >\n00276|                           {flag.category}\n00277|                         </Badge>\n00278|                       </div>\n00279|                     </div>\n00280|                   </div>\n00281|                 ))}\n00282|               </div>\n00283|             </CardContent>\n00284|           </Card>\n00285| \n00286|           <Card>\n00287|             <CardHeader>\n00288|               <CardTitle className=\"text-lg text-blue-800\">{t.redFlag.routineLabs.title}</CardTitle>\n00289|               <CardDescription>\n00290|                 {t.redFlag.routineLabs.description}\n00291|               </CardDescription>\n00292|             </CardHeader>\n00293|             <CardContent>\n00294|               <div className=\"grid md:grid-cols-2 gap-4\">\n00295|                 {routineLabs.map((labCategory, index) => (\n00296|                   <div key={labCategory.category} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00297|                     <Checkbox\n00298|                       id={labCategory.category}\n00299|                       checked={selectedRoutineLabs.includes(labCategory.category)}\n00300|                       onCheckedChange={(checked) => handleRoutineLabChange(labCategory.category, !!checked)}\n00301|                     />\n00302|                     <div className=\"flex-1\">\n00303|                       <label htmlFor={labCategory.category} className=\"text-sm font-medium cursor-pointer\">\n00304|                         {labCategory.category}\n00305|                       </label>\n00306|                       <p className=\"text-xs text-gray-600 mt-1\">{labCategory.indication}</p>\n00307|                       <div className=\"text-xs text-gray-500 mt-1\">\n00308|                         {labCategory.tests.slice(0, 3).join(', ')}\n00309|                         {labCategory.tests.length > 3 && ` + ${labCategory.tests.length - 3} more`}\n00310|                       </div>\n00311|                     </div>\n00312|                   </div>\n00313|                 ))}\n00314|               </div>\n00315|             </CardContent>\n00316|           </Card>\n00317| \n00318|           <div className=\"flex justify-center\">\n00319|             <Button onClick={() => setIsComplete(true)} className=\"px-8\">\n00320|               {t.redFlag.results.generateRecommendations}\n00321|             </Button>\n00322|           </div>\n00323|         </div>\n00324|       </div>\n00325|     </div>\n00326|   )\n00327| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { FileText, AlertTriangle, CheckCircle, Activity, Heart, Brain } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\nconst getRedFlagSymptoms = (t: any) => t.redFlag.symptoms.list.map((symptom: string, index: number) => ({\n  id: ['fever', 'weight_loss', 'chest_pain', 'dyspnea', 'neurological', 'bleeding', 'lymphadenopathy', 'jaundice'][index],\n  symptom,\n  category: t.redFlag.urgentCategories[index] || t.redFlag.urgentCategories[0],\n  priority: 'high',\n  tests: [\n    ['CBC with differential', 'ESR', 'CRP', 'Blood cultures', 'Chest X-ray'],\n    ['CBC', 'Comprehensive metabolic panel', 'TSH', 'HbA1c', 'CT chest/abdomen/pelvis'],"
    },
    "title": "app/red-flag-checker/page.tsx",
    "time": {
      "start": 1758539263343,
      "end": 1758539263347
    }
  }
}