{
  "id": "prt_9711bad71001Nd49mtlGIUIYX8",
  "messageID": "msg_9711b80a5001bVZPJ0r9XNFluA",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01VBm1p3eqFBATk7yhgMG4kB",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/pem-quest/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n00007| import { Label } from '@/components/ui/label'\n00008| import { Progress } from '@/components/ui/progress'\n00009| import { Badge } from '@/components/ui/badge'\n00010| import { Alert, AlertDescription } from '@/components/ui/alert'\n00011| import { ArrowLeft, ArrowRight, Activity, Clock, TrendingDown, CheckCircle } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| import { useTranslation } from '@/lib/language-context'\n00014| \n00015| interface PEMQuestion {\n00016|   id: string\n00017|   question: string\n00018|   description?: string\n00019|   options: { value: string; label: string; score: number }[]\n00020| }\n00021| \n00022| // PEM questions will be generated from translations\n00023| \n00024| export default function PEMQuest() {\n00025|   const [answers, setAnswers] = useState<Record<string, string>>({})\n00026|   const [currentQuestion, setCurrentQuestion] = useState(0)\n00027|   const [isComplete, setIsComplete] = useState(false)\n00028|   const { t } = useTranslation()\n00029| \n00030|   const handleAnswer = (questionId: string, value: string) => {\n00031|     setAnswers(prev => ({\n00032|       ...prev,\n00033|       [questionId]: value\n00034|     }))\n00035|   }\n00036| \n00037|   const nextQuestion = () => {\n00038|     if (currentQuestion < pemQuestions.length - 1) {\n00039|       setCurrentQuestion(prev => prev + 1)\n00040|     } else {\n00041|       setIsComplete(true)\n00042|     }\n00043|   }\n00044| \n00045|   const prevQuestion = () => {\n00046|     if (currentQuestion > 0) {\n00047|       setCurrentQuestion(prev => prev - 1)\n00048|     }\n00049|   }\n00050| \n00051|   const getPEMQuestions = () => {\n00052|     // NICE NG206 aligned scoring: Higher scores indicate more severe PEM\n00053|     const scoreArrays = [[0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4]]\n00054|     \n00055|     return [\n00056|       {\n00057|         id: 'activity_tolerance',\n00058|         question: t.pem.questions.activityTolerance.question,\n00059|         description: t.pem.questions.activityTolerance.description,\n00060|         options: t.pem.questions.activityTolerance.options.map((label, index) => ({\n00061|           value: ['none', 'rare', 'sometimes', 'often', 'always'][index],\n00062|           label,\n00063|           score: scoreArrays[0][index]\n00064|         }))\n00065|       },\n00066|       {\n00067|         id: 'delayed_onset',\n00068|         question: t.pem.questions.delayedOnset.question,\n00069|         description: t.pem.questions.delayedOnset.description,\n00070|         options: t.pem.questions.delayedOnset.options.map((label, index) => ({\n00071|           value: ['no_delay', 'hours', 'several_hours', 'one_two_days', 'days_plus'][index],\n00072|           label,\n00073|           score: scoreArrays[1][index]\n00074|         }))\n00075|       },\n00076|       {\n00077|         id: 'disproportionate',\n00078|         question: t.pem.questions.disproportionate.question,\n00079|         description: t.pem.questions.disproportionate.description,\n00080|         options: t.pem.questions.disproportionate.options.map((label, index) => ({\n00081|           value: ['proportionate', 'slightly', 'moderately', 'significantly', 'severely'][index],\n00082|           label,\n00083|           score: scoreArrays[2][index]\n00084|         }))\n00085|       },\n00086|       {\n00087|         id: 'prolonged_recovery',\n00088|         question: t.pem.questions.prolongedRecovery.question,\n00089|         description: t.pem.questions.prolongedRecovery.description,\n00090|         options: t.pem.questions.prolongedRecovery.options.map((label, index) => ({\n00091|           value: ['no_recovery', 'hours', 'days', 'weeks', 'weeks_months'][index],\n00092|           label,\n00093|           score: scoreArrays[3][index]\n00094|         }))\n00095|       },\n00096|       {\n00097|         id: 'activity_types',\n00098|         question: t.pem.questions.activityTypes.question,\n00099|         description: t.pem.questions.activityTypes.description,\n00100|         options: t.pem.questions.activityTypes.options.map((label, index) => ({\n00101|           value: ['none', 'physical_only', 'physical_cognitive', 'physical_cognitive_emotional', 'all_types'][index],\n00102|           label,\n00103|           score: scoreArrays[4][index]\n00104|         }))\n00105|       }\n00106|     ]\n00107|   }\n00108| \n00109|   const calculatePEMScore = () => {\n00110|     const pemQuestions = getPEMQuestions()\n00111|     const totalScore = pemQuestions.reduce((sum, question) => {\n00112|       const answer = answers[question.id]\n00113|       const option = question.options.find(opt => opt.value === answer)\n00114|       return sum + (option?.score || 0)\n00115|     }, 0)\n00116| \n00117|     const maxScore = pemQuestions.reduce((sum, question) => {\n00118|       return sum + Math.max(...question.options.map(opt => opt.score))\n00119|     }, 0)\n00120| \n00121|     const percentage = (totalScore / maxScore) * 100\n00122| \n00123|     // NICE NG206 Assessment: PEM requires worsening after activity with specific characteristics\n00124|     const activityToleranceScore = answers['activity_tolerance'] ? getPEMQuestions()[0].options.find(opt => opt.value === answers['activity_tolerance'])?.score || 0 : 0\n00125|     const delayedOnsetScore = answers['delayed_onset'] ? getPEMQuestions()[1].options.find(opt => opt.value === answers['delayed_onset'])?.score || 0 : 0\n00126|     const disproportionateScore = answers['disproportionate'] ? getPEMQuestions()[2].options.find(opt => opt.value === answers['disproportionate'])?.score || 0 : 0\n00127|     const prolongedRecoveryScore = answers['prolonged_recovery'] ? getPEMQuestions()[3].options.find(opt => opt.value === answers['prolonged_recovery'])?.score || 0 : 0\n00128|     \n00129|     // NICE criteria: Must have worsening (score >=2), with delay/disproportionate/prolonged features\n00130|     const niceCoreCriteria = activityToleranceScore >= 2 && (delayedOnsetScore >= 2 || disproportionateScore >= 2 || prolongedRecoveryScore >= 2)\n00131| \n00132|     let severity = t.pem.results.severityLevels.none\n00133|     let color = 'bg-green-100 text-green-800'\n00134|     \n00135|     if (niceCoreCriteria && percentage >= 70) {\n00136|       severity = t.pem.results.severityLevels.severe\n00137|       color = 'bg-red-100 text-red-800'\n00138|     } else if (niceCoreCriteria && percentage >= 50) {\n00139|       severity = t.pem.results.severityLevels.moderate\n00140|       color = 'bg-orange-100 text-orange-800'\n00141|     } else if (niceCoreCriteria) {\n00142|       severity = t.pem.results.severityLevels.mild\n00143|       color = 'bg-yellow-100 text-yellow-800'\n00144|     }\n00145| \n00146|     const isPEMPresent = niceCoreCriteria\n00147| \n00148|     return {\n00149|       totalScore,\n00150|       maxScore,\n00151|       percentage: Math.round(percentage),\n00152|       severity,\n00153|       color,\n00154|       isPEMPresent,\n00155|       niceCoreCriteria,\n00156|       activityToleranceScore,\n00157|       delayedOnsetScore,\n00158|       disproportionateScore,\n00159|       prolongedRecoveryScore\n00160|     }\n00161|   }\n00162| \n00163|   const pemQuestions = getPEMQuestions()\n00164|   const progress = ((currentQuestion + 1) / pemQuestions.length) * 100\n00165|   const current = pemQuestions[currentQuestion]\n00166|   const currentAnswer = answers[current?.id]\n00167| \n00168|   if (isComplete) {\n00169|     const pemScore = calculatePEMScore()\n00170|     \n00171|     return (\n00172|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00173|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00174|           <Card>\n00175|             <CardHeader className=\"text-center\">\n00176|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00177|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00178|                 {t.pem.results.complete}\n00179|               </CardTitle>\n00180|               <CardDescription>\n00181|                 {t.pem.results.description}\n00182|               </CardDescription>\n00183|             </CardHeader>\n00184|             <CardContent className=\"space-y-6\">\n00185|               <div className=\"text-center\">\n00186|                 <Badge className={`px-4 py-2 text-lg ${pemScore.color}`}>\n00187|                   {pemScore.severity}\n00188|                 </Badge>\n00189|                 <p className=\"text-sm text-gray-600 mt-2\">\n00190|                   Score: {pemScore.totalScore}/{pemScore.maxScore} ({pemScore.percentage}%)\n00191|                 </p>\n00192|               </div>\n00193| \n00194|               <div className=\"grid md:grid-cols-2 gap-6\">\n00195|                 <div className=\"space-y-4\">\n00196|                   <h3 className=\"font-semibold text-lg\">{t.common.results}</h3>\n00197|                   \n00198|                   <div className=\"bg-gray-50 p-4 rounded-lg space-y-3\">\n00199|                     {pemQuestions.map((question) => {\n00200|                       const answer = answers[question.id]\n00201|                       const option = question.options.find(opt => opt.value === answer)\n00202|                       return (\n00203|                         <div key={question.id} className=\"border-b border-gray-200 pb-2 last:border-b-0\">\n00204|                           <p className=\"text-sm font-medium text-gray-700 mb-1\">\n00205|                             {question.question}\n00206|                           </p>\n00207|                           <div className=\"flex justify-between items-center\">\n00208|                             <span className=\"text-sm text-gray-600\">{option?.label}</span>\n00209|                             <Badge variant=\"outline\" className=\"text-xs\">\n00210|                               {option?.score} pts\n00211|                             </Badge>\n00212|                           </div>\n00213|                         </div>\n00214|                       )\n00215|                     })}\n00216|                   </div>\n00217|                 </div>\n00218| \n00219|                 <div className=\"space-y-4\">\n00220|                   <h3 className=\"font-semibold text-lg\">{t.pem.results.clinicalInterpretation}</h3>\n00221|                   \n00222|                   <div className=\"bg-blue-50 p-4 rounded-lg\">\n00223|                     <h4 className=\"font-semibold mb-2 text-blue-900\">{t.pem.results.status}</h4>\n00224|                     <p className=\"text-blue-800 text-sm mb-2\">\n00225|                       {pemScore.isPEMPresent \n00226|                         ? t.pem.results.present\n00227|                         : t.pem.results.absent\n00228|                       }\n00229|                     </p>\n00230|                     \n00231|                     {pemScore.isPEMPresent && (\n00232|                       <div className=\"text-blue-800 text-sm space-y-1\">\n00233|                         <p>• PEM is a key diagnostic criterion for ME/CFS</p>\n00234|                         <p>• Consider activity pacing and energy management</p>\n00235|                         <p>• Avoid graded exercise therapy (GET)</p>\n00236|                       </div>\n00237|                     )}\n00238|                   </div>\n00239| \n00240|                   <div className=\"bg-yellow-50 p-4 rounded-lg\">\n00241|                     <h4 className=\"font-semibold mb-2 text-yellow-900\">{t.common.recommendations}</h4>\n00242|                     <div className=\"text-yellow-800 text-sm space-y-1\">\n00243|                       {pemScore.severity === t.pem.results.severityLevels.severe && \n00244|                         t.pem.results.recommendations.severe.map((rec, index) => (\n00245|                           <p key={index}>• {rec}</p>\n00246|                         ))\n00247|                       }\n00248|                       {pemScore.severity === t.pem.results.severityLevels.moderate && \n00249|                         t.pem.results.recommendations.moderate.map((rec, index) => (\n00250|                           <p key={index}>• {rec}</p>\n00251|                         ))\n00252|                       }\n00253|                       {pemScore.severity === t.pem.results.severityLevels.mild && \n00254|                         t.pem.results.recommendations.mild.map((rec, index) => (\n00255|                           <p key={index}>• {rec}</p>\n00256|                         ))\n00257|                       }\n00258|                       {pemScore.severity === t.pem.results.severityLevels.none && \n00259|                         t.pem.results.recommendations.none.map((rec, index) => (\n00260|                           <p key={index}>• {rec}</p>\n00261|                         ))\n00262|                       }\n00263|                     </div>\n00264|                   </div>\n00265|                 </div>\n00266|               </div>\n00267| \n00268|               <Alert>\n00269|                 <Activity className=\"h-4 w-4\" />\n00270|                 <AlertDescription>\n00271|                     {t.pem.results.important}\n00272|                 </AlertDescription>\n00273|               </Alert>\n00274| \n00275|               <div className=\"flex gap-4 justify-center\">\n00276|                 <Button onClick={() => {\n00277|                   setAnswers({})\n00278|                   setCurrentQuestion(0)\n00279|                   setIsComplete(false)\n00280|                 }} variant=\"outline\">\n00281|                   {t.pem.results.retake}\n00282|                 </Button>\n00283|                 <Button asChild>\n00284|                   <Link href=\"/criteria-engine\">\n00285|                       {t.common.continue} to Criteria Engine\n00286|                   </Link>\n00287|                 </Button>\n00288|               </div>\n00289|             </CardContent>\n00290|           </Card>\n00291|         </div>\n00292|       </div>\n00293|     )\n00294|   }\n00295| \n00296|   return (\n00297|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00298|       <div className=\"container mx-auto px-4 max-w-3xl\">\n00299|         <div className=\"mb-6\">\n00300|           <div className=\"flex items-center gap-4 mb-4\">\n00301|             <Activity className=\"h-5 w-5 text-orange-600\" />\n00302|             <div>\n00303|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.pem.title}</h1>\n00304|               <p className=\"text-gray-600\">{t.pem.description}</p>\n00305|             </div>\n00306|           </div>\n00307|           \n00308|           <Progress value={progress} className=\"h-2\" />\n00309|           <p className=\"text-sm text-gray-600 mt-2\">\n00310|             {t.common.question} {currentQuestion + 1} {t.common.of} {pemQuestions.length}\n00311|           </p>\n00312|         </div>\n00313| \n00314|         <Card>\n00315|           <CardHeader>\n00316|             <CardTitle className=\"text-lg\">\n00317|               {current.question}\n00318|             </CardTitle>\n00319|             {current.description && (\n00320|               <CardDescription>\n00321|                 {current.description}\n00322|               </CardDescription>\n00323|             )}\n00324|           </CardHeader>\n00325|           <CardContent>\n00326|             <div className=\"space-y-6\">\n00327|               <RadioGroup \n00328|                 value={currentAnswer || ''} \n00329|                 onValueChange={(value) => handleAnswer(current.id, value)}\n00330|                 className=\"space-y-3\"\n00331|               >\n00332|                 {current.options.map((option) => (\n00333|                   <div key={option.value} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00334|                     <RadioGroupItem value={option.value} id={option.value} className=\"mt-1\" />\n00335|                     <div className=\"flex-1\">\n00336|                       <Label htmlFor={option.value} className=\"cursor-pointer font-medium\">\n00337|                         {option.label}\n00338|                       </Label>\n00339|                       <div className=\"flex justify-between items-center mt-1\">\n00340|                         <Badge variant=\"outline\" className=\"text-xs\">\n00341|                           {option.score} {option.score === 1 ? 'point' : 'points'}\n00342|                         </Badge>\n00343|                       </div>\n00344|                     </div>\n00345|                   </div>\n00346|                 ))}\n00347|               </RadioGroup>\n00348| \n00349|               <div className=\"flex justify-between pt-6\">\n00350|                 <Button \n00351|                   onClick={prevQuestion} \n00352|                   disabled={currentQuestion === 0}\n00353|                   variant=\"outline\"\n00354|                   className=\"flex items-center gap-2\"\n00355|                 >\n00356|                   <ArrowLeft className=\"h-4 w-4\" />\n00357|                   {t.common.previous}\n00358|                 </Button>\n00359|                 \n00360|                 <Button \n00361|                   onClick={nextQuestion}\n00362|                   disabled={!currentAnswer}\n00363|                   className=\"flex items-center gap-2\"\n00364|                 >\n00365|                   {currentQuestion === pemQuestions.length - 1 ? t.common.complete + ' Assessment' : t.common.next + ' Question'}\n00366|                   <ArrowRight className=\"h-4 w-4\" />\n00367|                 </Button>\n00368|               </div>\n00369|             </div>\n00370|           </CardContent>\n00371|         </Card>\n00372| \n00373|         <div className=\"mt-6\">\n00374|           <Card className=\"border-orange-200 bg-orange-50\">\n00375|             <CardContent className=\"pt-4\">\n00376|               <div className=\"flex items-start gap-3\">\n00377|                 <TrendingDown className=\"h-5 w-5 text-orange-600 mt-1\" />\n00378|                 <div className=\"text-sm text-orange-800\">\n00379|                   <h4 className=\"font-semibold mb-1\">{t.pem.about.title}</h4>\n00380|                   <p>\n00381|                     {t.pem.about.description}\n00382|                   </p>\n00383|                 </div>\n00384|               </div>\n00385|             </CardContent>\n00386|           </Card>\n00387|         </div>\n00388|       </div>\n00389|     </div>\n00390|   )\n00391| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { Label } from '@/components/ui/label'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { ArrowLeft, ArrowRight, Activity, Clock, TrendingDown, CheckCircle } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface PEMQuestion {\n  id: string\n  question: string\n  description?: string\n  options: { value: string; label: string; score: number }[]\n}"
    },
    "title": "app/pem-quest/page.tsx",
    "time": {
      "start": 1758539263721,
      "end": 1758539263725
    }
  }
}