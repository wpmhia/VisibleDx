{
  "id": "prt_9711cb947001K2t07utitwqLPW",
  "messageID": "msg_9711b80a5001bVZPJ0r9XNFluA",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "edit",
  "callID": "toolu_01P1o2MomTNfAyuwayiL4449",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/case-analyzer/page.tsx",
      "oldString": "export default function CaseAnalyzer() {\n  const [caseText, setCaseText] = useState('')\n  const [isAnalyzing, setIsAnalyzing] = useState(false)\n  const [analysisResult, setAnalysisResult] = useState<CaseAnalysisResult | null>(null)\n  const { t } = useTranslation()\n\n  const analyzeCaseText = (text: string): CaseAnalysisResult => {\n    const lowerText = text.toLowerCase()\n    \n    // Check core criteria\n    const criteriaAssessment = {\n      debilitatingFatigue: CLINICAL_PATTERNS.debilitatingFatigue.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      postExertionalMalaise: CLINICAL_PATTERNS.postExertionalMalaise.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      unrefreshingSleep: CLINICAL_PATTERNS.unrefreshingSleep.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      cognitiveDifficulties: CLINICAL_PATTERNS.cognitiveDifficulties.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      duration: CLINICAL_PATTERNS.duration.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      )\n    }\n\n    // Calculate core symptom score\n    const coreSymptoms = Object.values(criteriaAssessment).filter(Boolean).length\n    \n    // Check for red flags\n    const redFlags = CLINICAL_PATTERNS.redFlags.filter(flag => \n      lowerText.includes(flag.toLowerCase())\n    )\n\n    // Assess PEM\n    const pemEvidence = CLINICAL_PATTERNS.postExertionalMalaise.filter(pattern => \n      lowerText.includes(pattern.toLowerCase())\n    )\n    \n    const pemIndicators = {\n      present: pemEvidence.length > 0,\n      severity: pemEvidence.length >= 3 ? 'severe' : \n               pemEvidence.length >= 2 ? 'moderate' : \n               pemEvidence.length >= 1 ? 'mild' : 'none' as 'none' | 'mild' | 'moderate' | 'severe',\n      evidence: pemEvidence\n    }\n\n    // Calculate overall score (0-100)\n    let score = 0\n    score += coreSymptoms * 15 // Core symptoms worth 15 points each\n    score += criteriaAssessment.duration ? 20 : 0 // Duration worth 20 points\n    score += pemIndicators.present ? 10 : 0 // PEM bonus\n    \n    // Penalty for red flags\n    score -= redFlags.length * 10\n\n    // Ensure score is between 0-100\n    score = Math.max(0, Math.min(100, score))\n\n    // Determine likelihood\n    let mecfsLikelihood: 'very-high' | 'high' | 'moderate' | 'low' | 'very-low'\n    if (score >= 80) mecfsLikelihood = 'very-high'\n    else if (score >= 65) mecfsLikelihood = 'high'\n    else if (score >= 40) mecfsLikelihood = 'moderate'\n    else if (score >= 20) mecfsLikelihood = 'low'\n    else mecfsLikelihood = 'very-low'\n\n    // Generate findings\n    const keyFindings: string[] = []\n    if (criteriaAssessment.debilitatingFatigue) keyFindings.push('Debilitating fatigue documented')\n    if (criteriaAssessment.postExertionalMalaise) keyFindings.push('Post-exertional malaise present')\n    if (criteriaAssessment.unrefreshingSleep) keyFindings.push('Unrefreshing sleep reported')\n    if (criteriaAssessment.cognitiveDifficulties) keyFindings.push('Cognitive difficulties noted')\n    if (criteriaAssessment.duration) keyFindings.push('Chronic duration (≥3 months)')\n\n    // Generate recommendations\n    const recommendations: string[] = []\n    if (score >= 60) {\n      recommendations.push('Strong consideration for ME/CFS diagnosis')\n      recommendations.push('Complete NICE NG206 required investigations')\n      recommendations.push('Consider referral to ME/CFS specialist service')\n    } else if (score >= 30) {\n      recommendations.push('Possible ME/CFS - requires further assessment')\n      recommendations.push('Consider 3-month follow-up if symptoms persist')\n    } else {\n      recommendations.push('Low probability of ME/CFS')\n      recommendations.push('Consider alternative diagnoses')\n    }\n\n    if (redFlags.length > 0) {\n      recommendations.unshift('RED FLAGS PRESENT - Urgent evaluation required')\n    }\n\n    // Differential diagnoses to consider\n    const differentialDiagnoses = [\n      'Thyroid dysfunction',\n      'Sleep disorders',\n      'Depression/anxiety',\n      'Autoimmune conditions',\n      'Chronic infections',\n      'Fibromyalgia'\n    ]\n\n    return {\n      overallScore: score,\n      mecfsLikelihood,\n      criteriaAssessment,\n      redFlags,\n      pemIndicators,\n      differentialDiagnoses,\n      recommendations,\n      keyFindings\n    }\n  }",
      "newString": "export default function CaseAnalyzer() {\n  const [caseText, setCaseText] = useState('')\n  const [isAnalyzing, setIsAnalyzing] = useState(false)\n  const [analysisResult, setAnalysisResult] = useState<CaseAnalysisResult | null>(null)\n  const { t } = useTranslation()\n\n  const analyzeCaseText = (text: string): CaseAnalysisResult => {\n    const lowerText = text.toLowerCase()\n    const frameworks: DiagnosticFramework[] = []\n    \n    // ME/CFS Analysis (NICE NG206)\n    const mecfsCriteria = {\n      debilitatingFatigue: CLINICAL_PATTERNS.mecfs.debilitatingFatigue.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      postExertionalMalaise: CLINICAL_PATTERNS.mecfs.postExertionalMalaise.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      unrefreshingSleep: CLINICAL_PATTERNS.mecfs.unrefreshingSleep.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      cognitiveDifficulties: CLINICAL_PATTERNS.mecfs.cognitiveDifficulties.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      duration: CLINICAL_PATTERNS.mecfs.duration.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      )\n    }\n    \n    const mecfsCoreSymptoms = Object.values(mecfsCriteria).filter(Boolean).length\n    let mecfsScore = mecfsCoreSymptoms * 20 // Each criterion worth 20 points\n    const mecfsLikelihood = mecfsScore >= 80 ? 'very-high' : \n                           mecfsScore >= 60 ? 'high' : \n                           mecfsScore >= 40 ? 'moderate' : \n                           mecfsScore >= 20 ? 'low' : 'very-low'\n    \n    const mecfsFindings: string[] = []\n    if (mecfsCriteria.debilitatingFatigue) mecfsFindings.push('Debilitating fatigue present')\n    if (mecfsCriteria.postExertionalMalaise) mecfsFindings.push('Post-exertional malaise documented')\n    if (mecfsCriteria.unrefreshingSleep) mecfsFindings.push('Unrefreshing sleep reported')\n    if (mecfsCriteria.cognitiveDifficulties) mecfsFindings.push('Cognitive difficulties noted')\n    if (mecfsCriteria.duration) mecfsFindings.push('Chronic duration (≥3 months)')\n\n    frameworks.push({\n      id: 'mecfs',\n      name: 'ME/CFS (NICE NG206)',\n      icon: Brain,\n      likelihood: mecfsLikelihood,\n      score: mecfsScore,\n      criteriaAssessment: mecfsCriteria,\n      keyFindings: mecfsFindings,\n      recommendations: mecfsScore >= 60 ? [\n        'Strong consideration for ME/CFS diagnosis',\n        'Complete NICE NG206 investigations',\n        'Consider specialist referral'\n      ] : ['Possible ME/CFS - requires further assessment'],\n      icdCode: 'G93.3',\n      confidence: mecfsCoreSymptoms >= 4 ? 'high' : mecfsCoreSymptoms >= 3 ? 'medium' : 'low'\n    })\n\n    // POTS Analysis\n    const potsCriteria = {\n      heartRateIncrease: CLINICAL_PATTERNS.pots.heartRateIncrease.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      orthostatic: CLINICAL_PATTERNS.pots.orthostatic.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      symptoms: CLINICAL_PATTERNS.pots.symptoms.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      duration: CLINICAL_PATTERNS.pots.duration.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      )\n    }\n    \n    const potsCoreSymptoms = Object.values(potsCriteria).filter(Boolean).length\n    let potsScore = potsCoreSymptoms * 25 // Each criterion worth 25 points\n    const potsLikelihood = potsScore >= 75 ? 'very-high' : \n                          potsScore >= 50 ? 'high' : \n                          potsScore >= 25 ? 'moderate' : 'low'\n    \n    const potsFindings: string[] = []\n    if (potsCriteria.heartRateIncrease) potsFindings.push('Heart rate increase on standing')\n    if (potsCriteria.orthostatic) potsFindings.push('Orthostatic symptoms present')\n    if (potsCriteria.symptoms) potsFindings.push('Associated POTS symptoms')\n    if (potsCriteria.duration) potsFindings.push('Chronic symptoms')\n\n    frameworks.push({\n      id: 'pots',\n      name: 'POTS',\n      icon: Heart,\n      likelihood: potsLikelihood,\n      score: potsScore,\n      criteriaAssessment: potsCriteria,\n      keyFindings: potsFindings,\n      recommendations: potsScore >= 50 ? [\n        'Consider POTS diagnosis',\n        'Perform stand test or tilt table',\n        'Consider POTS subtyping'\n      ] : ['Consider orthostatic intolerance assessment'],\n      icdCode: 'G90.1',\n      confidence: potsCoreSymptoms >= 3 ? 'high' : potsCoreSymptoms >= 2 ? 'medium' : 'low'\n    })\n\n    // Long COVID Analysis\n    const longCovidCriteria = {\n      covidHistory: CLINICAL_PATTERNS.longCovid.covidHistory.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      duration: CLINICAL_PATTERNS.longCovid.duration.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      multisystem: CLINICAL_PATTERNS.longCovid.multisystem.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      )\n    }\n    \n    const longCovidSymptoms = Object.values(longCovidCriteria).filter(Boolean).length\n    let longCovidScore = longCovidSymptoms * 33 // Each criterion worth 33 points\n    const longCovidLikelihood = longCovidScore >= 66 ? 'high' : \n                               longCovidScore >= 33 ? 'moderate' : 'low'\n    \n    const longCovidFindings: string[] = []\n    if (longCovidCriteria.covidHistory) longCovidFindings.push('COVID-19 infection history')\n    if (longCovidCriteria.duration) longCovidFindings.push('Persistent symptoms post-COVID')\n    if (longCovidCriteria.multisystem) longCovidFindings.push('Multi-system involvement')\n\n    frameworks.push({\n      id: 'longcovid',\n      name: 'Long COVID',\n      icon: Virus,\n      likelihood: longCovidLikelihood,\n      score: longCovidScore,\n      criteriaAssessment: longCovidCriteria,\n      keyFindings: longCovidFindings,\n      recommendations: longCovidScore >= 33 ? [\n        'Consider Long COVID diagnosis',\n        'Multidisciplinary assessment',\n        'Symptom-based management'\n      ] : ['Monitor for post-COVID symptoms'],\n      icdCode: 'U09.9',\n      confidence: longCovidSymptoms >= 2 ? 'high' : 'low'\n    })\n\n    // POTS Subtype Analysis\n    const subtypeScores = {\n      hypovolemic: CLINICAL_PATTERNS.hypovolemic.filter(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ).length,\n      hyperadrenergic: CLINICAL_PATTERNS.hyperadrenergic.filter(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ).length,\n      neuropathic: CLINICAL_PATTERNS.neuropathic.filter(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ).length,\n      autoimmune: CLINICAL_PATTERNS.autoimmune.filter(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ).length\n    }\n\n    // Add subtype frameworks if POTS is suspected\n    if (potsScore >= 25) {\n      Object.entries(subtypeScores).forEach(([subtype, score]) => {\n        if (score > 0) {\n          const subtypeScore = (score / 3) * 100 // Normalize to 100\n          const subtypeLikelihood = subtypeScore >= 66 ? 'high' : \n                                   subtypeScore >= 33 ? 'moderate' : 'low'\n          \n          frameworks.push({\n            id: `pots_${subtype}`,\n            name: `POTS - ${subtype.charAt(0).toUpperCase() + subtype.slice(1)}`,\n            icon: subtype === 'hypovolemic' ? Droplets : \n                  subtype === 'hyperadrenergic' ? Activity :\n                  subtype === 'neuropathic' ? Brain : Shield,\n            likelihood: subtypeLikelihood,\n            score: subtypeScore,\n            criteriaAssessment: { [subtype]: score > 0 },\n            keyFindings: [`${subtype} POTS features present`],\n            recommendations: [`Consider ${subtype} POTS subtype treatment`],\n            icdCode: 'G90.1',\n            confidence: score >= 2 ? 'high' : 'medium'\n          })\n        }\n      })\n    }\n\n    // Check for red flags\n    const redFlags = CLINICAL_PATTERNS.redFlags.filter(flag => \n      lowerText.includes(flag.toLowerCase())\n    )\n\n    // Sort frameworks by likelihood and score\n    frameworks.sort((a, b) => {\n      const likelihoodOrder = { 'very-high': 5, 'high': 4, 'moderate': 3, 'low': 2, 'very-low': 1 }\n      return likelihoodOrder[b.likelihood] - likelihoodOrder[a.likelihood] || b.score - a.score\n    })\n\n    // Determine primary and secondary diagnoses\n    const primaryFramework = frameworks.find(f => f.likelihood === 'very-high' || f.likelihood === 'high')\n    const primaryDiagnosis = primaryFramework ? primaryFramework.name : null\n    const secondaryDiagnoses = frameworks\n      .filter(f => f !== primaryFramework && (f.likelihood === 'moderate' || f.likelihood === 'high'))\n      .map(f => f.name)\n\n    // Generate overall key findings\n    const keyFindings = frameworks\n      .filter(f => f.likelihood !== 'very-low' && f.likelihood !== 'low')\n      .flatMap(f => f.keyFindings)\n\n    // Generate overall recommendations\n    const overallRecommendations: string[] = []\n    if (redFlags.length > 0) {\n      overallRecommendations.push('🚨 RED FLAGS PRESENT - Urgent evaluation required')\n    }\n    \n    if (primaryDiagnosis) {\n      overallRecommendations.push(`Primary consideration: ${primaryDiagnosis}`)\n    }\n    \n    if (secondaryDiagnoses.length > 0) {\n      overallRecommendations.push(`Also consider: ${secondaryDiagnoses.join(', ')}`)\n    }\n\n    overallRecommendations.push('Complete targeted diagnostic workup')\n    overallRecommendations.push('Consider specialist referral if indicated')\n\n    return {\n      frameworks,\n      redFlags,\n      keyFindings,\n      overallRecommendations,\n      primaryDiagnosis,\n      secondaryDiagnoses\n    }\n  }"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "diff": "Index: /home/user/project/app/case-analyzer/page.tsx\n===================================================================\n--- /home/user/project/app/case-analyzer/page.tsx\n+++ /home/user/project/app/case-analyzer/page.tsx\n@@ -146,114 +146,234 @@\n const { t } = useTranslation()\n \n const analyzeCaseText = (text: string): CaseAnalysisResult => {\n   const lowerText = text.toLowerCase()\n+  const frameworks: DiagnosticFramework[] = []\n   \n-  // Check core criteria\n-  const criteriaAssessment = {\n-    debilitatingFatigue: CLINICAL_PATTERNS.debilitatingFatigue.some(pattern => \n+  // ME/CFS Analysis (NICE NG206)\n+  const mecfsCriteria = {\n+    debilitatingFatigue: CLINICAL_PATTERNS.mecfs.debilitatingFatigue.some(pattern => \n       lowerText.includes(pattern.toLowerCase())\n     ),\n-    postExertionalMalaise: CLINICAL_PATTERNS.postExertionalMalaise.some(pattern => \n+    postExertionalMalaise: CLINICAL_PATTERNS.mecfs.postExertionalMalaise.some(pattern => \n       lowerText.includes(pattern.toLowerCase())\n     ),\n-    unrefreshingSleep: CLINICAL_PATTERNS.unrefreshingSleep.some(pattern => \n+    unrefreshingSleep: CLINICAL_PATTERNS.mecfs.unrefreshingSleep.some(pattern => \n       lowerText.includes(pattern.toLowerCase())\n     ),\n-    cognitiveDifficulties: CLINICAL_PATTERNS.cognitiveDifficulties.some(pattern => \n+    cognitiveDifficulties: CLINICAL_PATTERNS.mecfs.cognitiveDifficulties.some(pattern => \n       lowerText.includes(pattern.toLowerCase())\n     ),\n-    duration: CLINICAL_PATTERNS.duration.some(pattern => \n+    duration: CLINICAL_PATTERNS.mecfs.duration.some(pattern => \n       lowerText.includes(pattern.toLowerCase())\n     )\n   }\n+  \n+  const mecfsCoreSymptoms = Object.values(mecfsCriteria).filter(Boolean).length\n+  let mecfsScore = mecfsCoreSymptoms * 20 // Each criterion worth 20 points\n+  const mecfsLikelihood = mecfsScore >= 80 ? 'very-high' : \n+                         mecfsScore >= 60 ? 'high' : \n+                         mecfsScore >= 40 ? 'moderate' : \n+                         mecfsScore >= 20 ? 'low' : 'very-low'\n+  \n+  const mecfsFindings: string[] = []\n+  if (mecfsCriteria.debilitatingFatigue) mecfsFindings.push('Debilitating fatigue present')\n+  if (mecfsCriteria.postExertionalMalaise) mecfsFindings.push('Post-exertional malaise documented')\n+  if (mecfsCriteria.unrefreshingSleep) mecfsFindings.push('Unrefreshing sleep reported')\n+  if (mecfsCriteria.cognitiveDifficulties) mecfsFindings.push('Cognitive difficulties noted')\n+  if (mecfsCriteria.duration) mecfsFindings.push('Chronic duration (≥3 months)')\n \n-  // Calculate core symptom score\n-  const coreSymptoms = Object.values(criteriaAssessment).filter(Boolean).length\n+  frameworks.push({\n+    id: 'mecfs',\n+    name: 'ME/CFS (NICE NG206)',\n+    icon: Brain,\n+    likelihood: mecfsLikelihood,\n+    score: mecfsScore,\n+    criteriaAssessment: mecfsCriteria,\n+    keyFindings: mecfsFindings,\n+    recommendations: mecfsScore >= 60 ? [\n+      'Strong consideration for ME/CFS diagnosis',\n+      'Complete NICE NG206 investigations',\n+      'Consider specialist referral'\n+    ] : ['Possible ME/CFS - requires further assessment'],\n+    icdCode: 'G93.3',\n+    confidence: mecfsCoreSymptoms >= 4 ? 'high' : mecfsCoreSymptoms >= 3 ? 'medium' : 'low'\n+  })\n+\n+  // POTS Analysis\n+  const potsCriteria = {\n+    heartRateIncrease: CLINICAL_PATTERNS.pots.heartRateIncrease.some(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    ),\n+    orthostatic: CLINICAL_PATTERNS.pots.orthostatic.some(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    ),\n+    symptoms: CLINICAL_PATTERNS.pots.symptoms.some(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    ),\n+    duration: CLINICAL_PATTERNS.pots.duration.some(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    )\n+  }\n   \n-  // Check for red flags\n-  const redFlags = CLINICAL_PATTERNS.redFlags.filter(flag => \n-    lowerText.includes(flag.toLowerCase())\n-  )\n+  const potsCoreSymptoms = Object.values(potsCriteria).filter(Boolean).length\n+  let potsScore = potsCoreSymptoms * 25 // Each criterion worth 25 points\n+  const potsLikelihood = potsScore >= 75 ? 'very-high' : \n+                        potsScore >= 50 ? 'high' : \n+                        potsScore >= 25 ? 'moderate' : 'low'\n+  \n+  const potsFindings: string[] = []\n+  if (potsCriteria.heartRateIncrease) potsFindings.push('Heart rate increase on standing')\n+  if (potsCriteria.orthostatic) potsFindings.push('Orthostatic symptoms present')\n+  if (potsCriteria.symptoms) potsFindings.push('Associated POTS symptoms')\n+  if (potsCriteria.duration) potsFindings.push('Chronic symptoms')\n \n-  // Assess PEM\n-  const pemEvidence = CLINICAL_PATTERNS.postExertionalMalaise.filter(pattern => \n-    lowerText.includes(pattern.toLowerCase())\n-  )\n+  frameworks.push({\n+    id: 'pots',\n+    name: 'POTS',\n+    icon: Heart,\n+    likelihood: potsLikelihood,\n+    score: potsScore,\n+    criteriaAssessment: potsCriteria,\n+    keyFindings: potsFindings,\n+    recommendations: potsScore >= 50 ? [\n+      'Consider POTS diagnosis',\n+      'Perform stand test or tilt table',\n+      'Consider POTS subtyping'\n+    ] : ['Consider orthostatic intolerance assessment'],\n+    icdCode: 'G90.1',\n+    confidence: potsCoreSymptoms >= 3 ? 'high' : potsCoreSymptoms >= 2 ? 'medium' : 'low'\n+  })\n+\n+  // Long COVID Analysis\n+  const longCovidCriteria = {\n+    covidHistory: CLINICAL_PATTERNS.longCovid.covidHistory.some(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    ),\n+    duration: CLINICAL_PATTERNS.longCovid.duration.some(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    ),\n+    multisystem: CLINICAL_PATTERNS.longCovid.multisystem.some(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    )\n+  }\n   \n-  const pemIndicators = {\n-    present: pemEvidence.length > 0,\n-    severity: pemEvidence.length >= 3 ? 'severe' : \n-             pemEvidence.length >= 2 ? 'moderate' : \n-             pemEvidence.length >= 1 ? 'mild' : 'none' as 'none' | 'mild' | 'moderate' | 'severe',\n-    evidence: pemEvidence\n+  const longCovidSymptoms = Object.values(longCovidCriteria).filter(Boolean).length\n+  let longCovidScore = longCovidSymptoms * 33 // Each criterion worth 33 points\n+  const longCovidLikelihood = longCovidScore >= 66 ? 'high' : \n+                             longCovidScore >= 33 ? 'moderate' : 'low'\n+  \n+  const longCovidFindings: string[] = []\n+  if (longCovidCriteria.covidHistory) longCovidFindings.push('COVID-19 infection history')\n+  if (longCovidCriteria.duration) longCovidFindings.push('Persistent symptoms post-COVID')\n+  if (longCovidCriteria.multisystem) longCovidFindings.push('Multi-system involvement')\n+\n+  frameworks.push({\n+    id: 'longcovid',\n+    name: 'Long COVID',\n+    icon: Virus,\n+    likelihood: longCovidLikelihood,\n+    score: longCovidScore,\n+    criteriaAssessment: longCovidCriteria,\n+    keyFindings: longCovidFindings,\n+    recommendations: longCovidScore >= 33 ? [\n+      'Consider Long COVID diagnosis',\n+      'Multidisciplinary assessment',\n+      'Symptom-based management'\n+    ] : ['Monitor for post-COVID symptoms'],\n+    icdCode: 'U09.9',\n+    confidence: longCovidSymptoms >= 2 ? 'high' : 'low'\n+  })\n+\n+  // POTS Subtype Analysis\n+  const subtypeScores = {\n+    hypovolemic: CLINICAL_PATTERNS.hypovolemic.filter(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    ).length,\n+    hyperadrenergic: CLINICAL_PATTERNS.hyperadrenergic.filter(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    ).length,\n+    neuropathic: CLINICAL_PATTERNS.neuropathic.filter(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    ).length,\n+    autoimmune: CLINICAL_PATTERNS.autoimmune.filter(pattern => \n+      lowerText.includes(pattern.toLowerCase())\n+    ).length\n   }\n \n-  // Calculate overall score (0-100)\n-  let score = 0\n-  score += coreSymptoms * 15 // Core symptoms worth 15 points each\n-  score += criteriaAssessment.duration ? 20 : 0 // Duration worth 20 points\n-  score += pemIndicators.present ? 10 : 0 // PEM bonus\n-  \n-  // Penalty for red flags\n-  score -= redFlags.length * 10\n+  // Add subtype frameworks if POTS is suspected\n+  if (potsScore >= 25) {\n+    Object.entries(subtypeScores).forEach(([subtype, score]) => {\n+      if (score > 0) {\n+        const subtypeScore = (score / 3) * 100 // Normalize to 100\n+        const subtypeLikelihood = subtypeScore >= 66 ? 'high' : \n+                                 subtypeScore >= 33 ? 'moderate' : 'low'\n+        \n+        frameworks.push({\n+          id: `pots_${subtype}`,\n+          name: `POTS - ${subtype.charAt(0).toUpperCase() + subtype.slice(1)}`,\n+          icon: subtype === 'hypovolemic' ? Droplets : \n+                subtype === 'hyperadrenergic' ? Activity :\n+                subtype === 'neuropathic' ? Brain : Shield,\n+          likelihood: subtypeLikelihood,\n+          score: subtypeScore,\n+          criteriaAssessment: { [subtype]: score > 0 },\n+          keyFindings: [`${subtype} POTS features present`],\n+          recommendations: [`Consider ${subtype} POTS subtype treatment`],\n+          icdCode: 'G90.1',\n+          confidence: score >= 2 ? 'high' : 'medium'\n+        })\n+      }\n+    })\n+  }\n \n-  // Ensure score is between 0-100\n-  score = Math.max(0, Math.min(100, score))\n+  // Check for red flags\n+  const redFlags = CLINICAL_PATTERNS.redFlags.filter(flag => \n+    lowerText.includes(flag.toLowerCase())\n+  )\n \n-  // Determine likelihood\n-  let mecfsLikelihood: 'very-high' | 'high' | 'moderate' | 'low' | 'very-low'\n-  if (score >= 80) mecfsLikelihood = 'very-high'\n-  else if (score >= 65) mecfsLikelihood = 'high'\n-  else if (score >= 40) mecfsLikelihood = 'moderate'\n-  else if (score >= 20) mecfsLikelihood = 'low'\n-  else mecfsLikelihood = 'very-low'\n+  // Sort frameworks by likelihood and score\n+  frameworks.sort((a, b) => {\n+    const likelihoodOrder = { 'very-high': 5, 'high': 4, 'moderate': 3, 'low': 2, 'very-low': 1 }\n+    return likelihoodOrder[b.likelihood] - likelihoodOrder[a.likelihood] || b.score - a.score\n+  })\n \n-  // Generate findings\n-  const keyFindings: string[] = []\n-  if (criteriaAssessment.debilitatingFatigue) keyFindings.push('Debilitating fatigue documented')\n-  if (criteriaAssessment.postExertionalMalaise) keyFindings.push('Post-exertional malaise present')\n-  if (criteriaAssessment.unrefreshingSleep) keyFindings.push('Unrefreshing sleep reported')\n-  if (criteriaAssessment.cognitiveDifficulties) keyFindings.push('Cognitive difficulties noted')\n-  if (criteriaAssessment.duration) keyFindings.push('Chronic duration (≥3 months)')\n+  // Determine primary and secondary diagnoses\n+  const primaryFramework = frameworks.find(f => f.likelihood === 'very-high' || f.likelihood === 'high')\n+  const primaryDiagnosis = primaryFramework ? primaryFramework.name : null\n+  const secondaryDiagnoses = frameworks\n+    .filter(f => f !== primaryFramework && (f.likelihood === 'moderate' || f.likelihood === 'high'))\n+    .map(f => f.name)\n \n-  // Generate recommendations\n-  const recommendations: string[] = []\n-  if (score >= 60) {\n-    recommendations.push('Strong consideration for ME/CFS diagnosis')\n-    recommendations.push('Complete NICE NG206 required investigations')\n-    recommendations.push('Consider referral to ME/CFS specialist service')\n-  } else if (score >= 30) {\n-    recommendations.push('Possible ME/CFS - requires further assessment')\n-    recommendations.push('Consider 3-month follow-up if symptoms persist')\n-  } else {\n-    recommendations.push('Low probability of ME/CFS')\n-    recommendations.push('Consider alternative diagnoses')\n-  }\n+  // Generate overall key findings\n+  const keyFindings = frameworks\n+    .filter(f => f.likelihood !== 'very-low' && f.likelihood !== 'low')\n+    .flatMap(f => f.keyFindings)\n \n+  // Generate overall recommendations\n+  const overallRecommendations: string[] = []\n   if (redFlags.length > 0) {\n-    recommendations.unshift('RED FLAGS PRESENT - Urgent evaluation required')\n+    overallRecommendations.push('🚨 RED FLAGS PRESENT - Urgent evaluation required')\n   }\n+  \n+  if (primaryDiagnosis) {\n+    overallRecommendations.push(`Primary consideration: ${primaryDiagnosis}`)\n+  }\n+  \n+  if (secondaryDiagnoses.length > 0) {\n+    overallRecommendations.push(`Also consider: ${secondaryDiagnoses.join(', ')}`)\n+  }\n \n-  // Differential diagnoses to consider\n-  const differentialDiagnoses = [\n-    'Thyroid dysfunction',\n-    'Sleep disorders',\n-    'Depression/anxiety',\n-    'Autoimmune conditions',\n-    'Chronic infections',\n-    'Fibromyalgia'\n-  ]\n+  overallRecommendations.push('Complete targeted diagnostic workup')\n+  overallRecommendations.push('Consider specialist referral if indicated')\n \n   return {\n-    overallScore: score,\n-    mecfsLikelihood,\n-    criteriaAssessment,\n+    frameworks,\n     redFlags,\n-    pemIndicators,\n-    differentialDiagnoses,\n-    recommendations,\n-    keyFindings\n+    keyFindings,\n+    overallRecommendations,\n+    primaryDiagnosis,\n+    secondaryDiagnoses\n   }\n }\n \n const handleAnalyze = async () => {\n"
    },
    "title": "app/case-analyzer/page.tsx",
    "time": {
      "start": 1758539382408,
      "end": 1758539382456
    }
  }
}