{
  "id": "prt_9711ba949001eoUvwU3cINhlOC",
  "messageID": "msg_9711b80a5001bVZPJ0r9XNFluA",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_0117C7LbyL1pRSnLnaPaTykX",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/quick-screen/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Progress } from '@/components/ui/progress'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { CheckCircle, Circle, ArrowLeft, ArrowRight, Clock, AlertTriangle } from 'lucide-react'\n00009| import Link from 'next/link'\n00010| import { useTranslation } from '@/lib/language-context'\n00011| \n00012| const questionCategories = [\n00013|   \"coreFatigue\", \"corePEM\", \"coreSleep\", \"coreCognitive\", \"additional\", \"autonomic\", \n00014|   \"neuromuscular\", \"fluLike\", \"intolerance\", \"sensory\", \"pain\", \"duration\", \n00015|   \"functional\", \"exclusion\", \"history\", \"severity\"\n00016| ]\n00017| \n00018| export default function QuickScreen() {\n00019|   const [answers, setAnswers] = useState<Record<number, boolean>>({})\n00020|   const [currentQuestion, setCurrentQuestion] = useState(0)\n00021|   const [isComplete, setIsComplete] = useState(false)\n00022|   const { t } = useTranslation()\n00023|   \n00024|   const screeningQuestions = t.quickScreen.questions\n00025| \n00026|   const handleAnswer = (questionId: number, answer: boolean) => {\n00027|     setAnswers(prev => ({\n00028|       ...prev,\n00029|       [questionId]: answer\n00030|     }))\n00031|   }\n00032| \n00033|   const nextQuestion = () => {\n00034|     if (currentQuestion < screeningQuestions.length - 1) {\n00035|       setCurrentQuestion(prev => prev + 1)\n00036|     } else {\n00037|       setIsComplete(true)\n00038|     }\n00039|   }\n00040| \n00041|   const prevQuestion = () => {\n00042|     if (currentQuestion > 0) {\n00043|       setCurrentQuestion(prev => prev - 1)\n00044|     }\n00045|   }\n00046| \n00047|   const calculateRisk = () => {\n00048|     const totalYes = Object.values(answers).filter(Boolean).length\n00049|     \n00050|     // NICE NG206 Core Symptoms (all 4 required for suspected ME/CFS)\n00051|     const coreFatigue = answers[1] // Debilitating fatigue\n00052|     const corePEM = answers[2] // Post-exertional malaise\n00053|     const coreSleep = answers[3] // Unrefreshing sleep\n00054|     const coreCognitive = answers[4] // Cognitive difficulties\n00055|     const coreSymptoms = [coreFatigue, corePEM, coreSleep, coreCognitive].filter(Boolean).length\n00056|     \n00057|     // NICE Diagnostic Requirements\n00058|     const durationMet = answers[12] // Duration criteria (6 weeks adults/4 weeks children)\n00059|     const functionalImpairment = answers[13] // Significant reduction in activity\n00060|     const notExplainedOtherwise = answers[14] // Not explained by other condition\n00061|     \n00062|     // Additional symptoms count\n00063|     const additionalSymptoms = [5, 6, 7, 8, 9, 10, 11].filter(id => answers[id]).length\n00064|     \n00065|     // Risk history\n00066|     const infectionHistory = answers[15]\n00067|     const severityLevel = answers[16]\n00068|     \n00069|     let riskLevel = 'Low'\n00070|     let riskColor = 'bg-green-100 text-green-800'\n00071|     \n00072|     // NICE NG206 Suspicion Criteria: All 4 core symptoms + duration + functional impairment + not explained otherwise\n00073|     if (coreSymptoms === 4 && durationMet && functionalImpairment && notExplainedOtherwise) {\n00074|       riskLevel = 'High'\n00075|       riskColor = 'bg-red-100 text-red-800'\n00076|     } else if (coreSymptoms >= 3 && (durationMet || functionalImpairment) && additionalSymptoms >= 2) {\n00077|       riskLevel = 'Medium'\n00078|       riskColor = 'bg-yellow-100 text-yellow-800'\n00079|     }\n00080|     \n00081|     return { \n00082|       riskLevel, \n00083|       riskColor, \n00084|       totalYes, \n00085|       coreSymptoms, \n00086|       coreFatigue,\n00087|       corePEM, \n00088|       coreSleep,\n00089|       coreCognitive,\n00090|       durationMet, \n00091|       functionalImpairment,\n00092|       notExplainedOtherwise,\n00093|       additionalSymptoms,\n00094|       infectionHistory, \n00095|       severityLevel \n00096|     }\n00097|   }\n00098| \n00099|   const progress = ((currentQuestion + 1) / t.quickScreen.questions.length) * 100\n00100|   const currentQuestionData = {\n00101|     id: currentQuestion + 1,\n00102|     question: t.quickScreen.questions[currentQuestion],\n00103|     category: questionCategories[currentQuestion]\n00104|   }\n00105|   const currentAnswer = answers[currentQuestionData?.id]\n00106| \n00107|   if (isComplete) {\n00108|     const risk = calculateRisk()\n00109|     \n00110|     return (\n00111|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00112|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00113|           <Card>\n00114|             <CardHeader className=\"text-center\">\n00115|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00116|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00117|                 {t.quickScreen.results.complete}\n00118|               </CardTitle>\n00119|               <CardDescription>\n00120|                 {t.quickScreen.results.riskAssessment}\n00121|               </CardDescription>\n00122|             </CardHeader>\n00123|             <CardContent className=\"space-y-6\">\n00124|               <div className=\"text-center\">\n00125|                 <Badge className={`px-4 py-2 text-lg ${risk.riskColor}`}>\n00126|                   {risk.riskLevel === 'High' ? t.quickScreen.results.highRisk : \n00127|                    risk.riskLevel === 'Medium' ? t.quickScreen.results.mediumRisk : \n00128|                    t.quickScreen.results.lowRisk}\n00129|                 </Badge>\n00130|               </div>\n00131| \n00132|               <div className=\"grid md:grid-cols-2 gap-4\">\n00133|                 <div className=\"bg-gray-50 p-4 rounded-lg\">\n00134|                   <h4 className=\"font-semibold mb-2\">NICE NG206 Assessment</h4>\n00135|                   <ul className=\"text-sm space-y-1\">\n00136|                     <li><strong>Core Symptoms:</strong> {risk.coreSymptoms}/4 present</li>\n00137|                     <li>• Debilitating Fatigue: {risk.coreFatigue ? t.common.yes : t.common.no}</li>\n00138|                     <li>• Post-Exertional Malaise: {risk.corePEM ? t.common.yes : t.common.no}</li>\n00139|                     <li>• Unrefreshing Sleep: {risk.coreSleep ? t.common.yes : t.common.no}</li>\n00140|                     <li>• Cognitive Difficulties: {risk.coreCognitive ? t.common.yes : t.common.no}</li>\n00141|                     <li><strong>Duration Criteria:</strong> {risk.durationMet ? '✓ Met' : '✗ Not Met'}</li>\n00142|                     <li><strong>Functional Impairment:</strong> {risk.functionalImpairment ? '✓ Present' : '✗ Absent'}</li>\n00143|                     <li><strong>Additional Symptoms:</strong> {risk.additionalSymptoms}/7</li>\n00144|                     <li><strong>Total Responses:</strong> {risk.totalYes}/16</li>\n00145|                   </ul>\n00146|                 </div>\n00147| \n00148|                 <div className=\"bg-blue-50 p-4 rounded-lg\">\n00149|                   <h4 className=\"font-semibold mb-2 text-blue-900\">{t.quickScreen.results.nextSteps}</h4>\n00150|                   <ul className=\"text-sm space-y-1 text-blue-800\">\n00151|                     {risk.riskLevel === 'High' && \n00152|                       t.quickScreen.nextStepsRecommendations.high.map((step, index) => (\n00153|                         <li key={index}>• {step}</li>\n00154|                       ))\n00155|                     }\n00156|                     {risk.riskLevel === 'Medium' && \n00157|                       t.quickScreen.nextStepsRecommendations.medium.map((step, index) => (\n00158|                         <li key={index}>• {step}</li>\n00159|                       ))\n00160|                     }\n00161|                     {risk.riskLevel === 'Low' && \n00162|                       t.quickScreen.nextStepsRecommendations.low.map((step, index) => (\n00163|                         <li key={index}>• {step}</li>\n00164|                       ))\n00165|                     }\n00166|                   </ul>\n00167|                 </div>\n00168|               </div>\n00169| \n00170|               <div className=\"flex gap-4 justify-center\">\n00171|                 <Button onClick={() => {\n00172|                   setAnswers({})\n00173|                   setCurrentQuestion(0)\n00174|                   setIsComplete(false)\n00175|                 }} variant=\"outline\">\n00176|                   {t.quickScreen.results.retake}\n00177|                 </Button>\n00178|                 {risk.riskLevel !== 'Low' && (\n00179|                   <Button asChild>\n00180|                     <Link href=\"/red-flag-checker\">\n00181|                       {t.common.continue} to Red-flag Checker\n00182|                     </Link>\n00183|                   </Button>\n00184|                 )}\n00185|               </div>\n00186|             </CardContent>\n00187|           </Card>\n00188|         </div>\n00189|       </div>\n00190|     )\n00191|   }\n00192| \n00193|   return (\n00194|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00195|       <div className=\"container mx-auto px-4 max-w-2xl\">\n00196|         <div className=\"mb-6\">\n00197|           <div className=\"flex items-center gap-4 mb-4\">\n00198|             <Clock className=\"h-5 w-5 text-gray-600\" />\n00199|             <div>\n00200|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.quickScreen.title}</h1>\n00201|               <p className=\"text-gray-600\">{t.quickScreen.description}</p>\n00202|             </div>\n00203|           </div>\n00204|           \n00205|           <Progress value={progress} className=\"h-2\" />\n00206|             <p className=\"text-sm text-gray-600 mt-2\">\n00207|             {t.common.question} {currentQuestion + 1} {t.common.of} {t.quickScreen.questions.length}\n00208|           </p>\n00209|         </div>\n00210| \n00211|         <Card>\n00212|           <CardHeader>\n00213|             <CardTitle className=\"text-lg\">\n00214|               {currentQuestionData.question}\n00215|             </CardTitle>\n00216|             <CardDescription>\n00217|               Category: {t.quickScreen.categories[currentQuestionData.category as keyof typeof t.quickScreen.categories]}\n00218|             </CardDescription>\n00219|           </CardHeader>\n00220|           <CardContent>\n00221|             <div className=\"space-y-4\">\n00222|               <div className=\"flex gap-4 justify-center\">\n00223|                 <Button\n00224|                   onClick={() => handleAnswer(currentQuestionData.id, true)}\n00225|                   variant={currentAnswer === true ? \"default\" : \"outline\"}\n00226|                   className=\"flex items-center gap-2 px-8\"\n00227|                 >\n00228|                   {currentAnswer === true ? <CheckCircle className=\"h-4 w-4\" /> : <Circle className=\"h-4 w-4\" />}\n00229|                   {t.common.yes}\n00230|                 </Button>\n00231|                 <Button\n00232|                   onClick={() => handleAnswer(currentQuestionData.id, false)}\n00233|                   variant={currentAnswer === false ? \"default\" : \"outline\"}\n00234|                   className=\"flex items-center gap-2 px-8\"\n00235|                 >\n00236|                   {currentAnswer === false ? <CheckCircle className=\"h-4 w-4\" /> : <Circle className=\"h-4 w-4\" />}\n00237|                   {t.common.no}\n00238|                 </Button>\n00239|               </div>\n00240| \n00241|               <div className=\"flex justify-between pt-6\">\n00242|                 <Button \n00243|                   onClick={prevQuestion} \n00244|                   disabled={currentQuestion === 0}\n00245|                   variant=\"outline\"\n00246|                   className=\"flex items-center gap-2\"\n00247|                 >\n00248|                   <ArrowLeft className=\"h-4 w-4\" />\n00249|                   {t.common.previous}\n00250|                 </Button>\n00251|                 \n00252|                 <Button \n00253|                   onClick={nextQuestion}\n00254|                   disabled={currentAnswer === undefined}\n00255|                   className=\"flex items-center gap-2\"\n00256|                 >\n00257|                   {currentQuestion === t.quickScreen.questions.length - 1 ? t.common.complete : t.common.next}\n00258|                   <ArrowRight className=\"h-4 w-4\" />\n00259|                 </Button>\n00260|               </div>\n00261|             </div>\n00262|           </CardContent>\n00263|         </Card>\n00264| \n00265|         <div className=\"mt-6 text-center\">\n00266|           <div className=\"flex items-center justify-center gap-2 text-sm text-gray-600\">\n00267|             <AlertTriangle className=\"h-4 w-4\" />\n00268|             This screening tool is for clinical decision support only and does not replace professional medical judgment\n00269|           </div>\n00270|         </div>\n00271|       </div>\n00272|     </div>\n00273|   )\n00274| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { CheckCircle, Circle, ArrowLeft, ArrowRight, Clock, AlertTriangle } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\nconst questionCategories = [\n  \"coreFatigue\", \"corePEM\", \"coreSleep\", \"coreCognitive\", \"additional\", \"autonomic\", \n  \"neuromuscular\", \"fluLike\", \"intolerance\", \"sensory\", \"pain\", \"duration\", \n  \"functional\", \"exclusion\", \"history\", \"severity\"\n]\n\nexport default function QuickScreen() {\n  const [answers, setAnswers] = useState<Record<number, boolean>>({})\n  const [currentQuestion, setCurrentQuestion] = useState(0)"
    },
    "title": "app/quick-screen/page.tsx",
    "time": {
      "start": 1758539263086,
      "end": 1758539263101
    }
  }
}