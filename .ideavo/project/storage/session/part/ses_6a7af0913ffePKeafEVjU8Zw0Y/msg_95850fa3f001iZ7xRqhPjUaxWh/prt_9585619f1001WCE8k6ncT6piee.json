{
  "id": "prt_9585619f1001WCE8k6ncT6piee",
  "messageID": "msg_95850fa3f001iZ7xRqhPjUaxWh",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01FT8ou7aMazaDyWwNZdNPSN",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/criteria-engine/page.tsx",
      "content": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { Label } from '@/components/ui/label'\nimport { ArrowLeft, BarChart3, CheckCircle, AlertTriangle, FileText, Download } from 'lucide-react'\nimport Link from 'next/link'\n\ninterface DiagnosticCriteria {\n  id: string\n  condition: string\n  met: boolean\n  criteria: { id: string; description: string; met: boolean }[]\n  icdCode: string\n  confidence: 'high' | 'medium' | 'low'\n}\n\nconst mecfsCriteria = [\n  { id: 'fatigue', description: 'Substantial reduction or impairment in activity levels that persists for ≥6 months', met: false },\n  { id: 'pem', description: 'Post-exertional malaise (PEM) present', met: false },\n  { id: 'sleep', description: 'Unrefreshing sleep', met: false },\n  { id: 'cognitive', description: 'Cognitive impairment (brain fog)', met: false },\n  { id: 'orthostatic', description: 'Orthostatic intolerance OR autonomic dysfunction', met: false }\n]\n\nconst longCovidCriteria = [\n  { id: 'covid_history', description: 'Confirmed or probable SARS-CoV-2 infection', met: false },\n  { id: 'duration', description: 'Symptoms persist ≥3 months from acute illness', met: false },\n  { id: 'multisystem', description: 'Multi-system symptoms affecting daily functioning', met: false },\n  { id: 'unexplained', description: 'Symptoms not explained by alternative diagnosis', met: false }\n]\n\nconst potsCriteria = [\n  { id: 'hr_increase', description: 'Heart rate increase ≥30 bpm within 10 minutes of standing', met: false },\n  { id: 'sustained', description: 'Sustained heart rate ≥120 bpm while standing', met: false },\n  { id: 'symptoms', description: 'Orthostatic symptoms (dizziness, palpitations, fatigue)', met: false },\n  { id: 'duration_pots', description: 'Symptoms present for ≥3 months', met: false },\n  { id: 'no_oh', description: 'Absence of orthostatic hypotension', met: false }\n]\n\nexport default function CriteriaEngine() {\n  const [mecfsChecked, setMecfsChecked] = useState(mecfsCriteria.map(c => ({ ...c })))\n  const [longCovidChecked, setLongCovidChecked] = useState(longCovidCriteria.map(c => ({ ...c })))\n  const [potsChecked, setPotsChecked] = useState(potsCriteria.map(c => ({ ...c })))\n  const [covidTiming, setCovidTiming] = useState<string>('')\n  const [isComplete, setIsComplete] = useState(false)\n\n  const handleMECFSChange = (id: string, checked: boolean) => {\n    setMecfsChecked(prev => prev.map(item => \n      item.id === id ? { ...item, met: checked } : item\n    ))\n  }\n\n  const handleLongCovidChange = (id: string, checked: boolean) => {\n    setLongCovidChecked(prev => prev.map(item => \n      item.id === id ? { ...item, met: checked } : item\n    ))\n  }\n\n  const handlePOTSChange = (id: string, checked: boolean) => {\n    setPotsChecked(prev => prev.map(item => \n      item.id === id ? { ...item, met: checked } : item\n    ))\n  }\n\n  const calculateDiagnoses = (): DiagnosticCriteria[] => {\n    const diagnoses: DiagnosticCriteria[] = []\n\n    // ME/CFS Diagnosis (requires fatigue, PEM, sleep, and either cognitive OR orthostatic)\n    const mecfsCore = mecfsChecked.filter(c => ['fatigue', 'pem', 'sleep'].includes(c.id) && c.met).length\n    const mecfsAdditional = mecfsChecked.filter(c => ['cognitive', 'orthostatic'].includes(c.id) && c.met).length\n    const mecfsMet = mecfsCore === 3 && mecfsAdditional >= 1\n    \n    diagnoses.push({\n      id: 'mecfs',\n      condition: 'Myalgic Encephalomyelitis/Chronic Fatigue Syndrome (ME/CFS)',\n      met: mecfsMet,\n      criteria: mecfsChecked,\n      icdCode: 'G93.32',\n      confidence: mecfsMet ? (mecfsCore === 3 && mecfsAdditional === 2 ? 'high' : 'medium') : 'low'\n    })\n\n    // Long COVID Diagnosis\n    const longCovidMet = longCovidChecked.filter(c => c.met).length >= 3\n    diagnoses.push({\n      id: 'longcovid',\n      condition: 'Long COVID (Post-acute sequelae of SARS-CoV-2)',\n      met: longCovidMet,\n      criteria: longCovidChecked,\n      icdCode: 'U09.9',\n      confidence: longCovidMet ? 'high' : 'low'\n    })\n\n    // POTS Diagnosis (requires HR increase + symptoms + duration + no OH)\n    const potsEssential = potsChecked.filter(c => ['hr_increase', 'symptoms', 'duration_pots', 'no_oh'].includes(c.id) && c.met).length\n    const potsMet = potsEssential >= 4\n    \n    diagnoses.push({\n      id: 'pots',\n      condition: 'Postural Orthostatic Tachycardia Syndrome (POTS)',\n      met: potsMet,\n      criteria: potsChecked,\n      icdCode: 'I47.1',\n      confidence: potsMet ? 'high' : 'low'\n    })\n\n    return diagnoses\n  }\n\n  const generateReport = () => {\n    const diagnoses = calculateDiagnoses()\n    const positives = diagnoses.filter(d => d.met)\n    \n    let report = \"AutoDx Clinical Decision Support Report\\n\"\n    report += \"=====================================\\n\\n\"\n    \n    report += \"DIAGNOSTIC SUMMARY:\\n\"\n    if (positives.length === 0) {\n      report += \"• No criteria met for ME/CFS, Long COVID, or POTS\\n\"\n      report += \"• Consider alternative diagnoses\\n\"\n      report += \"• Reassess if symptoms progress\\n\\n\"\n    } else {\n      positives.forEach(dx => {\n        report += `• ${dx.condition} - CRITERIA MET (${dx.icdCode})\\n`\n        report += `  Confidence: ${dx.confidence.toUpperCase()}\\n`\n      })\n      report += \"\\n\"\n    }\n\n    report += \"DETAILED CRITERIA ASSESSMENT:\\n\\n\"\n    \n    diagnoses.forEach(dx => {\n      report += `${dx.condition} (${dx.icdCode}):\\n`\n      dx.criteria.forEach(criterion => {\n        report += `  ${criterion.met ? '✓' : '✗'} ${criterion.description}\\n`\n      })\n      report += `  Result: ${dx.met ? 'CRITERIA MET' : 'Criteria not met'}\\n\\n`\n    })\n\n    return report\n  }\n\n  if (isComplete) {\n    const diagnoses = calculateDiagnoses()\n    const positives = diagnoses.filter(d => d.met)\n    \n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                Diagnostic Criteria Assessment Complete\n              </CardTitle>\n              <CardDescription>\n                Based on CDC, NASEM, ESC, WHO guidelines\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {positives.length > 0 ? (\n                <div className=\"space-y-4\">\n                  <h3 className=\"text-lg font-semibold text-center mb-4\">Diagnoses Meeting Criteria</h3>\n                  {positives.map((diagnosis) => (\n                    <Alert key={diagnosis.id} className=\"border-green-200 bg-green-50\">\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      <AlertDescription>\n                        <div className=\"flex justify-between items-start\">\n                          <div>\n                            <strong className=\"text-green-800\">{diagnosis.condition}</strong>\n                            <p className=\"text-green-700 text-sm mt-1\">\n                              ICD-10 Code: {diagnosis.icdCode} | Confidence: {diagnosis.confidence}\n                            </p>\n                          </div>\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            CRITERIA MET\n                          </Badge>\n                        </div>\n                      </AlertDescription>\n                    </Alert>\n                  ))}\n                </div>\n              ) : (\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>No Diagnostic Criteria Met</strong><br />\n                    Consider alternative diagnoses or reassess if symptoms progress. \n                    Some patients may have subclinical presentations requiring ongoing monitoring.\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                {diagnoses.map((diagnosis) => (\n                  <Card key={diagnosis.id} className={`border-2 ${\n                    diagnosis.met ? 'border-green-500 bg-green-50' : 'border-gray-200'\n                  }`}>\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-sm font-semibold\">\n                        {diagnosis.condition.split('(')[0].trim()}\n                      </CardTitle>\n                      <div className=\"flex justify-between items-center\">\n                        <Badge variant={diagnosis.met ? 'default' : 'secondary'} className=\"text-xs\">\n                          {diagnosis.icdCode}\n                        </Badge>\n                        <Badge variant={diagnosis.met ? 'default' : 'outline'} className=\"text-xs\">\n                          {diagnosis.met ? 'Met' : 'Not Met'}\n                        </Badge>\n                      </div>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        {diagnosis.criteria.map((criterion) => (\n                          <div key={criterion.id} className=\"flex items-start gap-2 text-xs\">\n                            <span className={criterion.met ? 'text-green-600' : 'text-gray-400'}>\n                              {criterion.met ? '✓' : '✗'}\n                            </span>\n                            <span className={criterion.met ? 'text-green-700' : 'text-gray-600'}>\n                              {criterion.description}\n                            </span>\n                          </div>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2 text-blue-900\">Clinical Recommendations</h4>\n                <div className=\"text-blue-800 text-sm space-y-2\">\n                  {positives.some(d => d.id === 'mecfs') && (\n                    <div>\n                      <strong>ME/CFS Management:</strong>\n                      <ul className=\"ml-4 list-disc space-y-1 mt-1\">\n                        <li>Implement activity pacing and energy management</li>\n                        <li>Avoid graded exercise therapy (GET)</li>\n                        <li>Consider symptom-directed treatments</li>\n                        <li>Specialist ME/CFS clinic referral if available</li>\n                      </ul>\n                    </div>\n                  )}\n                  {positives.some(d => d.id === 'longcovid') && (\n                    <div>\n                      <strong>Long COVID Management:</strong>\n                      <ul className=\"ml-4 list-disc space-y-1 mt-1\">\n                        <li>Multidisciplinary approach to symptom management</li>\n                        <li>Long COVID clinic referral if available</li>\n                        <li>Monitor for improvement over time</li>\n                        <li>Address individual symptoms (fatigue, cognitive, respiratory)</li>\n                      </ul>\n                    </div>\n                  )}\n                  {positives.some(d => d.id === 'pots') && (\n                    <div>\n                      <strong>POTS Management:</strong>\n                      <ul className=\"ml-4 list-disc space-y-1 mt-1\">\n                        <li>Proceed to subtype determination for targeted therapy</li>\n                        <li>Non-pharmacological: salt, fluids, compression garments</li>\n                        <li>Consider cardiology or autonomic specialist referral</li>\n                        <li>Gradual exercise reconditioning when appropriate</li>\n                      </ul>\n                    </div>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button onClick={() => {\n                  setMecfsChecked(mecfsCriteria.map(c => ({ ...c })))\n                  setLongCovidChecked(longCovidCriteria.map(c => ({ ...c })))\n                  setPotsChecked(potsCriteria.map(c => ({ ...c })))\n                  setIsComplete(false)\n                }} variant=\"outline\">\n                  Reassess Criteria\n                </Button>\n                <Button onClick={() => {\n                  const report = generateReport()\n                  const blob = new Blob([report], { type: 'text/plain' })\n                  const url = URL.createObjectURL(blob)\n                  const a = document.createElement('a')\n                  a.href = url\n                  a.download = 'autodx-diagnostic-report.txt'\n                  a.click()\n                  URL.revokeObjectURL(url)\n                }} className=\"flex items-center gap-2\">\n                  <Download className=\"h-4 w-4\" />\n                  Download Report\n                </Button>\n                {positives.some(d => d.id === 'pots') && (\n                  <Button asChild>\n                    <Link href=\"/subtype-advisor\">\n                      POTS Subtype Analysis\n                    </Link>\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"mb-6\">\n          <Link href=\"/\" className=\"inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n          \n          <div className=\"flex items-center gap-4 mb-4\">\n            <BarChart3 className=\"h-5 w-5 text-blue-600\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Criteria Engine</h1>\n              <p className=\"text-gray-600\">Apply CDC, NASEM, ESC, WHO diagnostic criteria for final determination</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg text-blue-800\">ME/CFS Criteria (CDC/NASEM 2015)</CardTitle>\n              <CardDescription>\n                Requires substantial fatigue, PEM, unrefreshing sleep, AND either cognitive impairment OR orthostatic intolerance\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {mecfsChecked.map((criterion) => (\n                  <div key={criterion.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n                    <Checkbox\n                      id={criterion.id}\n                      checked={criterion.met}\n                      onCheckedChange={(checked) => handleMECFSChange(criterion.id, !!checked)}\n                    />\n                    <Label htmlFor={criterion.id} className=\"cursor-pointer text-sm flex-1\">\n                      {criterion.description}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg text-green-800\">Long COVID Criteria (WHO/NASEM 2024)</CardTitle>\n              <CardDescription>\n                Post-acute sequelae of SARS-CoV-2 infection with persistent multi-system symptoms\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {longCovidChecked.map((criterion) => (\n                  <div key={criterion.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n                    <Checkbox\n                      id={criterion.id}\n                      checked={criterion.met}\n                      onCheckedChange={(checked) => handleLongCovidChange(criterion.id, !!checked)}\n                    />\n                    <Label htmlFor={criterion.id} className=\"cursor-pointer text-sm flex-1\">\n                      {criterion.description}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n              \n              {longCovidChecked.find(c => c.id === 'covid_history')?.met && (\n                <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n                  <Label className=\"text-sm font-medium\">COVID-19 infection timing:</Label>\n                  <RadioGroup value={covidTiming} onValueChange={setCovidTiming} className=\"mt-2\">\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"confirmed\" id=\"confirmed\" />\n                      <Label htmlFor=\"confirmed\" className=\"text-sm\">Confirmed by test</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"probable\" id=\"probable\" />\n                      <Label htmlFor=\"probable\" className=\"text-sm\">Probable based on symptoms/exposure</Label>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <RadioGroupItem value=\"suspected\" id=\"suspected\" />\n                      <Label htmlFor=\"suspected\" className=\"text-sm\">Suspected based on timing</Label>\n                    </div>\n                  </RadioGroup>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg text-purple-800\">POTS Criteria (ESC 2018/AAS-EFAS 2021)</CardTitle>\n              <CardDescription>\n                Heart rate increase ≥30 bpm within 10 minutes of standing, with symptoms but without orthostatic hypotension\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {potsChecked.map((criterion) => (\n                  <div key={criterion.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n                    <Checkbox\n                      id={criterion.id}\n                      checked={criterion.met}\n                      onCheckedChange={(checked) => handlePOTSChange(criterion.id, !!checked)}\n                    />\n                    <Label htmlFor={criterion.id} className=\"cursor-pointer text-sm flex-1\">\n                      {criterion.description}\n                    </Label>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-center\">\n            <Button onClick={() => setIsComplete(true)} size=\"lg\" className=\"px-8\">\n              <FileText className=\"h-4 w-4 mr-2\" />\n              Generate Diagnostic Report\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/app/criteria-engine/page.tsx",
      "exists": false
    },
    "title": "app/criteria-engine/page.tsx",
    "time": {
      "start": 1758123726375,
      "end": 1758123726391
    }
  }
}