{
  "id": "prt_9585404d6001pKZBlw1QbZ3qsX",
  "messageID": "msg_95850fa3f001iZ7xRqhPjUaxWh",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_014LAwcgFB1pEzJn5SYPTYj6",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/stand-test/page.tsx",
      "content": "'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { ArrowLeft, Heart, Play, Pause, Square, Timer, TrendingUp, AlertTriangle } from 'lucide-react'\nimport Link from 'next/link'\n\ninterface HeartRateReading {\n  time: number\n  hr: number\n  bp?: { systolic: number; diastolic: number }\n}\n\ninterface TestPhase {\n  name: string\n  duration: number\n  position: 'lying' | 'standing'\n  instructions: string\n}\n\nconst testPhases: TestPhase[] = [\n  {\n    name: 'Baseline Lying',\n    duration: 300, // 5 minutes\n    position: 'lying',\n    instructions: 'Lie down comfortably and remain still. Breathe normally and relax.'\n  },\n  {\n    name: 'Standing Phase',\n    duration: 600, // 10 minutes\n    position: 'standing',\n    instructions: 'Stand up quickly and remain standing. Do not lean against walls or move around.'\n  }\n]\n\nexport default function StandTest() {\n  const [currentPhase, setCurrentPhase] = useState(0)\n  const [timeElapsed, setTimeElapsed] = useState(0)\n  const [isRunning, setIsRunning] = useState(false)\n  const [isPaused, setIsPaused] = useState(false)\n  const [readings, setReadings] = useState<HeartRateReading[]>([])\n  const [currentHR, setCurrentHR] = useState<number | null>(null)\n  const [currentBP, setCurrentBP] = useState<{ systolic: number; diastolic: number } | null>(null)\n  const [isComplete, setIsComplete] = useState(false)\n  const [testMethod, setTestMethod] = useState<'manual' | 'camera'>('manual')\n  \n  const intervalRef = useRef<NodeJS.Timeout | null>(null)\n\n  useEffect(() => {\n    if (isRunning && !isPaused) {\n      intervalRef.current = setInterval(() => {\n        setTimeElapsed(prev => prev + 1)\n      }, 1000)\n    } else {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current)\n      }\n    }\n\n    return () => {\n      if (intervalRef.current) {\n        clearInterval(intervalRef.current)\n      }\n    }\n  }, [isRunning, isPaused])\n\n  useEffect(() => {\n    const phase = testPhases[currentPhase]\n    if (phase && timeElapsed >= phase.duration && currentPhase < testPhases.length - 1) {\n      setCurrentPhase(prev => prev + 1)\n      setTimeElapsed(0)\n    } else if (phase && timeElapsed >= phase.duration && currentPhase === testPhases.length - 1) {\n      setIsRunning(false)\n      setIsComplete(true)\n    }\n  }, [timeElapsed, currentPhase])\n\n  const startTest = () => {\n    setIsRunning(true)\n    setIsPaused(false)\n    setTimeElapsed(0)\n    setCurrentPhase(0)\n    setReadings([])\n    setIsComplete(false)\n  }\n\n  const pauseTest = () => {\n    setIsPaused(!isPaused)\n  }\n\n  const stopTest = () => {\n    setIsRunning(false)\n    setIsPaused(false)\n    setTimeElapsed(0)\n    setCurrentPhase(0)\n  }\n\n  const addReading = () => {\n    if (currentHR) {\n      const reading: HeartRateReading = {\n        time: timeElapsed,\n        hr: currentHR,\n        bp: currentBP || undefined\n      }\n      setReadings(prev => [...prev, reading])\n      setCurrentHR(null)\n      setCurrentBP(null)\n    }\n  }\n\n  const calculateResults = () => {\n    const lyingReadings = readings.filter(r => r.time < 300)\n    const standingReadings = readings.filter(r => r.time >= 300)\n    \n    if (lyingReadings.length === 0 || standingReadings.length === 0) {\n      return null\n    }\n\n    const baselineHR = lyingReadings.reduce((sum, r) => sum + r.hr, 0) / lyingReadings.length\n    const maxStandingHR = Math.max(...standingReadings.map(r => r.hr))\n    const hrIncrease = maxStandingHR - baselineHR\n\n    // POTS criteria: HR increase ≥30 bpm (≥40 for ages 12-19)\n    const potsThreshold = 30\n    const meetsPOTSCriteria = hrIncrease >= potsThreshold\n\n    // Calculate sustained HR increase (average of standing phase)\n    const sustainedStandingHR = standingReadings.reduce((sum, r) => sum + r.hr, 0) / standingReadings.length\n    const sustainedHRIncrease = sustainedStandingHR - baselineHR\n\n    return {\n      baselineHR: Math.round(baselineHR),\n      maxStandingHR: Math.round(maxStandingHR),\n      sustainedStandingHR: Math.round(sustainedStandingHR),\n      hrIncrease: Math.round(hrIncrease),\n      sustainedHRIncrease: Math.round(sustainedHRIncrease),\n      meetsPOTSCriteria,\n      potsThreshold\n    }\n  }\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60)\n    const secs = seconds % 60\n    return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n  }\n\n  const currentPhaseData = testPhases[currentPhase]\n  const progress = currentPhaseData ? (timeElapsed / currentPhaseData.duration) * 100 : 0\n  const results = calculateResults()\n\n  if (isComplete && results) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n                <Heart className=\"h-6 w-6 text-red-600\" />\n                Stand-Test Results\n              </CardTitle>\n              <CardDescription>\n                NASA Lean Stand Test Results - 10 minute protocol\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"text-center\">\n                <Badge \n                  className={`px-4 py-2 text-lg ${\n                    results.meetsPOTSCriteria \n                      ? 'bg-red-100 text-red-800' \n                      : 'bg-green-100 text-green-800'\n                  }`}\n                >\n                  {results.meetsPOTSCriteria ? 'POTS Criteria Met' : 'POTS Criteria Not Met'}\n                </Badge>\n              </div>\n\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <Card className=\"border-blue-200\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-blue-800\">Baseline (Lying)</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-blue-900\">\n                      {results.baselineHR} bpm\n                    </div>\n                    <p className=\"text-sm text-blue-700\">Average heart rate</p>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-orange-200\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-orange-800\">Peak Standing</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-orange-900\">\n                      {results.maxStandingHR} bpm\n                    </div>\n                    <p className=\"text-sm text-orange-700\">Maximum heart rate</p>\n                    <Badge variant=\"outline\" className=\"mt-1\">\n                      +{results.hrIncrease} bpm\n                    </Badge>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-purple-200\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-purple-800\">Sustained Standing</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"text-2xl font-bold text-purple-900\">\n                      {results.sustainedStandingHR} bpm\n                    </div>\n                    <p className=\"text-sm text-purple-700\">Average standing HR</p>\n                    <Badge variant=\"outline\" className=\"mt-1\">\n                      +{results.sustainedHRIncrease} bpm\n                    </Badge>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {results.meetsPOTSCriteria && (\n                <Alert className=\"border-red-200 bg-red-50\">\n                  <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                  <AlertDescription className=\"text-red-800\">\n                    <strong>POTS Criteria Met:</strong> Heart rate increase of {results.hrIncrease} bpm \n                    exceeds the threshold of {results.potsThreshold} bpm. Consider POTS subtyping and \n                    further evaluation.\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                  <TrendingUp className=\"h-4 w-4\" />\n                  Clinical Interpretation\n                </h4>\n                <div className=\"text-sm space-y-2\">\n                  {results.meetsPOTSCriteria ? (\n                    <>\n                      <p>• Heart rate increase suggests orthostatic intolerance consistent with POTS</p>\n                      <p>• Proceed to POTS subtyping for targeted treatment recommendations</p>\n                      <p>• Consider additional autonomic testing if clinically indicated</p>\n                      <p>• Rule out secondary causes (dehydration, medications, other conditions)</p>\n                    </>\n                  ) : (\n                    <>\n                      <p>• Normal orthostatic heart rate response</p>\n                      <p>• POTS unlikely based on current criteria</p>\n                      <p>• Consider other causes of symptoms (ME/CFS, Long COVID without POTS)</p>\n                      <p>• Repeat testing if symptoms persist or worsen</p>\n                    </>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2 text-blue-900\">Next Steps</h4>\n                <div className=\"text-sm text-blue-800 space-y-1\">\n                  <p>• Complete PEM-Quest assessment</p>\n                  <p>• Proceed to Criteria Engine for comprehensive diagnosis</p>\n                  {results.meetsPOTSCriteria && (\n                    <p>• Continue to Subtype & Treatment Advisor for POTS management</p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button onClick={() => {\n                  setIsComplete(false)\n                  setReadings([])\n                  setTimeElapsed(0)\n                  setCurrentPhase(0)\n                }} variant=\"outline\">\n                  Repeat Test\n                </Button>\n                <Button asChild>\n                  <Link href=\"/pem-quest\">\n                    Continue to PEM-Quest\n                  </Link>\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"mb-6\">\n          <Link href=\"/\" className=\"inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n          \n          <div className=\"flex items-center gap-4 mb-4\">\n            <Heart className=\"h-5 w-5 text-red-600\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Stand-Test Pro</h1>\n              <p className=\"text-gray-600\">NASA Lean Stand Test Protocol - 10 minute heart rate monitoring</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          {!isRunning && readings.length === 0 && (\n            <Card>\n              <CardHeader>\n                <CardTitle>Test Setup</CardTitle>\n                <CardDescription>\n                  Choose your preferred method for heart rate monitoring\n                </CardDescription>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <div className=\"grid md:grid-cols-2 gap-4\">\n                  <Card \n                    className={`cursor-pointer transition-all ${\n                      testMethod === 'manual' ? 'ring-2 ring-blue-500' : ''\n                    }`}\n                    onClick={() => setTestMethod('manual')}\n                  >\n                    <CardContent className=\"pt-6\">\n                      <h3 className=\"font-semibold mb-2\">Manual Entry</h3>\n                      <p className=\"text-sm text-gray-600 mb-4\">\n                        Use pulse oximeter, fitness tracker, or manual pulse counting\n                      </p>\n                      <Badge variant=\"outline\">Recommended</Badge>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card \n                    className={`cursor-pointer transition-all ${\n                      testMethod === 'camera' ? 'ring-2 ring-blue-500' : ''\n                    }`}\n                    onClick={() => setTestMethod('camera')}\n                  >\n                    <CardContent className=\"pt-6\">\n                      <h3 className=\"font-semibold mb-2\">Camera PPG</h3>\n                      <p className=\"text-sm text-gray-600 mb-4\">\n                        Use device camera for photoplethysmography (experimental)\n                      </p>\n                      <Badge variant=\"secondary\">Beta Feature</Badge>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                <Alert>\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Safety Note:</strong> Stop the test immediately if you experience chest pain, \n                    severe dizziness, or feel faint. Have a chair nearby for safety.\n                  </AlertDescription>\n                </Alert>\n\n                <Button onClick={startTest} className=\"w-full\" size=\"lg\">\n                  <Play className=\"h-4 w-4 mr-2\" />\n                  Start Stand Test\n                </Button>\n              </CardContent>\n            </Card>\n          )}\n\n          {isRunning && (\n            <>\n              <Card>\n                <CardHeader>\n                  <CardTitle className=\"flex items-center justify-between\">\n                    <span>Phase: {currentPhaseData?.name}</span>\n                    <div className=\"flex items-center gap-2\">\n                      <Timer className=\"h-4 w-4\" />\n                      {formatTime(timeElapsed)} / {formatTime(currentPhaseData?.duration || 0)}\n                    </div>\n                  </CardTitle>\n                  <CardDescription>\n                    {currentPhaseData?.instructions}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <Progress value={progress} className=\"h-3 mb-4\" />\n                  \n                  <div className=\"flex gap-4 justify-center mb-4\">\n                    <Button onClick={pauseTest} variant=\"outline\">\n                      {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n                      {isPaused ? 'Resume' : 'Pause'}\n                    </Button>\n                    <Button onClick={stopTest} variant=\"destructive\">\n                      <Square className=\"h-4 w-4 mr-2\" />\n                      Stop Test\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Record Heart Rate</CardTitle>\n                  <CardDescription>\n                    Enter current heart rate reading (record every 1-2 minutes)\n                  </CardDescription>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"grid md:grid-cols-3 gap-4\">\n                    <div>\n                      <Label htmlFor=\"hr\">Heart Rate (bpm)</Label>\n                      <Input\n                        id=\"hr\"\n                        type=\"number\"\n                        placeholder=\"75\"\n                        value={currentHR || ''}\n                        onChange={(e) => setCurrentHR(parseInt(e.target.value) || null)}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"systolic\">Systolic BP (optional)</Label>\n                      <Input\n                        id=\"systolic\"\n                        type=\"number\"\n                        placeholder=\"120\"\n                        value={currentBP?.systolic || ''}\n                        onChange={(e) => setCurrentBP(prev => ({\n                          ...prev,\n                          systolic: parseInt(e.target.value) || 0,\n                          diastolic: prev?.diastolic || 0\n                        }))}\n                      />\n                    </div>\n                    <div>\n                      <Label htmlFor=\"diastolic\">Diastolic BP (optional)</Label>\n                      <Input\n                        id=\"diastolic\"\n                        type=\"number\"\n                        placeholder=\"80\"\n                        value={currentBP?.diastolic || ''}\n                        onChange={(e) => setCurrentBP(prev => ({\n                          ...prev,\n                          systolic: prev?.systolic || 0,\n                          diastolic: parseInt(e.target.value) || 0\n                        }))}\n                      />\n                    </div>\n                  </div>\n                  \n                  <Button onClick={addReading} disabled={!currentHR} className=\"w-full\">\n                    Record Reading at {formatTime(timeElapsed)}\n                  </Button>\n                  \n                  {readings.length > 0 && (\n                    <div className=\"bg-gray-50 p-4 rounded-lg\">\n                      <h4 className=\"font-semibold mb-2\">Recent Readings</h4>\n                      <div className=\"text-sm space-y-1\">\n                        {readings.slice(-5).map((reading, index) => (\n                          <div key={index} className=\"flex justify-between\">\n                            <span>{formatTime(reading.time)}</span>\n                            <span>{reading.hr} bpm</span>\n                          </div>\n                        ))}\n                      </div>\n                    </div>\n                  )}\n                </CardContent>\n              </Card>\n            </>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/app/stand-test/page.tsx",
      "exists": false
    },
    "title": "app/stand-test/page.tsx",
    "time": {
      "start": 1758123584857,
      "end": 1758123584872
    }
  }
}