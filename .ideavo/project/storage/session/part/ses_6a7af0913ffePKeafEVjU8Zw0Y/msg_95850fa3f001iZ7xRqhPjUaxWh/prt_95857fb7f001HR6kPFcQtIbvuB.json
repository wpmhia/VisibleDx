{
  "id": "prt_95857fb7f001HR6kPFcQtIbvuB",
  "messageID": "msg_95850fa3f001iZ7xRqhPjUaxWh",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01QDYPdwVHwuPcF71Q9HNxTN",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/subtype-advisor/page.tsx",
      "content": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { ArrowLeft, Users, Pill, Heart, Droplets, Activity, Brain, Shield, Download } from 'lucide-react'\nimport Link from 'next/link'\n\ninterface POTSSubtype {\n  id: string\n  name: string\n  description: string\n  icon: any\n  color: string\n  criteria: { id: string; description: string; checked: boolean }[]\n  treatments: {\n    nonPharmacological: string[]\n    firstLine: string[]\n    secondLine: string[]\n  }\n}\n\nconst potsSubtypes: POTSSubtype[] = [\n  {\n    id: 'hypovolemic',\n    name: 'Hypovolemic POTS',\n    description: 'Low blood volume causing orthostatic intolerance',\n    icon: Droplets,\n    color: 'blue',\n    criteria: [\n      { id: 'low_bp', description: 'Low-normal blood pressure (<110/70)', checked: false },\n      { id: 'thirst', description: 'Excessive thirst', checked: false },\n      { id: 'salt_craving', description: 'Salt craving', checked: false },\n      { id: 'volume_depletion', description: 'Signs of volume depletion', checked: false },\n      { id: 'renin_high', description: 'Elevated renin/aldosterone (if available)', checked: false }\n    ],\n    treatments: {\n      nonPharmacological: [\n        'Increase fluid intake to 2.5-3L daily',\n        'Increase sodium intake to 8-10g daily',\n        'Compression garments (30-40 mmHg)',\n        'Gradual exercise reconditioning'\n      ],\n      firstLine: [\n        'Fludrocortisone 0.1-0.2mg daily',\n        'Salt tablets if dietary intake insufficient'\n      ],\n      secondLine: [\n        'Desmopressin (DDAVP) for severe cases',\n        'Erythropoietin if anemic'\n      ]\n    }\n  },\n  {\n    id: 'neuropathic',\n    name: 'Neuropathic POTS',\n    description: 'Peripheral autonomic neuropathy affecting blood vessel control',\n    icon: Brain,\n    color: 'purple',\n    criteria: [\n      { id: 'distal_neuropathy', description: 'Distal small fiber neuropathy symptoms', checked: false },\n      { id: 'gi_dysfunction', description: 'GI dysfunction (gastroparesis, constipation)', checked: false },\n      { id: 'anhidrosis', description: 'Anhidrosis or reduced sweating', checked: false },\n      { id: 'pupil_abnormal', description: 'Pupillary abnormalities', checked: false },\n      { id: 'diabetes_autoimmune', description: 'History of diabetes or autoimmune disease', checked: false }\n    ],\n    treatments: {\n      nonPharmacological: [\n        'Compression garments',\n        'Leg elevation',\n        'Avoid heat exposure',\n        'Small frequent meals'\n      ],\n      firstLine: [\n        'Midodrine 2.5-10mg TID',\n        'Pyridostigmine 30-60mg TID'\n      ],\n      secondLine: [\n        'Droxidopa (if available)',\n        'Alpha-lipoic acid for neuropathy',\n        'IVIG for autoimmune cases'\n      ]\n    }\n  },\n  {\n    id: 'hyperadrenergic',\n    name: 'Hyperadrenergic POTS',\n    description: 'Excessive sympathetic nervous system activation',\n    icon: Activity,\n    color: 'red',\n    criteria: [\n      { id: 'high_bp', description: 'Hypertension when standing', checked: false },\n      { id: 'anxiety_panic', description: 'Anxiety, panic attacks, tremor', checked: false },\n      { id: 'migraine', description: 'Migraine headaches', checked: false },\n      { id: 'cold_hands', description: 'Cold hands and feet', checked: false },\n      { id: 'norepinephrine_high', description: 'Elevated standing norepinephrine >600 pg/mL', checked: false }\n    ],\n    treatments: {\n      nonPharmacological: [\n        'Stress reduction techniques',\n        'Avoid stimulants (caffeine)',\n        'Regular sleep schedule',\n        'Gentle exercise'\n      ],\n      firstLine: [\n        'Propranolol 10-40mg BID',\n        'Clonidine 0.1-0.2mg BID'\n      ],\n      secondLine: [\n        'Ivabradine 2.5-7.5mg BID',\n        'Methyldopa',\n        'Labetalol for hypertension'\n      ]\n    }\n  },\n  {\n    id: 'autoimmune',\n    name: 'Autoimmune POTS',\n    description: 'Autoimmune-mediated autonomic dysfunction',\n    icon: Shield,\n    color: 'green',\n    criteria: [\n      { id: 'autoimmune_history', description: 'Personal/family history of autoimmune disease', checked: false },\n      { id: 'rapid_onset', description: 'Rapid onset of symptoms', checked: false },\n      { id: 'viral_trigger', description: 'Viral illness trigger (EBV, COVID, etc.)', checked: false },\n      { id: 'antibodies', description: 'Positive autonomic antibodies (if tested)', checked: false },\n      { id: 'other_autoimmune', description: 'Other autoimmune markers positive', checked: false }\n    ],\n    treatments: {\n      nonPharmacological: [\n        'Standard POTS measures',\n        'Avoid infection triggers',\n        'Stress management',\n        'Anti-inflammatory diet'\n      ],\n      firstLine: [\n        'Standard POTS medications',\n        'Trial of corticosteroids'\n      ],\n      secondLine: [\n        'IVIG therapy',\n        'Immunosuppressive agents',\n        'Plasmapheresis for severe cases'\n      ]\n    }\n  }\n]\n\nexport default function SubtypeAdvisor() {\n  const [subtypeData, setSubtypeData] = useState(potsSubtypes.map(s => ({ ...s })))\n  const [patientAge, setPatientAge] = useState<number | null>(null)\n  const [comorbidities, setComorbidities] = useState<string[]>([])\n  const [isComplete, setIsComplete] = useState(false)\n\n  const handleCriteriaChange = (subtypeId: string, criteriaId: string, checked: boolean) => {\n    setSubtypeData(prev => prev.map(subtype => \n      subtype.id === subtypeId \n        ? {\n            ...subtype,\n            criteria: subtype.criteria.map(c => \n              c.id === criteriaId ? { ...c, checked } : c\n            )\n          }\n        : subtype\n    ))\n  }\n\n  const calculateSubtypeScores = () => {\n    return subtypeData.map(subtype => {\n      const score = subtype.criteria.filter(c => c.checked).length\n      const maxScore = subtype.criteria.length\n      const percentage = (score / maxScore) * 100\n      \n      return {\n        ...subtype,\n        score,\n        maxScore,\n        percentage: Math.round(percentage),\n        likelihood: percentage >= 60 ? 'high' : percentage >= 40 ? 'medium' : 'low'\n      }\n    }).sort((a, b) => b.percentage - a.percentage)\n  }\n\n  const generateTreatmentPlan = () => {\n    const scores = calculateSubtypeScores()\n    const primarySubtype = scores[0]\n    const secondarySubtypes = scores.filter(s => s.percentage >= 40 && s.id !== primarySubtype.id)\n    \n    let plan = \"POTS Subtype & Treatment Plan\\n\"\n    plan += \"=============================\\n\\n\"\n    \n    plan += \"SUBTYPE ANALYSIS:\\n\"\n    plan += `Primary: ${primarySubtype.name} (${primarySubtype.percentage}% likelihood)\\n`\n    if (secondarySubtypes.length > 0) {\n      plan += \"Secondary considerations:\\n\"\n      secondarySubtypes.forEach(s => {\n        plan += `  • ${s.name} (${s.percentage}% likelihood)\\n`\n      })\n    }\n    plan += \"\\n\"\n    \n    plan += \"TREATMENT RECOMMENDATIONS:\\n\\n\"\n    plan += \"Non-Pharmacological:\\n\"\n    primarySubtype.treatments.nonPharmacological.forEach(treatment => {\n      plan += `  • ${treatment}\\n`\n    })\n    plan += \"\\n\"\n    \n    plan += \"First-Line Medications:\\n\"\n    primarySubtype.treatments.firstLine.forEach(treatment => {\n      plan += `  • ${treatment}\\n`\n    })\n    plan += \"\\n\"\n    \n    plan += \"Second-Line Options:\\n\"\n    primarySubtype.treatments.secondLine.forEach(treatment => {\n      plan += `  • ${treatment}\\n`\n    })\n    \n    return plan\n  }\n\n  if (isComplete) {\n    const scores = calculateSubtypeScores()\n    const primarySubtype = scores[0]\n    const secondarySubtypes = scores.filter(s => s.percentage >= 40 && s.id !== primarySubtype.id)\n    \n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n        <div className=\"container mx-auto px-4 max-w-5xl\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n                <Users className=\"h-6 w-6 text-blue-600\" />\n                POTS Subtype Analysis Complete\n              </CardTitle>\n              <CardDescription>\n                Personalized treatment recommendations based on subtype assessment\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"text-center\">\n                <Badge className={`px-4 py-2 text-lg bg-${primarySubtype.color}-100 text-${primarySubtype.color}-800`}>\n                  Primary: {primarySubtype.name}\n                </Badge>\n                <p className=\"text-sm text-gray-600 mt-2\">\n                  {primarySubtype.percentage}% likelihood ({primarySubtype.score}/{primarySubtype.maxScore} criteria)\n                </p>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <Card className={`border-${primarySubtype.color}-200`}>\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className={`text-lg text-${primarySubtype.color}-800 flex items-center gap-2`}>\n                      <primarySubtype.icon className=\"h-5 w-5\" />\n                      {primarySubtype.name}\n                    </CardTitle>\n                    <CardDescription>{primarySubtype.description}</CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      <h4 className=\"font-semibold text-sm\">Criteria Met:</h4>\n                      {primarySubtype.criteria.filter(c => c.checked).map((criterion, index) => (\n                        <div key={index} className=\"text-sm flex items-center gap-2\">\n                          <span className=\"text-green-600\">✓</span>\n                          {criterion.description}\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <div className=\"space-y-4\">\n                  <h3 className=\"font-semibold text-lg\">All Subtype Scores</h3>\n                  {scores.map((subtype) => (\n                    <div key={subtype.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n                      <div className=\"flex items-center gap-2\">\n                        <subtype.icon className=\"h-4 w-4\" />\n                        <span className=\"text-sm font-medium\">{subtype.name}</span>\n                      </div>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant={subtype.likelihood === 'high' ? 'default' : 'secondary'} className=\"text-xs\">\n                          {subtype.percentage}%\n                        </Badge>\n                        <span className=\"text-xs text-gray-600\">\n                          {subtype.score}/{subtype.maxScore}\n                        </span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-3 gap-4\">\n                <Card className=\"border-green-200 bg-green-50\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-green-800 flex items-center gap-2\">\n                      <Activity className=\"h-5 w-5\" />\n                      Non-Pharmacological\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-2 text-sm\">\n                      {primarySubtype.treatments.nonPharmacological.map((treatment, index) => (\n                        <li key={index} className=\"flex items-start gap-2\">\n                          <span className=\"text-green-600 mt-1\">•</span>\n                          {treatment}\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-blue-200 bg-blue-50\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-blue-800 flex items-center gap-2\">\n                      <Pill className=\"h-5 w-5\" />\n                      First-Line Rx\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-2 text-sm\">\n                      {primarySubtype.treatments.firstLine.map((treatment, index) => (\n                        <li key={index} className=\"flex items-start gap-2\">\n                          <span className=\"text-blue-600 mt-1\">•</span>\n                          {treatment}\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-purple-200 bg-purple-50\">\n                  <CardHeader className=\"pb-3\">\n                    <CardTitle className=\"text-lg text-purple-800 flex items-center gap-2\">\n                      <Heart className=\"h-5 w-5\" />\n                      Second-Line Options\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"space-y-2 text-sm\">\n                      {primarySubtype.treatments.secondLine.map((treatment, index) => (\n                        <li key={index} className=\"flex items-start gap-2\">\n                          <span className=\"text-purple-600 mt-1\">•</span>\n                          {treatment}\n                        </li>\n                      ))}\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {secondarySubtypes.length > 0 && (\n                <Alert className=\"border-yellow-200 bg-yellow-50\">\n                  <Shield className=\"h-4 w-4 text-yellow-600\" />\n                  <AlertDescription className=\"text-yellow-800\">\n                    <strong>Mixed Subtype Considerations:</strong> This patient also shows features of{' '}\n                    {secondarySubtypes.map(s => s.name).join(' and ')}. Consider combination therapy approaches \n                    and monitor response to initial treatment.\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2\">Clinical Pearls</h4>\n                <div className=\"text-sm space-y-2\">\n                  <p>• Start with non-pharmacological interventions for all POTS subtypes</p>\n                  <p>• Begin medications at low doses and titrate slowly</p>\n                  <p>• Monitor response and adjust treatment based on symptom improvement</p>\n                  <p>• Consider specialist referral for complex cases or treatment failures</p>\n                  <p>• Re-assess subtype if treatment response is poor</p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button onClick={() => {\n                  setSubtypeData(potsSubtypes.map(s => ({ ...s })))\n                  setIsComplete(false)\n                }} variant=\"outline\">\n                  Reassess Subtype\n                </Button>\n                <Button onClick={() => {\n                  const plan = generateTreatmentPlan()\n                  const blob = new Blob([plan], { type: 'text/plain' })\n                  const url = URL.createObjectURL(blob)\n                  const a = document.createElement('a')\n                  a.href = url\n                  a.download = 'pots-treatment-plan.txt'\n                  a.click()\n                  URL.revokeObjectURL(url)\n                }} className=\"flex items-center gap-2\">\n                  <Download className=\"h-4 w-4\" />\n                  Download Treatment Plan\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n      <div className=\"container mx-auto px-4 max-w-5xl\">\n        <div className=\"mb-6\">\n          <Link href=\"/\" className=\"inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n          \n          <div className=\"flex items-center gap-4 mb-4\">\n            <Users className=\"h-5 w-5 text-blue-600\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">POTS Subtype & Treatment Advisor</h1>\n              <p className=\"text-gray-600\">Determine POTS subtype for personalized treatment recommendations</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle>Patient Information</CardTitle>\n              <CardDescription>Basic patient details for treatment planning</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                <div>\n                  <Label htmlFor=\"age\">Patient Age</Label>\n                  <Input\n                    id=\"age\"\n                    type=\"number\"\n                    placeholder=\"25\"\n                    value={patientAge || ''}\n                    onChange={(e) => setPatientAge(parseInt(e.target.value) || null)}\n                  />\n                </div>\n                <div>\n                  <Label>Relevant Comorbidities (check all that apply)</Label>\n                  <div className=\"flex gap-4 mt-2\">\n                    {['Diabetes', 'Autoimmune disease', 'EDS', 'MCAS'].map((condition) => (\n                      <div key={condition} className=\"flex items-center space-x-2\">\n                        <Checkbox\n                          id={condition}\n                          checked={comorbidities.includes(condition)}\n                          onCheckedChange={(checked) => {\n                            if (checked) {\n                              setComorbidities(prev => [...prev, condition])\n                            } else {\n                              setComorbidities(prev => prev.filter(c => c !== condition))\n                            }\n                          }}\n                        />\n                        <Label htmlFor={condition} className=\"text-sm\">{condition}</Label>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          {subtypeData.map((subtype) => (\n            <Card key={subtype.id} className={`border-${subtype.color}-200`}>\n              <CardHeader>\n                <CardTitle className={`text-lg text-${subtype.color}-800 flex items-center gap-2`}>\n                  <subtype.icon className=\"h-5 w-5\" />\n                  {subtype.name}\n                </CardTitle>\n                <CardDescription>{subtype.description}</CardDescription>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-3\">\n                  {subtype.criteria.map((criterion) => (\n                    <div key={criterion.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n                      <Checkbox\n                        id={`${subtype.id}-${criterion.id}`}\n                        checked={criterion.checked}\n                        onCheckedChange={(checked) => handleCriteriaChange(subtype.id, criterion.id, !!checked)}\n                      />\n                      <Label htmlFor={`${subtype.id}-${criterion.id}`} className=\"cursor-pointer text-sm flex-1\">\n                        {criterion.description}\n                      </Label>\n                    </div>\n                  ))}\n                </div>\n                \n                <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"text-sm text-gray-600\">\n                    <strong>Score:</strong> {subtype.criteria.filter(c => c.checked).length}/{subtype.criteria.length} criteria met\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n\n          <div className=\"flex justify-center\">\n            <Button onClick={() => setIsComplete(true)} size=\"lg\" className=\"px-8\">\n              <Pill className=\"h-4 w-4 mr-2\" />\n              Generate Treatment Recommendations\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/app/subtype-advisor/page.tsx",
      "exists": false
    },
    "title": "app/subtype-advisor/page.tsx",
    "time": {
      "start": 1758123851307,
      "end": 1758123851324
    }
  }
}