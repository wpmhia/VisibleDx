{
  "id": "prt_9585315e0001hqjNxNKcrCKxy8",
  "messageID": "msg_95850fa3f001iZ7xRqhPjUaxWh",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01YU2exgutLqqzXgDojiF314",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/red-flag-checker/page.tsx",
      "content": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { ArrowLeft, FileText, AlertTriangle, CheckCircle, Activity, Heart, Brain } from 'lucide-react'\nimport Link from 'next/link'\n\nconst redFlagSymptoms = [\n  {\n    id: 'fever',\n    symptom: 'Persistent fever or night sweats',\n    category: 'Infectious/Inflammatory',\n    priority: 'high',\n    tests: ['CBC with differential', 'ESR', 'CRP', 'Blood cultures', 'Chest X-ray']\n  },\n  {\n    id: 'weight_loss',\n    symptom: 'Unintentional weight loss >10% in 6 months',\n    category: 'Malignancy/Metabolic',\n    priority: 'high',\n    tests: ['CBC', 'Comprehensive metabolic panel', 'TSH', 'HbA1c', 'CT chest/abdomen/pelvis']\n  },\n  {\n    id: 'chest_pain',\n    symptom: 'Chest pain with exertion or at rest',\n    category: 'Cardiovascular',\n    priority: 'high',\n    tests: ['ECG', 'Troponin', 'Chest X-ray', 'Echocardiogram', 'Stress test']\n  },\n  {\n    id: 'dyspnea',\n    symptom: 'Progressive shortness of breath',\n    category: 'Cardiopulmonary',\n    priority: 'high',\n    tests: ['Chest X-ray', 'ECG', 'Echocardiogram', 'Pulmonary function tests', 'D-dimer']\n  },\n  {\n    id: 'neurological',\n    symptom: 'New neurological symptoms (weakness, numbness, seizures)',\n    category: 'Neurological',\n    priority: 'high',\n    tests: ['MRI brain', 'Neurological consultation', 'EEG if seizures']\n  },\n  {\n    id: 'bleeding',\n    symptom: 'Abnormal bleeding or bruising',\n    category: 'Hematological',\n    priority: 'high',\n    tests: ['CBC with platelet count', 'PT/PTT', 'Peripheral blood smear']\n  },\n  {\n    id: 'lymphadenopathy',\n    symptom: 'Enlarged lymph nodes',\n    category: 'Infectious/Malignancy',\n    priority: 'medium',\n    tests: ['CBC with differential', 'LDH', 'CT chest/abdomen/pelvis']\n  },\n  {\n    id: 'jaundice',\n    symptom: 'Jaundice or yellowing of skin/eyes',\n    category: 'Hepatic',\n    priority: 'high',\n    tests: ['Liver function tests', 'Hepatitis panel', 'Abdominal ultrasound']\n  }\n]\n\nconst routineLabs = [\n  {\n    category: 'Basic Metabolic',\n    tests: ['CBC with differential', 'Comprehensive metabolic panel', 'ESR', 'CRP'],\n    indication: 'Rule out anemia, infection, inflammation, electrolyte abnormalities'\n  },\n  {\n    category: 'Endocrine',\n    tests: ['TSH', 'Free T4', 'HbA1c', 'Cortisol (AM)', 'Vitamin D'],\n    indication: 'Rule out thyroid dysfunction, diabetes, adrenal insufficiency'\n  },\n  {\n    category: 'Nutritional',\n    tests: ['Vitamin B12', 'Folate', 'Iron studies', 'Ferritin'],\n    indication: 'Rule out nutritional deficiencies causing fatigue'\n  },\n  {\n    category: 'Autoimmune',\n    tests: ['ANA', 'RF', 'Anti-CCP', 'Celiac antibodies'],\n    indication: 'Screen for autoimmune conditions'\n  },\n  {\n    category: 'Cardiac',\n    tests: ['ECG', 'Echocardiogram', 'BNP/NT-proBNP'],\n    indication: 'Rule out structural heart disease, heart failure'\n  },\n  {\n    category: 'Infectious',\n    tests: ['Hepatitis B/C', 'HIV', 'Lyme antibodies', 'CMV/EBV antibodies'],\n    indication: 'Rule out chronic infections'\n  }\n]\n\nexport default function RedFlagChecker() {\n  const [selectedRedFlags, setSelectedRedFlags] = useState<string[]>([])\n  const [selectedRoutineLabs, setSelectedRoutineLabs] = useState<string[]>([])\n  const [isComplete, setIsComplete] = useState(false)\n\n  const handleRedFlagChange = (redFlagId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedRedFlags(prev => [...prev, redFlagId])\n    } else {\n      setSelectedRedFlags(prev => prev.filter(id => id !== redFlagId))\n    }\n  }\n\n  const handleRoutineLabChange = (category: string, checked: boolean) => {\n    if (checked) {\n      setSelectedRoutineLabs(prev => [...prev, category])\n    } else {\n      setSelectedRoutineLabs(prev => prev.filter(cat => cat !== category))\n    }\n  }\n\n  const generateRecommendations = () => {\n    const urgentTests = new Set<string>()\n    const routineTests = new Set<string>()\n    \n    // Add tests based on red flags\n    selectedRedFlags.forEach(flagId => {\n      const flag = redFlagSymptoms.find(f => f.id === flagId)\n      if (flag) {\n        flag.tests.forEach(test => urgentTests.add(test))\n      }\n    })\n\n    // Add routine tests\n    selectedRoutineLabs.forEach(category => {\n      const labCategory = routineLabs.find(l => l.category === category)\n      if (labCategory) {\n        labCategory.tests.forEach(test => routineTests.add(test))\n      }\n    })\n\n    const hasHighPriorityFlags = selectedRedFlags.some(flagId => \n      redFlagSymptoms.find(f => f.id === flagId)?.priority === 'high'\n    )\n\n    return {\n      urgentTests: Array.from(urgentTests),\n      routineTests: Array.from(routineTests),\n      hasHighPriorityFlags,\n      recommendation: hasHighPriorityFlags ? 'urgent' : selectedRedFlags.length > 0 ? 'priority' : 'routine'\n    }\n  }\n\n  if (isComplete) {\n    const recommendations = generateRecommendations()\n    \n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                Red-flag Assessment Complete\n              </CardTitle>\n              <CardDescription>\n                Laboratory and diagnostic recommendations based on clinical presentation\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {recommendations.hasHighPriorityFlags && (\n                <Alert className=\"border-red-200 bg-red-50\">\n                  <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                  <AlertDescription className=\"text-red-800\">\n                    <strong>Urgent Evaluation Required:</strong> High-priority red flags detected. \n                    Consider immediate or expedited workup.\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {recommendations.urgentTests.length > 0 && (\n                  <Card className=\"border-red-200\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-lg text-red-800 flex items-center gap-2\">\n                        <Heart className=\"h-5 w-5\" />\n                        Priority Tests (Red Flags)\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-2\">\n                        {recommendations.urgentTests.map((test, index) => (\n                          <li key={index} className=\"flex items-center gap-2 text-sm\">\n                            <Activity className=\"h-3 w-3 text-red-600\" />\n                            {test}\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {recommendations.routineTests.length > 0 && (\n                  <Card className=\"border-blue-200\">\n                    <CardHeader className=\"pb-3\">\n                      <CardTitle className=\"text-lg text-blue-800 flex items-center gap-2\">\n                        <FileText className=\"h-5 w-5\" />\n                        Routine Screening Tests\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <ul className=\"space-y-2\">\n                        {recommendations.routineTests.map((test, index) => (\n                          <li key={index} className=\"flex items-center gap-2 text-sm\">\n                            <Activity className=\"h-3 w-3 text-blue-600\" />\n                            {test}\n                          </li>\n                        ))}\n                      </ul>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n\n              {selectedRedFlags.length === 0 && selectedRoutineLabs.length === 0 && (\n                <Card className=\"border-green-200 bg-green-50\">\n                  <CardContent className=\"pt-6\">\n                    <div className=\"text-center text-green-800\">\n                      <CheckCircle className=\"h-8 w-8 mx-auto mb-2\" />\n                      <h3 className=\"font-semibold mb-2\">No Red Flags Identified</h3>\n                      <p className=\"text-sm\">\n                        Patient can proceed to targeted ME/CFS, Long COVID, or POTS assessment.\n                        Consider basic metabolic panel if not done recently.\n                      </p>\n                    </div>\n                  </CardContent>\n                </Card>\n              )}\n\n              <div className=\"bg-gray-50 p-4 rounded-lg\">\n                <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n                  <Brain className=\"h-4 w-4\" />\n                  Clinical Decision Support\n                </h4>\n                <div className=\"text-sm space-y-2\">\n                  {recommendations.recommendation === 'urgent' && (\n                    <p className=\"text-red-700\">\n                      • Expedite workup due to high-priority red flags\n                      • Consider same-day or next-day evaluation\n                      • Hold off on ME/CFS/POTS assessment until red flags ruled out\n                    </p>\n                  )}\n                  {recommendations.recommendation === 'priority' && (\n                    <p className=\"text-yellow-700\">\n                      • Complete recommended tests within 1-2 weeks\n                      • Can proceed with stand-test if cardiovascular red flags absent\n                      • Re-evaluate based on test results\n                    </p>\n                  )}\n                  {recommendations.recommendation === 'routine' && (\n                    <p className=\"text-green-700\">\n                      • Proceed with routine screening labs\n                      • Can continue with ME/CFS/Long COVID/POTS assessment\n                      • Consider 4-6 week follow-up for test results\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button onClick={() => {\n                  setSelectedRedFlags([])\n                  setSelectedRoutineLabs([])\n                  setIsComplete(false)\n                }} variant=\"outline\">\n                  Reassess\n                </Button>\n                {recommendations.recommendation === 'routine' && (\n                  <Button asChild>\n                    <Link href=\"/stand-test\">\n                      Continue to Stand-Test Pro\n                    </Link>\n                  </Button>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n      <div className=\"container mx-auto px-4 max-w-4xl\">\n        <div className=\"mb-6\">\n          <Link href=\"/\" className=\"inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 mb-4\">\n            <ArrowLeft className=\"h-4 w-4\" />\n            Back to Dashboard\n          </Link>\n          \n          <div className=\"flex items-center gap-4 mb-4\">\n            <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">Red-flag Checker</h1>\n              <p className=\"text-gray-600\">Identify symptoms requiring urgent evaluation and rule out explanatory diseases</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg text-red-800\">Red Flag Symptoms</CardTitle>\n              <CardDescription>\n                Check any symptoms present that may require urgent evaluation\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                {redFlagSymptoms.map((flag) => (\n                  <div key={flag.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n                    <Checkbox\n                      id={flag.id}\n                      checked={selectedRedFlags.includes(flag.id)}\n                      onCheckedChange={(checked) => handleRedFlagChange(flag.id, !!checked)}\n                    />\n                    <div className=\"flex-1\">\n                      <label htmlFor={flag.id} className=\"text-sm font-medium cursor-pointer\">\n                        {flag.symptom}\n                      </label>\n                      <div className=\"flex gap-2 mt-1\">\n                        <Badge \n                          variant={flag.priority === 'high' ? 'destructive' : 'secondary'}\n                          className=\"text-xs\"\n                        >\n                          {flag.category}\n                        </Badge>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-lg text-blue-800\">Routine Screening Labs</CardTitle>\n              <CardDescription>\n                Select categories of tests to rule out common explanatory conditions\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"grid md:grid-cols-2 gap-4\">\n                {routineLabs.map((labCategory) => (\n                  <div key={labCategory.category} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n                    <Checkbox\n                      id={labCategory.category}\n                      checked={selectedRoutineLabs.includes(labCategory.category)}\n                      onCheckedChange={(checked) => handleRoutineLabChange(labCategory.category, !!checked)}\n                    />\n                    <div className=\"flex-1\">\n                      <label htmlFor={labCategory.category} className=\"text-sm font-medium cursor-pointer\">\n                        {labCategory.category}\n                      </label>\n                      <p className=\"text-xs text-gray-600 mt-1\">{labCategory.indication}</p>\n                      <div className=\"text-xs text-gray-500 mt-1\">\n                        {labCategory.tests.slice(0, 3).join(', ')}\n                        {labCategory.tests.length > 3 && ` + ${labCategory.tests.length - 3} more`}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-center\">\n            <Button onClick={() => setIsComplete(true)} className=\"px-8\">\n              Generate Recommendations\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/app/red-flag-checker/page.tsx",
      "exists": false
    },
    "title": "app/red-flag-checker/page.tsx",
    "time": {
      "start": 1758123514008,
      "end": 1758123514025
    }
  }
}