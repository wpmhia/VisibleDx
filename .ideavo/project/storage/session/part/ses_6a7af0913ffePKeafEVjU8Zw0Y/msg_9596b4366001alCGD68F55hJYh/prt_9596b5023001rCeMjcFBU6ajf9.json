{
  "id": "prt_9596b5023001rCeMjcFBU6ajf9",
  "messageID": "msg_9596b4366001alCGD68F55hJYh",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01LzTN4AmvByjaTb5SivyFdC",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/subtype-advisor/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Checkbox } from '@/components/ui/checkbox'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { Alert, AlertDescription } from '@/components/ui/alert'\n00009| import { Input } from '@/components/ui/input'\n00010| import { Label } from '@/components/ui/label'\n00011| import { ArrowLeft, Users, Pill, Heart, Droplets, Activity, Brain, Shield, Download } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| import { useTranslation } from '@/lib/language-context'\n00014| \n00015| interface POTSSubtype {\n00016|   id: string\n00017|   name: string\n00018|   description: string\n00019|   icon: any\n00020|   color: string\n00021|   criteria: { id: string; description: string; checked: boolean }[]\n00022|   treatments: {\n00023|     nonPharmacological: string[]\n00024|     firstLine: string[]\n00025|     secondLine: string[]\n00026|   }\n00027| }\n00028| \n00029| const createSubtypes = (t: any): POTSSubtype[] => [\n00030|   {\n00031|     id: 'hypovolemic',\n00032|     name: t.subtype.subtypes.hypovolemic.name,\n00033|     description: t.subtype.subtypes.hypovolemic.description,\n00034|     icon: Droplets,\n00035|     color: 'blue',\n00036|     criteria: t.subtype.subtypes.hypovolemic.criteria.map((desc: string, index: number) => ({\n00037|       id: ['low_bp', 'thirst', 'salt_craving', 'volume_depletion', 'renin_high'][index],\n00038|       description: desc,\n00039|       checked: false\n00040|     })),\n00041|     treatments: {\n00042|       nonPharmacological: t.subtype.subtypes.hypovolemic.treatments.nonPharmacological,\n00043|       firstLine: t.subtype.subtypes.hypovolemic.treatments.firstLine,\n00044|       secondLine: t.subtype.subtypes.hypovolemic.treatments.secondLine\n00045|     }\n00046|   },\n00047|   {\n00048|     id: 'neuropathic',\n00049|     name: t.subtype.subtypes.neuropathic.name,\n00050|     description: t.subtype.subtypes.neuropathic.description,\n00051|     icon: Brain,\n00052|     color: 'purple',\n00053|     criteria: t.subtype.subtypes.neuropathic.criteria.map((desc: string, index: number) => ({\n00054|       id: ['distal_neuropathy', 'gi_dysfunction', 'anhidrosis', 'pupil_abnormal', 'diabetes_autoimmune'][index],\n00055|       description: desc,\n00056|       checked: false\n00057|     })),\n00058|     treatments: {\n00059|       nonPharmacological: t.subtype.subtypes.neuropathic.treatments.nonPharmacological,\n00060|       firstLine: t.subtype.subtypes.neuropathic.treatments.firstLine,\n00061|       secondLine: t.subtype.subtypes.neuropathic.treatments.secondLine\n00062|     }\n00063|   },\n00064|   {\n00065|     id: 'hyperadrenergic',\n00066|     name: t.subtype.subtypes.hyperadrenergic.name,\n00067|     description: t.subtype.subtypes.hyperadrenergic.description,\n00068|     icon: Activity,\n00069|     color: 'red',\n00070|     criteria: t.subtype.subtypes.hyperadrenergic.criteria.map((desc: string, index: number) => ({\n00071|       id: ['high_bp', 'anxiety_panic', 'migraine', 'cold_hands', 'norepinephrine_high'][index],\n00072|       description: desc,\n00073|       checked: false\n00074|     })),\n00075|     treatments: {\n00076|       nonPharmacological: t.subtype.subtypes.hyperadrenergic.treatments.nonPharmacological,\n00077|       firstLine: t.subtype.subtypes.hyperadrenergic.treatments.firstLine,\n00078|       secondLine: t.subtype.subtypes.hyperadrenergic.treatments.secondLine\n00079|     }\n00080|   },\n00081|   {\n00082|     id: 'autoimmune',\n00083|     name: t.subtype.subtypes.autoimmune.name,\n00084|     description: t.subtype.subtypes.autoimmune.description,\n00085|     icon: Shield,\n00086|     color: 'green',\n00087|     criteria: t.subtype.subtypes.autoimmune.criteria.map((desc: string, index: number) => ({\n00088|       id: ['autoimmune_history', 'rapid_onset', 'viral_trigger', 'antibodies', 'other_autoimmune'][index],\n00089|       description: desc,\n00090|       checked: false\n00091|     })),\n00092|     treatments: {\n00093|       nonPharmacological: t.subtype.subtypes.autoimmune.treatments.nonPharmacological,\n00094|       firstLine: t.subtype.subtypes.autoimmune.treatments.firstLine,\n00095|       secondLine: t.subtype.subtypes.autoimmune.treatments.secondLine\n00096|     }\n00097|   }\n00098| ]\n00099| \n00100| export default function SubtypeAdvisor() {\n00101|   const { t } = useTranslation()\n00102|   const potsSubtypes = createSubtypes(t)\n00103|   const [subtypeData, setSubtypeData] = useState(potsSubtypes.map(s => ({ ...s })))\n00104|   const [patientAge, setPatientAge] = useState<number | null>(null)\n00105|   const [comorbidities, setComorbidities] = useState<string[]>([])\n00106|   const [isComplete, setIsComplete] = useState(false)\n00107| \n00108|   // Update subtype translations when language changes while preserving checked states\n00109|   useEffect(() => {\n00110|     const newSubtypes = createSubtypes(t)\n00111|     setSubtypeData(prev => \n00112|       newSubtypes.map((newSubtype, index) => ({\n00113|         ...newSubtype,\n00114|         criteria: newSubtype.criteria.map((newCriterion, criterionIndex) => ({\n00115|           ...newCriterion,\n00116|           checked: prev[index]?.criteria[criterionIndex]?.checked || false\n00117|         }))\n00118|       }))\n00119|     )\n00120|   }, [t])\n00121| \n00122|   const handleCriteriaChange = (subtypeId: string, criteriaId: string, checked: boolean) => {\n00123|     setSubtypeData(prev => prev.map(subtype => \n00124|       subtype.id === subtypeId \n00125|         ? {\n00126|             ...subtype,\n00127|             criteria: subtype.criteria.map(c => \n00128|               c.id === criteriaId ? { ...c, checked } : c\n00129|             )\n00130|           }\n00131|         : subtype\n00132|     ))\n00133|   }\n00134| \n00135|   const calculateSubtypeScores = () => {\n00136|     return subtypeData.map(subtype => {\n00137|       const score = subtype.criteria.filter(c => c.checked).length\n00138|       const maxScore = subtype.criteria.length\n00139|       const percentage = (score / maxScore) * 100\n00140|       \n00141|       return {\n00142|         ...subtype,\n00143|         score,\n00144|         maxScore,\n00145|         percentage: Math.round(percentage),\n00146|         likelihood: percentage >= 60 ? 'high' : percentage >= 40 ? 'medium' : 'low'\n00147|       }\n00148|     }).sort((a, b) => b.percentage - a.percentage)\n00149|   }\n00150| \n00151|   const generateTreatmentPlan = () => {\n00152|     const scores = calculateSubtypeScores()\n00153|     const primarySubtype = scores[0]\n00154|     const secondarySubtypes = scores.filter(s => s.percentage >= 40 && s.id !== primarySubtype.id)\n00155|     \n00156|     let plan = `${t.subtype.title}\\n`\n00157|     plan += \"=============================\\n\\n\"\n00158|     \n00159|     plan += `${t.subtype.results.analysisHeader}:\\n`\n00160|     plan += `${t.subtype.results.primary}: ${primarySubtype.name} (${primarySubtype.percentage}% ${t.subtype.results.likelihood})\\n`\n00161|     if (secondarySubtypes.length > 0) {\n00162|       plan += `${t.subtype.results.secondaryConsiderations}:\\n`\n00163|       secondarySubtypes.forEach(s => {\n00164|         plan += `  • ${s.name} (${s.percentage}% ${t.subtype.results.likelihood})\\n`\n00165|       })\n00166|     }\n00167|     plan += \"\\n\"\n00168|     \n00169|     plan += `${t.common.recommendations.toUpperCase()}:\\n\\n`\n00170|     plan += `${t.subtype.results.nonPharmacological}:\\n`\n00171|     primarySubtype.treatments.nonPharmacological.forEach(treatment => {\n00172|       plan += `  • ${treatment}\\n`\n00173|     })\n00174|     plan += \"\\n\"\n00175|     \n00176|     plan += `${t.subtype.results.firstLineRx}:\\n`\n00177|     primarySubtype.treatments.firstLine.forEach(treatment => {\n00178|       plan += `  • ${treatment}\\n`\n00179|     })\n00180|     plan += \"\\n\"\n00181|     \n00182|     plan += `${t.subtype.results.secondLineOptions}:\\n`\n00183|     primarySubtype.treatments.secondLine.forEach(treatment => {\n00184|       plan += `  • ${treatment}\\n`\n00185|     })\n00186|     \n00187|     return plan\n00188|   }\n00189| \n00190|   if (isComplete) {\n00191|     const scores = calculateSubtypeScores()\n00192|     const primarySubtype = scores[0]\n00193|     const secondarySubtypes = scores.filter(s => s.percentage >= 40 && s.id !== primarySubtype.id)\n00194|     \n00195|     return (\n00196|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00197|         <div className=\"container mx-auto px-4 max-w-5xl\">\n00198|           <Card>\n00199|             <CardHeader className=\"text-center\">\n00200|                 <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00201|                 <Users className=\"h-6 w-6 text-blue-600\" />\n00202|                 {t.subtype.results.complete}\n00203|               </CardTitle>\n00204|               <CardDescription>\n00205|                 {t.subtype.results.description}\n00206|               </CardDescription>\n00207|             </CardHeader>\n00208|             <CardContent className=\"space-y-6\">\n00209|               <div className=\"text-center\">\n00210|                 <Badge className={`px-4 py-2 text-lg bg-${primarySubtype.color}-100 text-${primarySubtype.color}-800`}>\n00211|                   {t.subtype.results.primary}: {primarySubtype.name}\n00212|                 </Badge>\n00213|                 <p className=\"text-sm text-gray-600 mt-2\">\n00214|                   {primarySubtype.percentage}% {t.subtype.results.likelihood} ({primarySubtype.score}/{primarySubtype.maxScore} {t.common.criteria})\n00215|                 </p>\n00216|               </div>\n00217| \n00218|               <div className=\"grid md:grid-cols-2 gap-6\">\n00219|                 <Card className={`border-${primarySubtype.color}-200`}>\n00220|                   <CardHeader className=\"pb-3\">\n00221|                     <CardTitle className={`text-lg text-${primarySubtype.color}-800 flex items-center gap-2`}>\n00222|                       <primarySubtype.icon className=\"h-5 w-5\" />\n00223|                       {primarySubtype.name}\n00224|                     </CardTitle>\n00225|                     <CardDescription>{primarySubtype.description}</CardDescription>\n00226|                   </CardHeader>\n00227|                   <CardContent>\n00228|                     <div className=\"space-y-2\">\n00229|                       <h4 className=\"font-semibold text-sm\">{t.subtype.results.criteriaMetTitle}:</h4>\n00230|                       {primarySubtype.criteria.filter(c => c.checked).map((criterion, index) => (\n00231|                         <div key={index} className=\"text-sm flex items-center gap-2\">\n00232|                           <span className=\"text-green-600\">✓</span>\n00233|                           {criterion.description}\n00234|                         </div>\n00235|                       ))}\n00236|                     </div>\n00237|                   </CardContent>\n00238|                 </Card>\n00239| \n00240|                 <div className=\"space-y-4\">\n00241|                   <h3 className=\"font-semibold text-lg\">{t.subtype.results.allSubtypeScores}</h3>\n00242|                   {scores.map((subtype) => (\n00243|                     <div key={subtype.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n00244|                       <div className=\"flex items-center gap-2\">\n00245|                         <subtype.icon className=\"h-4 w-4\" />\n00246|                         <span className=\"text-sm font-medium\">{subtype.name}</span>\n00247|                       </div>\n00248|                       <div className=\"flex items-center gap-2\">\n00249|                         <Badge variant={subtype.likelihood === 'high' ? 'default' : 'secondary'} className=\"text-xs\">\n00250|                           {subtype.percentage}%\n00251|                         </Badge>\n00252|                         <span className=\"text-xs text-gray-600\">\n00253|                           {subtype.score}/{subtype.maxScore}\n00254|                         </span>\n00255|                       </div>\n00256|                     </div>\n00257|                   ))}\n00258|                 </div>\n00259|               </div>\n00260| \n00261|               <div className=\"grid md:grid-cols-3 gap-4\">\n00262|                 <Card className=\"border-green-200 bg-green-50\">\n00263|                   <CardHeader className=\"pb-3\">\n00264|                     <CardTitle className=\"text-lg text-green-800 flex items-center gap-2\">\n00265|                       <Activity className=\"h-5 w-5\" />\n00266|                       {t.subtype.results.nonPharmacological}\n00267|                     </CardTitle>\n00268|                   </CardHeader>\n00269|                   <CardContent>\n00270|                     <ul className=\"space-y-2 text-sm\">\n00271|                       {primarySubtype.treatments.nonPharmacological.map((treatment, index) => (\n00272|                         <li key={index} className=\"flex items-start gap-2\">\n00273|                           <span className=\"text-green-600 mt-1\">•</span>\n00274|                           {treatment}\n00275|                         </li>\n00276|                       ))}\n00277|                     </ul>\n00278|                   </CardContent>\n00279|                 </Card>\n00280| \n00281|                 <Card className=\"border-blue-200 bg-blue-50\">\n00282|                   <CardHeader className=\"pb-3\">\n00283|                     <CardTitle className=\"text-lg text-blue-800 flex items-center gap-2\">\n00284|                       <Pill className=\"h-5 w-5\" />\n00285|                       {t.subtype.results.firstLineRx}\n00286|                     </CardTitle>\n00287|                   </CardHeader>\n00288|                   <CardContent>\n00289|                     <ul className=\"space-y-2 text-sm\">\n00290|                       {primarySubtype.treatments.firstLine.map((treatment, index) => (\n00291|                         <li key={index} className=\"flex items-start gap-2\">\n00292|                           <span className=\"text-blue-600 mt-1\">•</span>\n00293|                           {treatment}\n00294|                         </li>\n00295|                       ))}\n00296|                     </ul>\n00297|                   </CardContent>\n00298|                 </Card>\n00299| \n00300|                 <Card className=\"border-purple-200 bg-purple-50\">\n00301|                   <CardHeader className=\"pb-3\">\n00302|                     <CardTitle className=\"text-lg text-purple-800 flex items-center gap-2\">\n00303|                       <Heart className=\"h-5 w-5\" />\n00304|                       {t.subtype.results.secondLineOptions}\n00305|                     </CardTitle>\n00306|                   </CardHeader>\n00307|                   <CardContent>\n00308|                     <ul className=\"space-y-2 text-sm\">\n00309|                       {primarySubtype.treatments.secondLine.map((treatment, index) => (\n00310|                         <li key={index} className=\"flex items-start gap-2\">\n00311|                           <span className=\"text-purple-600 mt-1\">•</span>\n00312|                           {treatment}\n00313|                         </li>\n00314|                       ))}\n00315|                     </ul>\n00316|                   </CardContent>\n00317|                 </Card>\n00318|               </div>\n00319| \n00320|               {secondarySubtypes.length > 0 && (\n00321|                 <Alert className=\"border-yellow-200 bg-yellow-50\">\n00322|                   <Shield className=\"h-4 w-4 text-yellow-600\" />\n00323|                   <AlertDescription className=\"text-yellow-800\">\n00324|                     <strong>{t.subtype.results.mixedSubtype}</strong> {secondarySubtypes.map(s => s.name).join(t.subtype.results.and)}.\n00325|                   </AlertDescription>\n00326|                 </Alert>\n00327|               )}\n00328| \n00329|               <div className=\"bg-gray-50 p-4 rounded-lg\">\n00330|                 <h4 className=\"font-semibold mb-2\">{t.subtype.results.clinicalPearls}</h4>\n00331|                 <div className=\"text-sm space-y-2\">\n00332|                   {t.subtype.results.pearls.map((pearl, index) => (\n00333|                     <p key={index}>• {pearl}</p>\n00334|                   ))}\n00335|                 </div>\n00336|               </div>\n00337| \n00338|               <div className=\"flex gap-4 justify-center\">\n00339|                 <Button onClick={() => {\n00340|                   const newSubtypes = createSubtypes(t)\n00341|                   setSubtypeData(newSubtypes.map(s => ({ ...s })))\n00342|                   setIsComplete(false)\n00343|                 }} variant=\"outline\">\n00344|                   {t.subtype.results.reassess}\n00345|                 </Button>\n00346|                 <Button onClick={() => {\n00347|                   const plan = generateTreatmentPlan()\n00348|                   const blob = new Blob([plan], { type: 'text/plain' })\n00349|                   const url = URL.createObjectURL(blob)\n00350|                   const a = document.createElement('a')\n00351|                   a.href = url\n00352|                   a.download = 'pots-treatment-plan.txt'\n00353|                   a.click()\n00354|                   URL.revokeObjectURL(url)\n00355|                 }} className=\"flex items-center gap-2\">\n00356|                   <Download className=\"h-4 w-4\" />\n00357|                   {t.subtype.results.downloadPlan}\n00358|                 </Button>\n00359|               </div>\n00360|             </CardContent>\n00361|           </Card>\n00362|         </div>\n00363|       </div>\n00364|     )\n00365|   }\n00366| \n00367|   return (\n00368|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00369|       <div className=\"container mx-auto px-4 max-w-5xl\">\n00370|         <div className=\"mb-6\">\n00371|           \n00372|           <div className=\"flex items-center gap-4 mb-4\">\n00373|             <Users className=\"h-5 w-5 text-blue-600\" />\n00374|             <div>\n00375|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.subtype.title}</h1>\n00376|               <p className=\"text-gray-600\">{t.subtype.description}</p>\n00377|             </div>\n00378|           </div>\n00379|         </div>\n00380| \n00381|         <div className=\"space-y-6\">\n00382|           <Card>\n00383|             <CardHeader>\n00384|               <CardTitle>{t.subtype.patientInfo.title}</CardTitle>\n00385|               <CardDescription>{t.subtype.patientInfo.description}</CardDescription>\n00386|             </CardHeader>\n00387|             <CardContent>\n00388|               <div className=\"grid md:grid-cols-2 gap-4\">\n00389|                 <div>\n00390|                   <Label htmlFor=\"age\">{t.common.age}</Label>\n00391|                   <Input\n00392|                     id=\"age\"\n00393|                     type=\"number\"\n00394|                     placeholder=\"25\"\n00395|                     value={patientAge || ''}\n00396|                     onChange={(e) => setPatientAge(parseInt(e.target.value) || null)}\n00397|                   />\n00398|                 </div>\n00399|                 <div>\n00400|                   <Label>{t.subtype.patientInfo.comorbidities}</Label>\n00401|                   <div className=\"flex gap-4 mt-2\">\n00402|                     {t.subtype.patientInfo.comorbidityOptions.map((condition, index) => (\n00403|                       <div key={index} className=\"flex items-center space-x-2\">\n00404|                         <Checkbox\n00405|                           id={`comorbidity-${index}`}\n00406|                           checked={comorbidities.includes(condition)}\n00407|                           onCheckedChange={(checked) => {\n00408|                             if (checked) {\n00409|                               setComorbidities(prev => [...prev, condition])\n00410|                             } else {\n00411|                               setComorbidities(prev => prev.filter(c => c !== condition))\n00412|                             }\n00413|                           }}\n00414|                         />\n00415|                         <Label htmlFor={`comorbidity-${index}`} className=\"text-sm\">{condition}</Label>\n00416|                       </div>\n00417|                     ))}\n00418|                   </div>\n00419|                 </div>\n00420|               </div>\n00421|             </CardContent>\n00422|           </Card>\n00423| \n00424|           {subtypeData.map((subtype) => (\n00425|             <Card key={subtype.id} className={`border-${subtype.color}-200`}>\n00426|               <CardHeader>\n00427|                 <CardTitle className={`text-lg text-${subtype.color}-800 flex items-center gap-2`}>\n00428|                   <subtype.icon className=\"h-5 w-5\" />\n00429|                   {subtype.name}\n00430|                 </CardTitle>\n00431|                 <CardDescription>{subtype.description}</CardDescription>\n00432|               </CardHeader>\n00433|               <CardContent>\n00434|                 <div className=\"space-y-3\">\n00435|                   {subtype.criteria.map((criterion) => (\n00436|                     <div key={criterion.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00437|                       <Checkbox\n00438|                         id={`${subtype.id}-${criterion.id}`}\n00439|                         checked={criterion.checked}\n00440|                         onCheckedChange={(checked) => handleCriteriaChange(subtype.id, criterion.id, !!checked)}\n00441|                       />\n00442|                       <Label htmlFor={`${subtype.id}-${criterion.id}`} className=\"cursor-pointer text-sm flex-1\">\n00443|                         {criterion.description}\n00444|                       </Label>\n00445|                     </div>\n00446|                   ))}\n00447|                 </div>\n00448|                 \n00449|                 <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n00450|                   <div className=\"text-sm text-gray-600\">\n00451|                     <strong>{t.common.score}:</strong> {subtype.criteria.filter(c => c.checked).length}/{subtype.criteria.length} {t.common.criteria} {t.common.met.toLowerCase()}\n00452|                   </div>\n00453|                 </div>\n00454|               </CardContent>\n00455|             </Card>\n00456|           ))}\n00457| \n00458|           <div className=\"flex justify-center\">\n00459|             <Button onClick={() => setIsComplete(true)} size=\"lg\" className=\"px-8\">\n00460|               <Pill className=\"h-4 w-4 mr-2\" />\n00461|               {t.common.recommendations}\n00462|             </Button>\n00463|           </div>\n00464|         </div>\n00465|       </div>\n00466|     </div>\n00467|   )\n00468| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { ArrowLeft, Users, Pill, Heart, Droplets, Activity, Brain, Shield, Download } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface POTSSubtype {\n  id: string\n  name: string\n  description: string\n  icon: any\n  color: string"
    },
    "title": "app/subtype-advisor/page.tsx",
    "time": {
      "start": 1758141829581,
      "end": 1758141829593
    }
  }
}