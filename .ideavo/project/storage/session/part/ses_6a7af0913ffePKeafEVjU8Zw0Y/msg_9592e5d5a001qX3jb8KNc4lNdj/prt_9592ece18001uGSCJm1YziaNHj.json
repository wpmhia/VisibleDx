{
  "id": "prt_9592ece18001uGSCJm1YziaNHj",
  "messageID": "msg_9592e5d5a001qX3jb8KNc4lNdj",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01JRzxQV48egjTsdZohoH3Fw",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/criteria-engine/page.tsx",
      "offset": 0,
      "limit": 80
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Checkbox } from '@/components/ui/checkbox'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { Alert, AlertDescription } from '@/components/ui/alert'\n00009| import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n00010| import { Label } from '@/components/ui/label'\n00011| import { BarChart3, CheckCircle, AlertTriangle, FileText, Download } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| import { useTranslation } from '@/lib/language-context'\n00014| \n00015| interface DiagnosticCriteria {\n00016|   id: string\n00017|   condition: string\n00018|   met: boolean\n00019|   criteria: { id: string; description: string; met: boolean }[]\n00020|   icdCode: string\n00021|   confidence: 'high' | 'medium' | 'low'\n00022| }\n00023| \n00024| // Criteria will be generated from translations\n00025| \n00026| export default function CriteriaEngine() {\n00027|   const { t } = useTranslation()\n00028|   \n00029|   const getMECFSCriteria = () => t.criteria.mecfs.criteria.map((desc, index) => ({\n00030|     id: ['fatigue', 'pem', 'sleep', 'cognitive', 'orthostatic'][index],\n00031|     description: desc,\n00032|     met: false\n00033|   }))\n00034|   \n00035|   const getLongCovidCriteria = () => t.criteria.longCovid.criteria.map((desc, index) => ({\n00036|     id: ['covid_history', 'duration', 'multisystem', 'unexplained'][index],\n00037|     description: desc,\n00038|     met: false\n00039|   }))\n00040|   \n00041|   const getPOTSCriteria = () => t.criteria.pots.criteria.map((desc, index) => ({\n00042|     id: ['hr_increase', 'sustained', 'symptoms', 'duration_pots', 'no_oh'][index],\n00043|     description: desc,\n00044|     met: false\n00045|   }))\n00046| \n00047|   const [mecfsChecked, setMecfsChecked] = useState(() => getMECFSCriteria())\n00048|   const [longCovidChecked, setLongCovidChecked] = useState(() => getLongCovidCriteria())\n00049|   const [potsChecked, setPotsChecked] = useState(() => getPOTSCriteria())\n00050|   const [covidTiming, setCovidTiming] = useState<string>('')\n00051|   const [isComplete, setIsComplete] = useState(false)\n00052| \n00053|   const handleMECFSChange = (id: string, checked: boolean) => {\n00054|     setMecfsChecked(prev => prev.map(item => \n00055|       item.id === id ? { ...item, met: checked } : item\n00056|     ))\n00057|   }\n00058| \n00059|   const handleLongCovidChange = (id: string, checked: boolean) => {\n00060|     setLongCovidChecked(prev => prev.map(item => \n00061|       item.id === id ? { ...item, met: checked } : item\n00062|     ))\n00063|   }\n00064| \n00065|   const handlePOTSChange = (id: string, checked: boolean) => {\n00066|     setPotsChecked(prev => prev.map(item => \n00067|       item.id === id ? { ...item, met: checked } : item\n00068|     ))\n00069|   }\n00070| \n00071|   const calculateDiagnoses = (): DiagnosticCriteria[] => {\n00072|     const diagnoses: DiagnosticCriteria[] = []\n00073| \n00074|     // ME/CFS Diagnosis (requires fatigue, PEM, sleep, and either cognitive OR orthostatic)\n00075|     const mecfsCore = mecfsChecked.filter(c => ['fatigue', 'pem', 'sleep'].includes(c.id) && c.met).length\n00076|     const mecfsAdditional = mecfsChecked.filter(c => ['cognitive', 'orthostatic'].includes(c.id) && c.met).length\n00077|     const mecfsMet = mecfsCore === 3 && mecfsAdditional >= 1\n00078|     \n00079|     diagnoses.push({\n00080|       id: 'mecfs',\n\n(File has more lines. Use 'offset' parameter to read beyond line 80)\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { Label } from '@/components/ui/label'\nimport { BarChart3, CheckCircle, AlertTriangle, FileText, Download } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface DiagnosticCriteria {\n  id: string\n  condition: string\n  met: boolean\n  criteria: { id: string; description: string; met: boolean }[]\n  icdCode: string"
    },
    "title": "app/criteria-engine/page.tsx",
    "time": {
      "start": 1758137864527,
      "end": 1758137864529
    }
  }
}