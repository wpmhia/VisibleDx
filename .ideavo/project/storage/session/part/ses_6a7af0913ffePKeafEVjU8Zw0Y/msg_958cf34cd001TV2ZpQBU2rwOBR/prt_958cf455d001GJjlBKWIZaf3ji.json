{
  "id": "prt_958cf455d001GJjlBKWIZaf3ji",
  "messageID": "msg_958cf34cd001TV2ZpQBU2rwOBR",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01CtEuBRx96GmLNpyUCCry9K",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/new-patient/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Input } from '@/components/ui/input'\n00007| import { Label } from '@/components/ui/label'\n00008| import { Progress } from '@/components/ui/progress'\n00009| import { Badge } from '@/components/ui/badge'\n00010| import { Alert, AlertDescription } from '@/components/ui/alert'\n00011| import { Checkbox } from '@/components/ui/checkbox'\n00012| import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n00013| import { ArrowLeft, ArrowRight, User, ClipboardList, FileText, Download, CheckCircle, AlertTriangle, Activity, Heart, Clock, BarChart3 } from 'lucide-react'\n00014| import Link from 'next/link'\n00015| import { useTranslation } from '@/lib/language-context'\n00016| \n00017| interface PatientData {\n00018|   demographics: {\n00019|     age: number | null\n00020|     gender: string\n00021|     clinicianName: string\n00022|     patientId: string\n00023|   }\n00024|   quickScreen: {\n00025|     answers: Record<number, boolean>\n00026|     score: number\n00027|     riskLevel: string\n00028|   }\n00029|   redFlags: {\n00030|     symptoms: string[]\n00031|     labsRecommended: string[]\n00032|     priority: string\n00033|   }\n00034|   standTest: {\n00035|     performed: boolean\n00036|     baselineHR: number | null\n00037|     peakHR: number | null\n00038|     sustainedHR: number | null\n00039|     meetsPOTS: boolean\n00040|   }\n00041|   pemQuest: {\n00042|     answers: Record<string, string>\n00043|     score: number\n00044|     severity: string\n00045|     present: boolean\n00046|   }\n00047|   diagnoses: {\n00048|     mecfs: { met: boolean; confidence: string }\n00049|     longCovid: { met: boolean; confidence: string }\n00050|     pots: { met: boolean; confidence: string; subtype?: string }\n00051|   }\n00052| }\n00053| \n00054| const initialPatientData: PatientData = {\n00055|   demographics: {\n00056|     age: null,\n00057|     gender: '',\n00058|     clinicianName: '',\n00059|     patientId: ''\n00060|   },\n00061|   quickScreen: {\n00062|     answers: {},\n00063|     score: 0,\n00064|     riskLevel: 'low'\n00065|   },\n00066|   redFlags: {\n00067|     symptoms: [],\n00068|     labsRecommended: [],\n00069|     priority: 'routine'\n00070|   },\n00071|   standTest: {\n00072|     performed: false,\n00073|     baselineHR: null,\n00074|     peakHR: null,\n00075|     sustainedHR: null,\n00076|     meetsPOTS: false\n00077|   },\n00078|   pemQuest: {\n00079|     answers: {},\n00080|     score: 0,\n00081|     severity: 'none',\n00082|     present: false\n00083|   },\n00084|   diagnoses: {\n00085|     mecfs: { met: false, confidence: 'low' },\n00086|     longCovid: { met: false, confidence: 'low' },\n00087|     pots: { met: false, confidence: 'low' }\n00088|   }\n00089| }\n00090| \n00091| type WorkflowStep = 'demographics' | 'quickScreen' | 'redFlags' | 'standTest' | 'pemQuest' | 'criteria' | 'summary'\n00092| \n00093| const createScreeningQuestions = (t: any) => t.quickScreen.questions.map((question: string, index: number) => ({\n00094|   id: index + 1,\n00095|   question,\n00096|   category: ['core', 'pem', 'core', 'core', 'cardiovascular', 'orthostatic', 'history', 'duration', 'pain', 'neurological', 'autonomic', 'gi', 'respiratory', 'functional', 'sensory', 'functional'][index]\n00097| }))\n00098| \n00099| const createRedFlagSymptoms = (t: any) => t.redFlag.symptoms.list.map((symptom: string, index: number) => ({\n00100|   id: ['fever', 'weight_loss', 'chest_pain', 'dyspnea', 'neurological', 'bleeding'][index],\n00101|   symptom,\n00102|   priority: 'high'\n00103| }))\n00104| \n00105| const createPemQuestions = (t: any) => [\n00106|   {\n00107|     id: 'frequency',\n00108|     question: t.pem.questions.frequency.question,\n00109|     options: t.pem.questions.frequency.options.map((label: string, index: number) => ({\n00110|       value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n00111|       label,\n00112|       score: index\n00113|     }))\n00114|   },\n00115|   {\n00116|     id: 'severity',\n00117|     question: t.pem.questions.severity.question,\n00118|     options: t.pem.questions.severity.options.map((label: string, index: number) => ({\n00119|       value: ['none', 'mild', 'moderate', 'severe', 'very_severe'][index],\n00120|       label,\n00121|       score: index\n00122|     }))\n00123|   },\n00124|   {\n00125|     id: 'recovery_time',\n00126|     question: t.pem.questions.recoveryTime.question,\n00127|     options: t.pem.questions.recoveryTime.options.map((label: string, index: number) => ({\n00128|       value: ['no_recovery_needed', 'hours', 'one_day', 'several_days', 'week_or_more'][index],\n00129|       label,\n00130|       score: index\n00131|     }))\n00132|   }\n00133| ]\n00134| \n00135| export default function NewPatientWorkflow() {\n00136|   const { t } = useTranslation()\n00137|   const [currentStep, setCurrentStep] = useState<WorkflowStep>('demographics')\n00138|   const [patientData, setPatientData] = useState<PatientData>(initialPatientData)\n00139|   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n00140|   const [isComplete, setIsComplete] = useState(false)\n00141|   \n00142|   const screeningQuestions = createScreeningQuestions(t)\n00143|   const redFlagSymptoms = createRedFlagSymptoms(t)\n00144|   const pemQuestions = createPemQuestions(t)\n00145| \n00146|   const getStepProgress = () => {\n00147|     const steps: WorkflowStep[] = ['demographics', 'quickScreen', 'redFlags', 'standTest', 'pemQuest', 'criteria', 'summary']\n00148|     const currentIndex = steps.indexOf(currentStep)\n00149|     return ((currentIndex + 1) / steps.length) * 100\n00150|   }\n00151| \n00152|   const calculateQuickScreenRisk = (answers: Record<number, boolean>) => {\n00153|     const totalYes = Object.values(answers).filter(Boolean).length\n00154|     const coreSymptoms = [1, 3, 4].filter(id => answers[id]).length\n00155|     const pemPresent = answers[2]\n00156|     const chronicity = answers[8]\n00157|     \n00158|     let riskLevel = 'low'\n00159|     if (totalYes >= 8 && coreSymptoms >= 2 && pemPresent && chronicity) {\n00160|       riskLevel = 'high'\n00161|     } else if (totalYes >= 5 && (coreSymptoms >= 2 || pemPresent)) {\n00162|       riskLevel = 'medium'\n00163|     }\n00164|     \n00165|     return { score: totalYes, riskLevel }\n00166|   }\n00167| \n00168|   const calculatePEMScore = (answers: Record<string, string>) => {\n00169|     const totalScore = pemQuestions.reduce((sum, question) => {\n00170|       const answer = answers[question.id]\n00171|       const option = question.options.find(opt => opt.value === answer)\n00172|       return sum + (option?.score || 0)\n00173|     }, 0)\n00174| \n00175|     const maxScore = pemQuestions.reduce((sum, question) => {\n00176|       return sum + Math.max(...question.options.map(opt => opt.score))\n00177|     }, 0)\n00178| \n00179|     const percentage = (totalScore / maxScore) * 100\n00180|     \n00181|     let severity = 'none'\n00182|     if (percentage >= 75) severity = 'severe'\n00183|     else if (percentage >= 50) severity = 'moderate'\n00184|     else if (percentage >= 25) severity = 'mild'\n00185| \n00186|     return { score: totalScore, severity, present: percentage >= 25 }\n00187|   }\n00188| \n00189|   const determineNextStep = () => {\n00190|     switch (currentStep) {\n00191|       case 'demographics':\n00192|         return 'quickScreen'\n00193|       case 'quickScreen':\n00194|         return patientData.quickScreen.riskLevel !== 'low' ? 'redFlags' : 'standTest'\n00195|       case 'redFlags':\n00196|         return patientData.redFlags.priority === 'urgent' ? 'summary' : 'standTest'\n00197|       case 'standTest':\n00198|         return 'pemQuest'\n00199|       case 'pemQuest':\n00200|         return 'criteria'\n00201|       case 'criteria':\n00202|         return 'summary'\n00203|       default:\n00204|         return 'summary'\n00205|     }\n00206|   }\n00207| \n00208|   const generateSOAPNote = () => {\n00209|     const { demographics, quickScreen, redFlags, standTest, pemQuest, diagnoses } = patientData\n00210|     const currentDate = new Date().toLocaleDateString()\n00211|     \n00212|     let soap = `CLINICAL ASSESSMENT - AutoDx Report\\n`\n00213|     soap += `=========================================\\n\\n`\n00214|     soap += `Date: ${currentDate}\\n`\n00215|     soap += `Clinician: ${demographics.clinicianName || 'Not specified'}\\n`\n00216|     soap += `Patient ID: ${demographics.patientId || 'Not specified'}\\n`\n00217|     soap += `Age: ${demographics.age || 'Not specified'} | Gender: ${demographics.gender || 'Not specified'}\\n\\n`\n00218| \n00219|     soap += `SUBJECTIVE:\\n`\n00220|     soap += `Chief Complaint: Chronic fatigue, post-exertional symptoms, and orthostatic intolerance\\n`\n00221|     soap += `Quick-Screen Risk Assessment: ${quickScreen.riskLevel.toUpperCase()} (${quickScreen.score}/16 positive responses)\\n`\n00222|     \n00223|     if (redFlags.symptoms.length > 0) {\n00224|       soap += `Red Flag Symptoms: ${redFlags.symptoms.join(', ')}\\n`\n00225|     } else {\n00226|       soap += `Red Flag Symptoms: None identified\\n`\n00227|     }\n00228|     \n00229|     soap += `Post-Exertional Malaise: ${pemQuest.present ? `Present (${pemQuest.severity} severity)` : 'Not present'}\\n`\n00230|     soap += `Symptom Duration: ${patientData.quickScreen.answers[8] ? '≥3 months' : '<3 months or unclear'}\\n\\n`\n00231| \n00232|     soap += `OBJECTIVE:\\n`\n00233|     if (standTest.performed) {\n00234|       soap += `Orthostatic Vital Signs (10-min stand test):\\n`\n00235|       soap += `  - Baseline HR: ${standTest.baselineHR || 'Not recorded'} bpm\\n`\n00236|       soap += `  - Peak Standing HR: ${standTest.peakHR || 'Not recorded'} bpm\\n`\n00237|       soap += `  - HR Increase: ${standTest.peakHR && standTest.baselineHR ? standTest.peakHR - standTest.baselineHR : 'Cannot calculate'} bpm\\n`\n00238|       soap += `  - POTS Criteria: ${standTest.meetsPOTS ? 'MET (≥30 bpm increase)' : 'Not met'}\\n`\n00239|     } else {\n00240|       soap += `Orthostatic Testing: Not performed\\n`\n00241|     }\n00242|     \n00243|     if (redFlags.labsRecommended.length > 0) {\n00244|       soap += `Recommended Laboratory Studies: ${redFlags.labsRecommended.join(', ')}\\n`\n00245|     }\n00246|     soap += `\\n`\n00247| \n00248|     soap += `ASSESSMENT:\\n`\n00249|     const positiveDiagnoses: string[] = []\n00250|     if (diagnoses.mecfs.met) positiveDiagnoses.push(`ME/CFS (G93.32) - ${diagnoses.mecfs.confidence} confidence`)\n00251|     if (diagnoses.longCovid.met) positiveDiagnoses.push(`Long COVID (U09.9) - ${diagnoses.longCovid.confidence} confidence`)\n00252|     if (diagnoses.pots.met) positiveDiagnoses.push(`POTS (I47.1) - ${diagnoses.pots.confidence} confidence`)\n00253|     \n00254|     if (positiveDiagnoses.length > 0) {\n00255|       soap += `Diagnoses meeting criteria:\\n`\n00256|       positiveDiagnoses.forEach(dx => soap += `  • ${dx}\\n`)\n00257|     } else {\n00258|       soap += `No definitive diagnostic criteria met at this time\\n`\n00259|       soap += `Consider: Alternative diagnoses, subclinical presentations, symptom monitoring\\n`\n00260|     }\n00261|     soap += `\\n`\n00262| \n00263|     soap += `PLAN:\\n`\n00264|     \n00265|     if (redFlags.priority === 'urgent') {\n00266|       soap += `URGENT: Complete red flag workup before proceeding with chronic illness evaluation\\n`\n00267|       soap += `  - Expedite recommended laboratory studies\\n`\n00268|       soap += `  - Consider same-day or next-day specialist consultation\\n\\n`\n00269|     }\n00270|     \n00271|     if (diagnoses.mecfs.met) {\n00272|       soap += `ME/CFS Management:\\n`\n00273|       soap += `  • Activity pacing and energy management education\\n`\n00274|       soap += `  • Avoid graded exercise therapy (contraindicated)\\n`\n00275|       soap += `  • Symptom-directed treatments (sleep, pain, orthostatic symptoms)\\n`\n00276|       soap += `  • ME/CFS specialist referral if available\\n`\n00277|       soap += `  • Disability evaluation if functional capacity severely impaired\\n\\n`\n00278|     }\n00279|     \n00280|     if (diagnoses.longCovid.met) {\n00281|       soap += `Long COVID Management:\\n`\n00282|       soap += `  • Multidisciplinary symptom management approach\\n`\n00283|       soap += `  • Long COVID clinic referral if available\\n`\n00284|       soap += `  • Monitor for improvement over time\\n`\n00285|       soap += `  • Address individual symptoms (fatigue, cognitive, respiratory)\\n\\n`\n00286|     }\n00287|     \n00288|     if (diagnoses.pots.met) {\n00289|       soap += `POTS Management:\\n`\n00290|       soap += `  • Non-pharmacological: Increase salt (8-10g/day), fluids (2.5-3L/day)\\n`\n00291|       soap += `  • Compression garments (30-40 mmHg)\\n`\n00292|       soap += `  • Consider pharmacological therapy based on subtype\\n`\n00293|       soap += `  • Cardiology or autonomic specialist referral\\n`\n00294|       soap += `  • Gradual exercise reconditioning when appropriate\\n\\n`\n00295|     }\n00296|     \n00297|     soap += `Follow-up:\\n`\n00298|     soap += `  • Reassess in 4-6 weeks or sooner if symptoms worsen\\n`\n00299|     soap += `  • Repeat stand test if POTS suspected but initial test inconclusive\\n`\n00300|     soap += `  • Review laboratory results and adjust treatment accordingly\\n`\n00301|     soap += `  • Patient education materials provided\\n\\n`\n00302|     \n00303|     soap += `Clinical Decision Support provided by AutoDx v1.0\\n`\n00304|     soap += `This assessment is for clinical decision support only and does not replace physician judgment.\\n`\n00305| \n00306|     return soap\n00307|   }\n00308| \n00309|   const handleDemographicsNext = () => {\n00310|     if (patientData.demographics.age && patientData.demographics.gender) {\n00311|       setCurrentStep('quickScreen')\n00312|     }\n00313|   }\n00314| \n00315|   const handleQuickScreenAnswer = (questionId: number, answer: boolean) => {\n00316|     const newAnswers = { ...patientData.quickScreen.answers, [questionId]: answer }\n00317|     const risk = calculateQuickScreenRisk(newAnswers)\n00318|     \n00319|     setPatientData(prev => ({\n00320|       ...prev,\n00321|       quickScreen: {\n00322|         answers: newAnswers,\n00323|         score: risk.score,\n00324|         riskLevel: risk.riskLevel\n00325|       }\n00326|     }))\n00327|   }\n00328| \n00329|   const handlePEMAnswer = (questionId: string, value: string) => {\n00330|     const newAnswers = { ...patientData.pemQuest.answers, [questionId]: value }\n00331|     const pemScore = calculatePEMScore(newAnswers)\n00332|     \n00333|     setPatientData(prev => ({\n00334|       ...prev,\n00335|       pemQuest: {\n00336|         answers: newAnswers,\n00337|         score: pemScore.score,\n00338|         severity: pemScore.severity,\n00339|         present: pemScore.present\n00340|       }\n00341|     }))\n00342|   }\n00343| \n00344|   const finalizeDiagnoses = () => {\n00345|     const { quickScreen, pemQuest, standTest } = patientData\n00346|     \n00347|     // ME/CFS criteria\n00348|     const coreSymptoms = [1, 3, 4].filter(id => quickScreen.answers[id]).length\n00349|     const hasPEM = pemQuest.present\n00350|     const hasOrthostatic = quickScreen.answers[6] || standTest.meetsPOTS\n00351|     const mecfsMet = coreSymptoms >= 3 && hasPEM && hasOrthostatic && quickScreen.answers[8]\n00352|     \n00353|     // Long COVID criteria\n00354|     const hasCovidHistory = quickScreen.answers[7]\n00355|     const hasDuration = quickScreen.answers[8]\n00356|     const hasMultiSystem = quickScreen.score >= 4\n00357|     const longCovidMet = hasCovidHistory && hasDuration && hasMultiSystem\n00358|     \n00359|     // POTS criteria\n00360|     const potsMet = standTest.meetsPOTS && quickScreen.answers[8] && (quickScreen.answers[5] || quickScreen.answers[6])\n00361|     \n00362|     setPatientData(prev => ({\n00363|       ...prev,\n00364|       diagnoses: {\n00365|         mecfs: { \n00366|           met: mecfsMet, \n00367|           confidence: mecfsMet ? (coreSymptoms === 3 && hasPEM ? 'high' : 'medium') : 'low' \n00368|         },\n00369|         longCovid: { \n00370|           met: longCovidMet, \n00371|           confidence: longCovidMet ? 'high' : 'low' \n00372|         },\n00373|         pots: { \n00374|           met: potsMet, \n00375|           confidence: potsMet ? 'high' : 'low' \n00376|         }\n00377|       }\n00378|     }))\n00379|     \n00380|     setCurrentStep('summary')\n00381|     setIsComplete(true)\n00382|   }\n00383| \n00384|   if (isComplete) {\n00385|     const soap = generateSOAPNote()\n00386|     const anyDiagnosis = Object.values(patientData.diagnoses).some(d => d.met)\n00387|     \n00388|     return (\n00389|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00390|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00391|           <Card>\n00392|             <CardHeader className=\"text-center\">\n00393|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00394|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00395|                 {t.newPatient.results.title}\n00396|               </CardTitle>\n00397|               <CardDescription>\n00398|                 {t.newPatient.results.description}\n00399|               </CardDescription>\n00400|             </CardHeader>\n00401|             <CardContent className=\"space-y-6\">\n00402|               <div className=\"grid md:grid-cols-3 gap-4\">\n00403|                 <Card className={`border-2 ${patientData.diagnoses.mecfs.met ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>\n00404|                   <CardContent className=\"pt-4\">\n00405|                     <div className=\"text-center\">\n00406|                       <h3 className=\"font-semibold text-sm\">ME/CFS (G93.32)</h3>\n00407|                       <Badge variant={patientData.diagnoses.mecfs.met ? 'default' : 'secondary'} className=\"mt-2\">\n00408|                         {patientData.diagnoses.mecfs.met ? t.criteria.results.criteriaMet : t.common.notMet}\n00409|                       </Badge>\n00410|                       {patientData.diagnoses.mecfs.met && (\n00411|                         <p className=\"text-xs text-green-700 mt-1\">\n00412|                           {t.common.confidence}: {patientData.diagnoses.mecfs.confidence}\n00413|                         </p>\n00414|                       )}\n00415|                     </div>\n00416|                   </CardContent>\n00417|                 </Card>\n00418| \n00419|                 <Card className={`border-2 ${patientData.diagnoses.longCovid.met ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>\n00420|                   <CardContent className=\"pt-4\">\n00421|                     <div className=\"text-center\">\n00422|                       <h3 className=\"font-semibold text-sm\">Long COVID (U09.9)</h3>\n00423|                       <Badge variant={patientData.diagnoses.longCovid.met ? 'default' : 'secondary'} className=\"mt-2\">\n00424|                         {patientData.diagnoses.longCovid.met ? t.criteria.results.criteriaMet : t.common.notMet}\n00425|                       </Badge>\n00426|                       {patientData.diagnoses.longCovid.met && (\n00427|                         <p className=\"text-xs text-green-700 mt-1\">\n00428|                           {t.common.confidence}: {patientData.diagnoses.longCovid.confidence}\n00429|                         </p>\n00430|                       )}\n00431|                     </div>\n00432|                   </CardContent>\n00433|                 </Card>\n00434| \n00435|                 <Card className={`border-2 ${patientData.diagnoses.pots.met ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>\n00436|                   <CardContent className=\"pt-4\">\n00437|                     <div className=\"text-center\">\n00438|                       <h3 className=\"font-semibold text-sm\">POTS (I47.1)</h3>\n00439|                       <Badge variant={patientData.diagnoses.pots.met ? 'default' : 'secondary'} className=\"mt-2\">\n00440|                         {patientData.diagnoses.pots.met ? t.criteria.results.criteriaMet : t.common.notMet}\n00441|                       </Badge>\n00442|                       {patientData.diagnoses.pots.met && (\n00443|                         <p className=\"text-xs text-green-700 mt-1\">\n00444|                           {t.common.confidence}: {patientData.diagnoses.pots.confidence}\n00445|                         </p>\n00446|                       )}\n00447|                     </div>\n00448|                   </CardContent>\n00449|                 </Card>\n00450|               </div>\n00451| \n00452|               {!anyDiagnosis && (\n00453|                 <Alert>\n00454|                   <AlertTriangle className=\"h-4 w-4\" />\n00455|                   <AlertDescription>\n00456|                     <strong>{t.newPatient.results.noDefinitiveDiagnoses}:</strong> Consider alternative diagnoses, \n00457|                     subclinical presentations, or ongoing symptom monitoring. Some patients may \n00458|                     benefit from symptomatic treatment while monitoring for progression.\n00459|                   </AlertDescription>\n00460|                 </Alert>\n00461|               )}\n00462| \n00463|               <div className=\"bg-blue-50 p-4 rounded-lg\">\n00464|                 <h4 className=\"font-semibold mb-2 text-blue-900\">{t.newPatient.results.keyResults}</h4>\n00465|                 <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n00466|                   <div>\n00467|                     <p><strong>{t.newPatient.results.riskLevel}:</strong> {patientData.quickScreen.riskLevel.toUpperCase()}</p>\n00468|                     <p><strong>{t.newPatient.results.screeningScore}:</strong> {patientData.quickScreen.score}/16</p>\n00469|                     <p><strong>{t.newPatient.results.pemPresent}:</strong> {patientData.pemQuest.present ? t.common.yes : t.common.no}</p>\n00470|                   </div>\n00471|                   <div>\n00472|                     <p><strong>{t.newPatient.results.potsCriteria}:</strong> {patientData.standTest.meetsPOTS ? t.common.met : t.common.notMet}</p>\n00473|                     <p><strong>{t.newPatient.results.redFlags}:</strong> {patientData.redFlags.symptoms.length > 0 ? patientData.redFlags.symptoms.length + ' identified' : t.common.none}</p>\n00474|                     <p><strong>{t.newPatient.results.priority}:</strong> {patientData.redFlags.priority}</p>\n00475|                   </div>\n00476|                 </div>\n00477|               </div>\n00478| \n00479|               <div className=\"flex gap-4 justify-center\">\n00480|                 <Button onClick={() => {\n00481|                   setPatientData(initialPatientData)\n00482|                   setCurrentStep('demographics')\n00483|                   setCurrentQuestionIndex(0)\n00484|                   setIsComplete(false)\n00485|                 }} variant=\"outline\">\n00486|                   {t.newPatient.results.newAssessment}\n00487|                 </Button>\n00488|                 <Button onClick={() => {\n00489|                   const blob = new Blob([soap], { type: 'text/plain' })\n00490|                   const url = URL.createObjectURL(blob)\n00491|                   const a = document.createElement('a')\n00492|                   a.href = url\n00493|                   a.download = `autodx-soap-note-${new Date().toISOString().split('T')[0]}.txt`\n00494|                   a.click()\n00495|                   URL.revokeObjectURL(url)\n00496|                 }} className=\"flex items-center gap-2\">\n00497|                   <Download className=\"h-4 w-4\" />\n00498|                   {t.newPatient.results.downloadSOAP}\n00499|                 </Button>\n00500|               </div>\n00501|             </CardContent>\n00502|           </Card>\n00503|         </div>\n00504|       </div>\n00505|     )\n00506|   }\n00507| \n00508|   // Demographics Step\n00509|   if (currentStep === 'demographics') {\n00510|     return (\n00511|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00512|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00513|           <div className=\"mb-6\">\n00514|             <Link href=\"/\" className=\"inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 mb-4\">\n00515|               <ArrowLeft className=\"h-4 w-4\" />\n00516|               {t.app.backToDashboard}\n00517|             </Link>\n00518|             \n00519|             <div className=\"flex items-center gap-4 mb-4\">\n00520|               <User className=\"h-5 w-5 text-blue-600\" />\n00521|               <div>\n00522|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.newPatient.title}</h1>\n00523|                 <p className=\"text-gray-600\">{t.newPatient.description}</p>\n00524|               </div>\n00525|             </div>\n00526|             \n00527|             <Progress value={getStepProgress()} className=\"h-2\" />\n00528|             <p className=\"text-sm text-gray-600 mt-2\">{t.newPatient.demographics.step}</p>\n00529|           </div>\n00530| \n00531|           <Card>\n00532|             <CardHeader>\n00533|               <CardTitle>{t.newPatient.demographics.title}</CardTitle>\n00534|               <CardDescription>{t.newPatient.demographics.description}</CardDescription>\n00535|             </CardHeader>\n00536|             <CardContent className=\"space-y-4\">\n00537|               <div className=\"grid md:grid-cols-2 gap-4\">\n00538|                 <div>\n00539|                   <Label htmlFor=\"age\">{t.newPatient.demographics.age} *</Label>\n00540|                   <Input\n00541|                     id=\"age\"\n00542|                     type=\"number\"\n00543|                     placeholder=\"25\"\n00544|                     value={patientData.demographics.age || ''}\n00545|                     onChange={(e) => setPatientData(prev => ({\n00546|                       ...prev,\n00547|                       demographics: { ...prev.demographics, age: parseInt(e.target.value) || null }\n00548|                     }))}\n00549|                   />\n00550|                 </div>\n00551|                 <div>\n00552|                   <Label>{t.newPatient.demographics.gender} *</Label>\n00553|                   <RadioGroup \n00554|                     value={patientData.demographics.gender} \n00555|                     onValueChange={(value) => setPatientData(prev => ({\n00556|                       ...prev,\n00557|                       demographics: { ...prev.demographics, gender: value }\n00558|                     }))}\n00559|                     className=\"flex gap-4 mt-2\"\n00560|                   >\n00561|                     <div className=\"flex items-center space-x-2\">\n00562|                       <RadioGroupItem value=\"female\" id=\"female\" />\n00563|                       <Label htmlFor=\"female\">{t.common.female}</Label>\n00564|                     </div>\n00565|                     <div className=\"flex items-center space-x-2\">\n00566|                       <RadioGroupItem value=\"male\" id=\"male\" />\n00567|                       <Label htmlFor=\"male\">{t.common.male}</Label>\n00568|                     </div>\n00569|                     <div className=\"flex items-center space-x-2\">\n00570|                       <RadioGroupItem value=\"other\" id=\"other\" />\n00571|                       <Label htmlFor=\"other\">{t.common.other}</Label>\n00572|                     </div>\n00573|                   </RadioGroup>\n00574|                 </div>\n00575|               </div>\n00576|               \n00577|               <div className=\"grid md:grid-cols-2 gap-4\">\n00578|                 <div>\n00579|                   <Label htmlFor=\"clinician\">{t.newPatient.demographics.clinicianName}</Label>\n00580|                   <Input\n00581|                     id=\"clinician\"\n00582|                     placeholder=\"Dr. Smith\"\n00583|                     value={patientData.demographics.clinicianName}\n00584|                     onChange={(e) => setPatientData(prev => ({\n00585|                       ...prev,\n00586|                       demographics: { ...prev.demographics, clinicianName: e.target.value }\n00587|                     }))}\n00588|                   />\n00589|                 </div>\n00590|                 <div>\n00591|                   <Label htmlFor=\"patientId\">{t.newPatient.demographics.patientId}</Label>\n00592|                   <Input\n00593|                     id=\"patientId\"\n00594|                     placeholder=\"12345\"\n00595|                     value={patientData.demographics.patientId}\n00596|                     onChange={(e) => setPatientData(prev => ({\n00597|                       ...prev,\n00598|                       demographics: { ...prev.demographics, patientId: e.target.value }\n00599|                     }))}\n00600|                   />\n00601|                 </div>\n00602|               </div>\n00603| \n00604|               <div className=\"flex justify-end pt-4\">\n00605|                 <Button \n00606|                   onClick={handleDemographicsNext}\n00607|                   disabled={!patientData.demographics.age || !patientData.demographics.gender}\n00608|                   className=\"flex items-center gap-2\"\n00609|                 >\n00610|                   {t.newPatient.demographics.startAssessment}\n00611|                   <ArrowRight className=\"h-4 w-4\" />\n00612|                 </Button>\n00613|               </div>\n00614|             </CardContent>\n00615|           </Card>\n00616|         </div>\n00617|       </div>\n00618|     )\n00619|   }\n00620| \n00621|   // Quick Screen Step\n00622|   if (currentStep === 'quickScreen') {\n00623|     const currentQuestion = screeningQuestions[currentQuestionIndex]\n00624|     const currentAnswer = patientData.quickScreen.answers[currentQuestion.id]\n00625|     const progress = ((currentQuestionIndex + 1) / screeningQuestions.length) * 100\n00626| \n00627|     return (\n00628|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00629|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00630|           <div className=\"mb-6\">\n00631|             <div className=\"flex items-center gap-4 mb-4\">\n00632|               <Clock className=\"h-5 w-5 text-orange-600\" />\n00633|               <div>\n00634|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.quickScreen.title}</h1>\n00635|                 <p className=\"text-gray-600\">{t.quickScreen.description}</p>\n00636|               </div>\n00637|             </div>\n00638|             \n00639|             <Progress value={getStepProgress()} className=\"h-2 mb-2\" />\n00640|             <Progress value={progress} className=\"h-1\" />\n00641|             <p className=\"text-sm text-gray-600 mt-2\">\n00642|               {t.common.question} {currentQuestionIndex + 1} {t.common.of} {screeningQuestions.length}\n00643|             </p>\n00644|           </div>\n00645| \n00646|           <Card>\n00647|             <CardHeader>\n00648|               <CardTitle className=\"text-lg\">{currentQuestion.question}</CardTitle>\n00649|               <CardDescription>Category: {currentQuestion.category}</CardDescription>\n00650|             </CardHeader>\n00651|             <CardContent>\n00652|               <div className=\"space-y-4\">\n00653|                 <div className=\"flex gap-4 justify-center\">\n00654|                   <Button\n00655|                     onClick={() => handleQuickScreenAnswer(currentQuestion.id, true)}\n00656|                     variant={currentAnswer === true ? \"default\" : \"outline\"}\n00657|                     className=\"flex items-center gap-2 px-8\"\n00658|                   >\n00659|                     {t.common.yes}\n00660|                   </Button>\n00661|                   <Button\n00662|                     onClick={() => handleQuickScreenAnswer(currentQuestion.id, false)}\n00663|                     variant={currentAnswer === false ? \"default\" : \"outline\"}\n00664|                     className=\"flex items-center gap-2 px-8\"\n00665|                   >\n00666|                     {t.common.no}\n00667|                   </Button>\n00668|                 </div>\n00669| \n00670|                 <div className=\"flex justify-between pt-6\">\n00671|                   <Button \n00672|                     onClick={() => setCurrentQuestionIndex(prev => prev - 1)} \n00673|                     disabled={currentQuestionIndex === 0}\n00674|                     variant=\"outline\"\n00675|                   >\n00676|                     {t.common.previous}\n00677|                   </Button>\n00678|                   \n00679|                   <Button \n00680|                     onClick={() => {\n00681|                       if (currentQuestionIndex < screeningQuestions.length - 1) {\n00682|                         setCurrentQuestionIndex(prev => prev + 1)\n00683|                       } else {\n00684|                         setCurrentStep(determineNextStep())\n00685|                       }\n00686|                     }}\n00687|                     disabled={currentAnswer === undefined}\n00688|                   >\n00689|                     {currentQuestionIndex === screeningQuestions.length - 1 ? t.common.continue : t.common.next}\n00690|                   </Button>\n00691|                 </div>\n00692|               </div>\n00693|             </CardContent>\n00694|           </Card>\n00695|         </div>\n00696|       </div>\n00697|     )\n00698|   }\n00699| \n00700|   // Red Flags Step\n00701|   if (currentStep === 'redFlags') {\n00702|     return (\n00703|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00704|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00705|           <div className=\"mb-6\">\n00706|             <div className=\"flex items-center gap-4 mb-4\">\n00707|               <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n00708|               <div>\n00709|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.newPatient.redFlags.title}</h1>\n00710|                 <p className=\"text-gray-600\">{t.newPatient.redFlags.description}</p>\n00711|               </div>\n00712|             </div>\n00713|             <Progress value={getStepProgress()} className=\"h-2\" />\n00714|           </div>\n00715| \n00716|           <Card>\n00717|             <CardHeader>\n00718|               <CardTitle>{t.redFlag.symptoms.title}</CardTitle>\n00719|               <CardDescription>{t.newPatient.redFlags.selectSymptoms}</CardDescription>\n00720|             </CardHeader>\n00721|             <CardContent>\n00722|               <div className=\"space-y-3\">\n00723|                 {redFlagSymptoms.map((flag) => (\n00724|                   <div key={flag.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00725|                     <Checkbox\n00726|                       id={flag.id}\n00727|                       checked={patientData.redFlags.symptoms.includes(flag.id)}\n00728|                       onCheckedChange={(checked) => {\n00729|                         if (checked) {\n00730|                           setPatientData(prev => ({\n00731|                             ...prev,\n00732|                             redFlags: {\n00733|                               ...prev.redFlags,\n00734|                               symptoms: [...prev.redFlags.symptoms, flag.id],\n00735|                               priority: flag.priority === 'high' ? 'urgent' : prev.redFlags.priority\n00736|                             }\n00737|                           }))\n00738|                         } else {\n00739|                           const newSymptoms = patientData.redFlags.symptoms.filter(s => s !== flag.id)\n00740|                           setPatientData(prev => ({\n00741|                             ...prev,\n00742|                             redFlags: {\n00743|                               ...prev.redFlags,\n00744|                               symptoms: newSymptoms,\n00745|                               priority: newSymptoms.some(s => redFlagSymptoms.find(rf => rf.id === s)?.priority === 'high') ? 'urgent' : 'routine'\n00746|                             }\n00747|                           }))\n00748|                         }\n00749|                       }}\n00750|                     />\n00751|                     <Label htmlFor={flag.id} className=\"cursor-pointer text-sm flex-1\">\n00752|                       {flag.symptom}\n00753|                     </Label>\n00754|                   </div>\n00755|                 ))}\n00756|               </div>\n00757|               \n00758|               <div className=\"flex justify-center pt-6\">\n00759|                 <Button onClick={() => setCurrentStep(determineNextStep())}>\n00760|                   {t.newPatient.redFlags.continueAssessment}\n00761|                 </Button>\n00762|               </div>\n00763|             </CardContent>\n00764|           </Card>\n00765|         </div>\n00766|       </div>\n00767|     )\n00768|   }\n00769| \n00770|   // Stand Test Step\n00771|   if (currentStep === 'standTest') {\n00772|     return (\n00773|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00774|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00775|           <div className=\"mb-6\">\n00776|             <div className=\"flex items-center gap-4 mb-4\">\n00777|               <Heart className=\"h-5 w-5 text-red-600\" />\n00778|               <div>\n00779|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.newPatient.standTest.title}</h1>\n00780|                 <p className=\"text-gray-600\">{t.newPatient.standTest.description}</p>\n00781|               </div>\n00782|             </div>\n00783|             <Progress value={getStepProgress()} className=\"h-2\" />\n00784|           </div>\n00785| \n00786|           <Card>\n00787|             <CardHeader>\n00788|               <CardTitle>{t.newPatient.standTest.measurements}</CardTitle>\n00789|               <CardDescription>{t.newPatient.standTest.measurementDescription}</CardDescription>\n00790|             </CardHeader>\n00791|             <CardContent className=\"space-y-4\">\n00792|               <div className=\"grid md:grid-cols-2 gap-4\">\n00793|                 <div>\n00794|                   <Label htmlFor=\"baselineHR\">{t.newPatient.standTest.baselineHR}</Label>\n00795|                   <Input\n00796|                     id=\"baselineHR\"\n00797|                     type=\"number\"\n00798|                     placeholder=\"70\"\n00799|                     value={patientData.standTest.baselineHR || ''}\n00800|                     onChange={(e) => setPatientData(prev => ({\n00801|                       ...prev,\n00802|                       standTest: {\n00803|                         ...prev.standTest,\n00804|                         baselineHR: parseInt(e.target.value) || null\n00805|                       }\n00806|                     }))}\n00807|                   />\n00808|                 </div>\n00809|                 <div>\n00810|                   <Label htmlFor=\"peakHR\">{t.newPatient.standTest.peakHR}</Label>\n00811|                   <Input\n00812|                     id=\"peakHR\"\n00813|                     type=\"number\"\n00814|                     placeholder=\"110\"\n00815|                     value={patientData.standTest.peakHR || ''}\n00816|                     onChange={(e) => {\n00817|                       const peakHR = parseInt(e.target.value) || null\n00818|                       const baselineHR = patientData.standTest.baselineHR\n00819|                       const meetsPOTS = peakHR && baselineHR ? (peakHR - baselineHR >= 30) : false\n00820|                       \n00821|                       setPatientData(prev => ({\n00822|                         ...prev,\n00823|                         standTest: {\n00824|                           ...prev.standTest,\n00825|                           peakHR,\n00826|                           sustainedHR: peakHR,\n00827|                           meetsPOTS,\n00828|                           performed: true\n00829|                         }\n00830|                       }))\n00831|                     }}\n00832|                   />\n00833|                 </div>\n00834|               </div>\n00835|               \n00836|               {patientData.standTest.baselineHR && patientData.standTest.peakHR && (\n00837|                 <Alert className={patientData.standTest.meetsPOTS ? 'border-red-200 bg-red-50' : 'border-green-200 bg-green-50'}>\n00838|                   <Heart className=\"h-4 w-4\" />\n00839|                   <AlertDescription>\n00840|                     <strong>{t.newPatient.standTest.hrIncrease}: {patientData.standTest.peakHR - patientData.standTest.baselineHR} {t.common.bpm}</strong><br />\n00841|                     {t.newPatient.standTest.potsCriteria} (≥30 {t.common.bpm}): {patientData.standTest.meetsPOTS ? t.common.met.toUpperCase() : t.common.notMet}\n00842|                   </AlertDescription>\n00843|                 </Alert>\n00844|               )}\n00845|               \n00846|               <div className=\"flex justify-center pt-4\">\n00847|                 <Button \n00848|                   onClick={() => setCurrentStep(determineNextStep())}\n00849|                   disabled={!patientData.standTest.baselineHR || !patientData.standTest.peakHR}\n00850|                 >\n00851|                   {t.newPatient.standTest.continueToPEM}\n00852|                 </Button>\n00853|               </div>\n00854|             </CardContent>\n00855|           </Card>\n00856|         </div>\n00857|       </div>\n00858|     )\n00859|   }\n00860| \n00861|   // PEM Quest Step\n00862|   if (currentStep === 'pemQuest') {\n00863|     const currentPEMQuestion = pemQuestions[currentQuestionIndex % pemQuestions.length]\n00864|     const currentAnswer = patientData.pemQuest.answers[currentPEMQuestion.id]\n00865|     const progress = ((currentQuestionIndex + 1) / pemQuestions.length) * 100\n00866| \n00867|     return (\n00868|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00869|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00870|           <div className=\"mb-6\">\n00871|             <div className=\"flex items-center gap-4 mb-4\">\n00872|               <Activity className=\"h-5 w-5 text-orange-600\" />\n00873|               <div>\n00874|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.newPatient.pemAssessment.title}</h1>\n00875|                 <p className=\"text-gray-600\">{t.newPatient.pemAssessment.description}</p>\n00876|               </div>\n00877|             </div>\n00878|             <Progress value={getStepProgress()} className=\"h-2 mb-2\" />\n00879|             <Progress value={progress} className=\"h-1\" />\n00880|             <p className=\"text-sm text-gray-600 mt-2\">\n00881|               {t.common.question} {(currentQuestionIndex % pemQuestions.length) + 1} {t.common.of} {pemQuestions.length}\n00882|             </p>\n00883|           </div>\n00884| \n00885|           <Card>\n00886|             <CardHeader>\n00887|               <CardTitle className=\"text-lg\">{currentPEMQuestion.question}</CardTitle>\n00888|             </CardHeader>\n00889|             <CardContent>\n00890|               <RadioGroup \n00891|                 value={currentAnswer || ''} \n00892|                 onValueChange={(value) => handlePEMAnswer(currentPEMQuestion.id, value)}\n00893|                 className=\"space-y-3\"\n00894|               >\n00895|                 {currentPEMQuestion.options.map((option) => (\n00896|                   <div key={option.value} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00897|                     <RadioGroupItem value={option.value} id={option.value} className=\"mt-1\" />\n00898|                     <Label htmlFor={option.value} className=\"cursor-pointer flex-1\">\n00899|                       {option.label}\n00900|                     </Label>\n00901|                   </div>\n00902|                 ))}\n00903|               </RadioGroup>\n00904| \n00905|               <div className=\"flex justify-between pt-6\">\n00906|                 <Button \n00907|                   onClick={() => setCurrentQuestionIndex(prev => prev - 1)} \n00908|                   disabled={currentQuestionIndex === 0}\n00909|                   variant=\"outline\"\n00910|                 >\n00911|                   Previous\n00912|                 </Button>\n00913|                 \n00914|                 <Button \n00915|                   onClick={() => {\n00916|                     if (currentQuestionIndex < pemQuestions.length - 1) {\n00917|                       setCurrentQuestionIndex(prev => prev + 1)\n00918|                     } else {\n00919|                       setCurrentStep('criteria')\n00920|                     }\n00921|                   }}\n00922|                   disabled={!currentAnswer}\n00923|                 >\n00924|                   {currentQuestionIndex === pemQuestions.length - 1 ? t.newPatient.pemAssessment.finalizeAssessment : t.common.next}\n00925|                 </Button>\n00926|               </div>\n00927|             </CardContent>\n00928|           </Card>\n00929|         </div>\n00930|       </div>\n00931|     )\n00932|   }\n00933| \n00934|   // Criteria Step (auto-process)\n00935|   if (currentStep === 'criteria') {\n00936|     useEffect(() => {\n00937|       finalizeDiagnoses()\n00938|     }, [])\n00939|     \n00940|     return (\n00941|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00942|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00943|           <Card>\n00944|             <CardContent className=\"pt-6 text-center\">\n00945|               <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n00946|               <h3 className=\"text-lg font-semibold mb-2\">{t.newPatient.processing.title}</h3>\n00947|               <p className=\"text-gray-600\">{t.newPatient.processing.description}</p>\n00948|             </CardContent>\n00949|           </Card>\n00950|         </div>\n00951|       </div>\n00952|     )\n00953|   }\n00954| \n00955|   return <div>Loading...</div>\n00956| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { ArrowLeft, ArrowRight, User, ClipboardList, FileText, Download, CheckCircle, AlertTriangle, Activity, Heart, Clock, BarChart3 } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface PatientData {\n  demographics: {\n    age: number | null\n    gender: string"
    },
    "title": "app/new-patient/page.tsx",
    "time": {
      "start": 1758131603246,
      "end": 1758131603252
    }
  }
}