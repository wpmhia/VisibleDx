{
  "id": "prt_95b9e98da001yEAehNuRpZWyXr",
  "messageID": "msg_95b9b2d56001N2P1clgAkWZ5Fs",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01FwTVP1WXLb81TCPY3qSEEM",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/contextual-help.tsx",
      "content": "'use client'\n\nimport { useState } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip'\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from '@/components/ui/popover'\nimport { \n  HelpCircle, \n  Info, \n  BookOpen, \n  Lightbulb,\n  ExternalLink \n} from 'lucide-react'\n\ninterface HelpTooltipProps {\n  content: string\n  children: React.ReactNode\n  side?: 'top' | 'right' | 'bottom' | 'left'\n}\n\nexport function HelpTooltip({ content, children, side = 'top' }: HelpTooltipProps) {\n  return (\n    <TooltipProvider>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          {children}\n        </TooltipTrigger>\n        <TooltipContent side={side} className=\"max-w-xs\">\n          <p>{content}</p>\n        </TooltipContent>\n      </Tooltip>\n    </TooltipProvider>\n  )\n}\n\ninterface ContextualInfoProps {\n  title?: string\n  content: string\n  type?: 'info' | 'tip' | 'help' | 'reference'\n  trigger?: 'hover' | 'click'\n  placement?: 'inline' | 'icon'\n}\n\nexport function ContextualInfo({ \n  title, \n  content, \n  type = 'info',\n  trigger = 'hover',\n  placement = 'icon' \n}: ContextualInfoProps) {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const icons = {\n    info: Info,\n    tip: Lightbulb,\n    help: HelpCircle,\n    reference: BookOpen,\n  }\n\n  const colors = {\n    info: 'text-blue-600',\n    tip: 'text-amber-600',\n    help: 'text-gray-600',\n    reference: 'text-green-600',\n  }\n\n  const Icon = icons[type]\n\n  const TriggerComponent = placement === 'inline' ? (\n    <Button variant=\"link\" className=\"p-0 h-auto font-normal text-current\">\n      <Icon className={`h-4 w-4 mr-1 ${colors[type]}`} />\n      {title || 'More info'}\n    </Button>\n  ) : (\n    <Icon className={`h-4 w-4 cursor-pointer ${colors[type]} hover:opacity-70`} />\n  )\n\n  if (trigger === 'hover') {\n    return (\n      <HelpTooltip content={content}>\n        {TriggerComponent}\n      </HelpTooltip>\n    )\n  }\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        {TriggerComponent}\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80\">\n        {title && (\n          <div className=\"font-semibold mb-2 flex items-center gap-2\">\n            <Icon className={`h-4 w-4 ${colors[type]}`} />\n            {title}\n          </div>\n        )}\n        <p className=\"text-sm text-gray-600\">{content}</p>\n      </PopoverContent>\n    </Popover>\n  )\n}\n\ninterface ClinicalReferenceProps {\n  title: string\n  criteria: string[]\n  source: string\n  sourceUrl?: string\n  className?: string\n}\n\nexport function ClinicalReference({ \n  title, \n  criteria, \n  source, \n  sourceUrl,\n  className = '' \n}: ClinicalReferenceProps) {\n  return (\n    <div className={`bg-blue-50 border border-blue-200 rounded-lg p-4 ${className}`}>\n      <div className=\"flex items-start justify-between\">\n        <div className=\"flex-1\">\n          <h4 className=\"font-semibold text-blue-900 mb-2 flex items-center gap-2\">\n            <BookOpen className=\"h-4 w-4\" />\n            {title}\n          </h4>\n          <ul className=\"text-sm text-blue-800 space-y-1\">\n            {criteria.map((criterion, index) => (\n              <li key={index} className=\"flex items-start gap-2\">\n                <span className=\"text-blue-600 mt-1\">•</span>\n                <span>{criterion}</span>\n              </li>\n            ))}\n          </ul>\n          <div className=\"mt-3 flex items-center gap-2\">\n            <Badge variant=\"outline\" className=\"text-xs\">\n              {source}\n            </Badge>\n            {sourceUrl && (\n              <a \n                href={sourceUrl} \n                target=\"_blank\" \n                rel=\"noopener noreferrer\"\n                className=\"text-blue-600 hover:text-blue-800 transition-colors\"\n              >\n                <ExternalLink className=\"h-3 w-3\" />\n              </a>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\ninterface ProgressHintProps {\n  currentStep: string\n  nextStep?: string\n  totalSteps?: number\n  className?: string\n}\n\nexport function ProgressHint({ \n  currentStep, \n  nextStep, \n  totalSteps,\n  className = '' \n}: ProgressHintProps) {\n  return (\n    <div className={`bg-amber-50 border border-amber-200 rounded-lg p-3 ${className}`}>\n      <div className=\"flex items-center gap-2 text-amber-800\">\n        <Lightbulb className=\"h-4 w-4 text-amber-600\" />\n        <div className=\"text-sm\">\n          <span className=\"font-medium\">Current: </span>\n          {currentStep}\n          {nextStep && (\n            <>\n              <span className=\"mx-2\">→</span>\n              <span className=\"font-medium\">Next: </span>\n              {nextStep}\n            </>\n          )}\n          {totalSteps && (\n            <span className=\"text-amber-600 ml-2\">\n              ({totalSteps} steps total)\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/contextual-help.tsx",
      "exists": false
    },
    "title": "components/contextual-help.tsx",
    "time": {
      "start": 1758178763510,
      "end": 1758178763539
    }
  }
}