{
  "id": "prt_95b9f1327001pLSAJF7VlmfQct",
  "messageID": "msg_95b9b2d56001N2P1clgAkWZ5Fs",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01XcKQg85UvMvDkKFZdswd5P",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/quick-actions.tsx",
      "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Badge } from '@/components/ui/badge'\nimport {\n  Command,\n  CommandDialog,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n  CommandSeparator,\n} from '@/components/ui/command'\nimport { \n  Search, \n  Zap, \n  Clock, \n  FileText, \n  Heart, \n  Activity, \n  BarChart3, \n  Users,\n  Home,\n  Settings,\n  HelpCircle,\n  Keyboard\n} from 'lucide-react'\nimport { useTranslation } from '@/lib/language-context'\nimport { useKeyboardShortcuts } from '@/hooks/use-keyboard-shortcuts'\n\ninterface QuickAction {\n  id: string\n  label: string\n  description?: string\n  icon: React.ComponentType<any>\n  action: () => void\n  shortcut?: string\n  category: 'navigation' | 'modules' | 'tools' | 'help'\n}\n\ninterface QuickActionsProps {\n  onNavigate: (path: string) => void\n  className?: string\n}\n\nexport default function QuickActions({ onNavigate, className = '' }: QuickActionsProps) {\n  const { t } = useTranslation()\n  const [open, setOpen] = useState(false)\n  const [recentActions, setRecentActions] = useState<string[]>([])\n\n  const actions: QuickAction[] = [\n    // Navigation\n    {\n      id: 'home',\n      label: 'Home',\n      description: 'Go to dashboard',\n      icon: Home,\n      action: () => onNavigate('/'),\n      shortcut: 'Alt+H',\n      category: 'navigation'\n    },\n    \n    // Training Modules\n    {\n      id: 'new-patient',\n      label: t.dashboard.smartAssessment.title,\n      description: t.dashboard.smartAssessment.description,\n      icon: Users,\n      action: () => onNavigate('/new-patient'),\n      shortcut: 'Alt+N',\n      category: 'modules'\n    },\n    {\n      id: 'quick-screen',\n      label: t.dashboard.modules.quickScreen.title,\n      description: t.dashboard.modules.quickScreen.description,\n      icon: Clock,\n      action: () => onNavigate('/quick-screen'),\n      shortcut: 'Alt+Q',\n      category: 'modules'\n    },\n    {\n      id: 'red-flag',\n      label: t.dashboard.modules.redFlag.title,\n      description: t.dashboard.modules.redFlag.description,\n      icon: FileText,\n      action: () => onNavigate('/red-flag-checker'),\n      shortcut: 'Alt+R',\n      category: 'modules'\n    },\n    {\n      id: 'stand-test',\n      label: t.dashboard.modules.standTest.title,\n      description: t.dashboard.modules.standTest.description,\n      icon: Heart,\n      action: () => onNavigate('/stand-test'),\n      shortcut: 'Alt+S',\n      category: 'modules'\n    },\n    {\n      id: 'pem-quest',\n      label: t.dashboard.modules.pemQuest.title,\n      description: t.dashboard.modules.pemQuest.description,\n      icon: Activity,\n      action: () => onNavigate('/pem-quest'),\n      shortcut: 'Alt+P',\n      category: 'modules'\n    },\n    {\n      id: 'criteria-engine',\n      label: t.dashboard.modules.criteriaEngine.title,\n      description: t.dashboard.modules.criteriaEngine.description,\n      icon: BarChart3,\n      action: () => onNavigate('/criteria-engine'),\n      shortcut: 'Alt+C',\n      category: 'modules'\n    },\n    {\n      id: 'subtype-advisor',\n      label: t.dashboard.modules.subtypeAdvisor.title,\n      description: t.dashboard.modules.subtypeAdvisor.description,\n      icon: Settings,\n      action: () => onNavigate('/subtype-advisor'),\n      shortcut: 'Alt+T',\n      category: 'modules'\n    },\n  ]\n\n  // Keyboard shortcuts\n  useKeyboardShortcuts({\n    shortcuts: [\n      { key: 'k', ctrlKey: true, callback: () => setOpen(true) },\n      { key: '/', callback: () => setOpen(true) },\n      ...actions.map(action => ({\n        key: action.shortcut?.split('+')[1] || '',\n        altKey: action.shortcut?.includes('Alt') || false,\n        ctrlKey: action.shortcut?.includes('Ctrl') || false,\n        callback: () => {\n          action.action()\n          trackRecentAction(action.id)\n        }\n      })).filter(shortcut => shortcut.key)\n    ]\n  })\n\n  const trackRecentAction = (actionId: string) => {\n    setRecentActions(prev => {\n      const filtered = prev.filter(id => id !== actionId)\n      return [actionId, ...filtered].slice(0, 5)\n    })\n  }\n\n  const handleActionSelect = (action: QuickAction) => {\n    action.action()\n    trackRecentAction(action.id)\n    setOpen(false)\n  }\n\n  const groupedActions = actions.reduce((acc, action) => {\n    if (!acc[action.category]) acc[action.category] = []\n    acc[action.category].push(action)\n    return acc\n  }, {} as Record<string, QuickAction[]>)\n\n  const recentActionsList = recentActions\n    .map(id => actions.find(action => action.id === id))\n    .filter(Boolean) as QuickAction[]\n\n  return (\n    <>\n      {/* Quick Access Button */}\n      <Button\n        variant=\"outline\"\n        onClick={() => setOpen(true)}\n        className={`flex items-center gap-2 ${className}`}\n      >\n        <Zap className=\"h-4 w-4\" />\n        Quick Actions\n        <Badge variant=\"secondary\" className=\"ml-2 text-xs\">\n          Ctrl+K\n        </Badge>\n      </Button>\n\n      {/* Command Dialog */}\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <CommandInput placeholder=\"Search actions...\" />\n        <CommandList>\n          <CommandEmpty>No actions found.</CommandEmpty>\n          \n          {/* Recent Actions */}\n          {recentActionsList.length > 0 && (\n            <>\n              <CommandGroup heading=\"Recent\">\n                {recentActionsList.map((action) => (\n                  <CommandItem\n                    key={action.id}\n                    onSelect={() => handleActionSelect(action)}\n                    className=\"flex items-center gap-3\"\n                  >\n                    <action.icon className=\"h-4 w-4\" />\n                    <div className=\"flex-1\">\n                      <div className=\"font-medium\">{action.label}</div>\n                      {action.description && (\n                        <div className=\"text-xs text-gray-500\">{action.description}</div>\n                      )}\n                    </div>\n                    {action.shortcut && (\n                      <Badge variant=\"outline\" className=\"text-xs\">\n                        {action.shortcut}\n                      </Badge>\n                    )}\n                  </CommandItem>\n                ))}\n              </CommandGroup>\n              <CommandSeparator />\n            </>\n          )}\n\n          {/* Training Modules */}\n          <CommandGroup heading=\"Training Modules\">\n            {groupedActions.modules?.map((action) => (\n              <CommandItem\n                key={action.id}\n                onSelect={() => handleActionSelect(action)}\n                className=\"flex items-center gap-3\"\n              >\n                <action.icon className=\"h-4 w-4\" />\n                <div className=\"flex-1\">\n                  <div className=\"font-medium\">{action.label}</div>\n                  {action.description && (\n                    <div className=\"text-xs text-gray-500\">{action.description}</div>\n                  )}\n                </div>\n                {action.shortcut && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {action.shortcut}\n                  </Badge>\n                )}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n\n          {/* Navigation */}\n          <CommandGroup heading=\"Navigation\">\n            {groupedActions.navigation?.map((action) => (\n              <CommandItem\n                key={action.id}\n                onSelect={() => handleActionSelect(action)}\n                className=\"flex items-center gap-3\"\n              >\n                <action.icon className=\"h-4 w-4\" />\n                <div className=\"flex-1\">\n                  <div className=\"font-medium\">{action.label}</div>\n                  {action.description && (\n                    <div className=\"text-xs text-gray-500\">{action.description}</div>\n                  )}\n                </div>\n                {action.shortcut && (\n                  <Badge variant=\"outline\" className=\"text-xs\">\n                    {action.shortcut}\n                  </Badge>\n                )}\n              </CommandItem>\n            ))}\n          </CommandGroup>\n        </CommandList>\n      </CommandDialog>\n    </>\n  )\n}\n\n// Keyboard Shortcuts Help Component\nexport function KeyboardShortcutsHelp() {\n  const [open, setOpen] = useState(false)\n\n  const shortcuts = [\n    { key: 'Ctrl + K', description: 'Open quick actions' },\n    { key: '/', description: 'Open search' },\n    { key: 'Alt + H', description: 'Go to home' },\n    { key: 'Alt + N', description: 'Start new training session' },\n    { key: 'Alt + Q', description: 'Quick screen module' },\n    { key: 'Alt + R', description: 'Red flag checker' },\n    { key: 'Alt + S', description: 'Stand test module' },\n    { key: 'Alt + P', description: 'PEM assessment' },\n    { key: 'Alt + C', description: 'Diagnostic criteria' },\n    { key: 'Alt + T', description: 'Clinical management' },\n    { key: 'Alt + ←', description: 'Go back' },\n    { key: 'Alt + →', description: 'Go forward' },\n    { key: 'Esc', description: 'Exit/Cancel' },\n  ]\n\n  return (\n    <>\n      <Button\n        variant=\"ghost\"\n        size=\"sm\"\n        onClick={() => setOpen(true)}\n        className=\"flex items-center gap-2\"\n      >\n        <Keyboard className=\"h-4 w-4\" />\n        Shortcuts\n      </Button>\n\n      <CommandDialog open={open} onOpenChange={setOpen}>\n        <div className=\"p-4\">\n          <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n            <Keyboard className=\"h-5 w-5\" />\n            Keyboard Shortcuts\n          </h3>\n          <div className=\"space-y-2\">\n            {shortcuts.map((shortcut, index) => (\n              <div key={index} className=\"flex items-center justify-between py-2\">\n                <span className=\"text-sm\">{shortcut.description}</span>\n                <Badge variant=\"outline\" className=\"font-mono\">\n                  {shortcut.key}\n                </Badge>\n              </div>\n            ))}\n          </div>\n        </div>\n      </CommandDialog>\n    </>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/quick-actions.tsx",
      "exists": false
    },
    "title": "components/quick-actions.tsx",
    "time": {
      "start": 1758178807220,
      "end": 1758178807244
    }
  }
}