{
  "id": "prt_95b9e2e6e001e3kAivFkJ2w8dX",
  "messageID": "msg_95b9b2d56001N2P1clgAkWZ5Fs",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_019Zuw3xBNXBY6ooyttyz6dY",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/form-validation.tsx",
      "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Button } from '@/components/ui/button'\nimport { AlertTriangle, CheckCircle } from 'lucide-react'\n\nexport interface ValidationRule {\n  field: string\n  required?: boolean\n  minLength?: number\n  maxLength?: number\n  pattern?: RegExp\n  custom?: (value: any) => string | null\n  message?: string\n}\n\nexport interface ValidationError {\n  field: string\n  message: string\n}\n\ninterface FormValidationProps {\n  data: Record<string, any>\n  rules: ValidationRule[]\n  onValidationChange?: (isValid: boolean, errors: ValidationError[]) => void\n  showErrors?: boolean\n  className?: string\n}\n\nexport function validateForm(data: Record<string, any>, rules: ValidationRule[]): ValidationError[] {\n  const errors: ValidationError[] = []\n\n  rules.forEach(rule => {\n    const value = data[rule.field]\n    \n    // Required field validation\n    if (rule.required && (!value || (typeof value === 'string' && value.trim() === ''))) {\n      errors.push({\n        field: rule.field,\n        message: rule.message || `${rule.field} is required`\n      })\n      return\n    }\n\n    // Skip other validations if field is empty and not required\n    if (!value) return\n\n    // Min length validation\n    if (rule.minLength && typeof value === 'string' && value.length < rule.minLength) {\n      errors.push({\n        field: rule.field,\n        message: rule.message || `${rule.field} must be at least ${rule.minLength} characters`\n      })\n    }\n\n    // Max length validation\n    if (rule.maxLength && typeof value === 'string' && value.length > rule.maxLength) {\n      errors.push({\n        field: rule.field,\n        message: rule.message || `${rule.field} must not exceed ${rule.maxLength} characters`\n      })\n    }\n\n    // Pattern validation\n    if (rule.pattern && typeof value === 'string' && !rule.pattern.test(value)) {\n      errors.push({\n        field: rule.field,\n        message: rule.message || `${rule.field} format is invalid`\n      })\n    }\n\n    // Custom validation\n    if (rule.custom) {\n      const customError = rule.custom(value)\n      if (customError) {\n        errors.push({\n          field: rule.field,\n          message: customError\n        })\n      }\n    }\n  })\n\n  return errors\n}\n\nexport default function FormValidation({\n  data,\n  rules,\n  onValidationChange,\n  showErrors = true,\n  className = ''\n}: FormValidationProps) {\n  const [errors, setErrors] = useState<ValidationError[]>([])\n\n  useEffect(() => {\n    const validationErrors = validateForm(data, rules)\n    setErrors(validationErrors)\n    onValidationChange?.(validationErrors.length === 0, validationErrors)\n  }, [data, rules, onValidationChange])\n\n  if (!showErrors || errors.length === 0) {\n    return null\n  }\n\n  return (\n    <div className={`space-y-2 ${className}`}>\n      {errors.map((error, index) => (\n        <Alert key={index} className=\"border-red-200 bg-red-50\">\n          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n          <AlertDescription className=\"text-red-800\">\n            {error.message}\n          </AlertDescription>\n        </Alert>\n      ))}\n    </div>\n  )\n}\n\n// Confirmation Dialog Component\ninterface ConfirmationDialogProps {\n  isOpen: boolean\n  onClose: () => void\n  onConfirm: () => void\n  title: string\n  message: string\n  confirmLabel?: string\n  cancelLabel?: string\n  variant?: 'default' | 'destructive'\n}\n\nexport function ConfirmationDialog({\n  isOpen,\n  onClose,\n  onConfirm,\n  title,\n  message,\n  confirmLabel = 'Confirm',\n  cancelLabel = 'Cancel',\n  variant = 'default'\n}: ConfirmationDialogProps) {\n  if (!isOpen) return null\n\n  const handleConfirm = () => {\n    onConfirm()\n    onClose()\n  }\n\n  return (\n    <div className=\"fixed inset-0 z-50 flex items-center justify-center bg-black bg-opacity-50\">\n      <div className=\"bg-white rounded-lg shadow-lg max-w-md w-full mx-4 p-6\">\n        <div className=\"flex items-center gap-3 mb-4\">\n          {variant === 'destructive' ? (\n            <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n          ) : (\n            <CheckCircle className=\"h-6 w-6 text-blue-600\" />\n          )}\n          <h3 className=\"text-lg font-semibold\">{title}</h3>\n        </div>\n        \n        <p className=\"text-gray-600 mb-6\">{message}</p>\n        \n        <div className=\"flex justify-end gap-3\">\n          <Button variant=\"outline\" onClick={onClose}>\n            {cancelLabel}\n          </Button>\n          <Button \n            variant={variant === 'destructive' ? 'destructive' : 'default'}\n            onClick={handleConfirm}\n          >\n            {confirmLabel}\n          </Button>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/form-validation.tsx",
      "exists": false
    },
    "title": "components/form-validation.tsx",
    "time": {
      "start": 1758178732124,
      "end": 1758178732153
    }
  }
}