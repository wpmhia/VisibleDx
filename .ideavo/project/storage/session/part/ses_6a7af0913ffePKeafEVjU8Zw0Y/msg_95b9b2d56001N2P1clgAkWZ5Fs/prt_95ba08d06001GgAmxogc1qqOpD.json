{
  "id": "prt_95ba08d06001GgAmxogc1qqOpD",
  "messageID": "msg_95b9b2d56001N2P1clgAkWZ5Fs",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_014HcuJSgLJKxMXPeziTcmbm",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/components/error-boundary.tsx",
      "content": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Button } from '@/components/ui/button'\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { \n  AlertTriangle, \n  RefreshCw, \n  Home, \n  Bug, \n  Copy,\n  CheckCircle \n} from 'lucide-react'\n\ninterface ErrorBoundaryProps {\n  error?: Error\n  reset?: () => void\n  children?: React.ReactNode\n}\n\ninterface ErrorRecoveryProps {\n  error: Error\n  onRetry: () => void\n  onGoHome: () => void\n  showDetails?: boolean\n}\n\nexport function ErrorRecovery({ \n  error, \n  onRetry, \n  onGoHome, \n  showDetails = false \n}: ErrorRecoveryProps) {\n  const [copied, setCopied] = useState(false)\n  const [detailsVisible, setDetailsVisible] = useState(showDetails)\n\n  const copyErrorDetails = async () => {\n    const errorInfo = `\nError: ${error.message}\nStack: ${error.stack}\nTimestamp: ${new Date().toISOString()}\nUser Agent: ${navigator.userAgent}\nURL: ${window.location.href}\n    `.trim()\n\n    try {\n      await navigator.clipboard.writeText(errorInfo)\n      setCopied(true)\n      setTimeout(() => setCopied(false), 2000)\n    } catch (err) {\n      console.error('Failed to copy error details:', err)\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center bg-gray-50 px-4\">\n      <Card className=\"max-w-lg w-full\">\n        <CardHeader className=\"text-center\">\n          <div className=\"mx-auto w-12 h-12 bg-red-100 rounded-full flex items-center justify-center mb-4\">\n            <AlertTriangle className=\"h-6 w-6 text-red-600\" />\n          </div>\n          <CardTitle className=\"text-xl text-gray-900\">\n            Something went wrong\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <Alert className=\"border-red-200 bg-red-50\">\n            <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n            <AlertDescription className=\"text-red-800\">\n              An unexpected error occurred in the training module. Your progress has been saved where possible.\n            </AlertDescription>\n          </Alert>\n\n          <div className=\"flex flex-col gap-3\">\n            <Button onClick={onRetry} className=\"w-full flex items-center gap-2\">\n              <RefreshCw className=\"h-4 w-4\" />\n              Try Again\n            </Button>\n            <Button variant=\"outline\" onClick={onGoHome} className=\"w-full flex items-center gap-2\">\n              <Home className=\"h-4 w-4\" />\n              Go to Home\n            </Button>\n          </div>\n\n          <div className=\"border-t pt-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={() => setDetailsVisible(!detailsVisible)}\n              className=\"w-full flex items-center gap-2\"\n            >\n              <Bug className=\"h-4 w-4\" />\n              {detailsVisible ? 'Hide' : 'Show'} Technical Details\n            </Button>\n\n            {detailsVisible && (\n              <div className=\"mt-3 space-y-3\">\n                <div className=\"bg-gray-100 p-3 rounded-md\">\n                  <p className=\"text-sm font-medium text-gray-700 mb-1\">Error Message:</p>\n                  <p className=\"text-xs text-gray-600 font-mono break-all\">\n                    {error.message}\n                  </p>\n                </div>\n\n                <Button\n                  variant=\"outline\"\n                  size=\"sm\"\n                  onClick={copyErrorDetails}\n                  className=\"w-full flex items-center gap-2\"\n                >\n                  {copied ? (\n                    <>\n                      <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                      Copied!\n                    </>\n                  ) : (\n                    <>\n                      <Copy className=\"h-4 w-4\" />\n                      Copy Error Details\n                    </>\n                  )}\n                </Button>\n\n                <p className=\"text-xs text-gray-500 text-center\">\n                  Share these details with technical support if the problem persists.\n                </p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  )\n}\n\n// Simple error boundary hook\nexport function useErrorBoundary() {\n  const [error, setError] = useState<Error | null>(null)\n\n  const resetError = () => setError(null)\n\n  const captureError = (error: Error) => {\n    console.error('Captured error:', error)\n    setError(error)\n  }\n\n  useEffect(() => {\n    const handleUnhandledRejection = (event: PromiseRejectionEvent) => {\n      console.error('Unhandled promise rejection:', event.reason)\n      if (event.reason instanceof Error) {\n        captureError(event.reason)\n      } else {\n        captureError(new Error(String(event.reason)))\n      }\n    }\n\n    const handleError = (event: ErrorEvent) => {\n      console.error('Global error:', event.error)\n      captureError(event.error || new Error(event.message))\n    }\n\n    window.addEventListener('unhandledrejection', handleUnhandledRejection)\n    window.addEventListener('error', handleError)\n\n    return () => {\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection)\n      window.removeEventListener('error', handleError)\n    }\n  }, [])\n\n  return { error, resetError, captureError }\n}\n\n// Network error component\ninterface NetworkErrorProps {\n  onRetry: () => void\n  isRetrying?: boolean\n}\n\nexport function NetworkError({ onRetry, isRetrying = false }: NetworkErrorProps) {\n  return (\n    <Alert className=\"border-amber-200 bg-amber-50\">\n      <AlertTriangle className=\"h-4 w-4 text-amber-600\" />\n      <AlertDescription className=\"text-amber-800 flex items-center justify-between\">\n        <span>Network error - Please check your connection and try again.</span>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={onRetry}\n          disabled={isRetrying}\n          className=\"ml-4\"\n        >\n          {isRetrying ? (\n            <>\n              <RefreshCw className=\"h-3 w-3 mr-1 animate-spin\" />\n              Retrying...\n            </>\n          ) : (\n            <>\n              <RefreshCw className=\"h-3 w-3 mr-1\" />\n              Retry\n            </>\n          )}\n        </Button>\n      </AlertDescription>\n    </Alert>\n  )\n}\n\n// Validation error component\ninterface ValidationErrorsProps {\n  errors: string[]\n  onFixErrors?: () => void\n}\n\nexport function ValidationErrors({ errors, onFixErrors }: ValidationErrorsProps) {\n  if (errors.length === 0) return null\n\n  return (\n    <Alert className=\"border-red-200 bg-red-50\">\n      <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n      <AlertDescription className=\"text-red-800\">\n        <div className=\"space-y-2\">\n          <p className=\"font-medium\">Please fix the following errors:</p>\n          <ul className=\"text-sm space-y-1\">\n            {errors.map((error, index) => (\n              <li key={index} className=\"flex items-start gap-2\">\n                <span className=\"text-red-500 mt-0.5\">â€¢</span>\n                <span>{error}</span>\n              </li>\n            ))}\n          </ul>\n          {onFixErrors && (\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onFixErrors}\n              className=\"mt-2\"\n            >\n              Help me fix these\n            </Button>\n          )}\n        </div>\n      </AlertDescription>\n    </Alert>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/components/error-boundary.tsx",
      "exists": false
    },
    "title": "components/error-boundary.tsx",
    "time": {
      "start": 1758178895969,
      "end": 1758178896009
    }
  }
}