{
  "id": "prt_9687417eb0016ptePqJAfeJAgb",
  "messageID": "msg_9686eaaa9001ncp4X3sxFQYlqi",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01EoZUEPryY1opk3gizydSXP",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/energy-management/page.tsx",
      "content": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { Label } from '@/components/ui/label'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Input } from '@/components/ui/input'\nimport { Progress } from '@/components/ui/progress'\nimport { Battery, CheckCircle, AlertTriangle, Clock, Target, Lightbulb } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface EnergyActivity {\n  type: 'cognitive' | 'physical' | 'emotional' | 'social'\n  activity: string\n  energyCost: number\n  duration: number\n  canReduce: boolean\n}\n\nexport default function EnergyManagement() {\n  const [currentStep, setCurrentStep] = useState(0)\n  const [assessmentData, setAssessmentData] = useState({\n    currentEnergyLevel: '',\n    symptoms: [] as string[],\n    dailyActivities: [] as EnergyActivity[],\n    triggers: [] as string[],\n    restPeriods: '',\n    goals: '',\n    energyLimits: ''\n  })\n  const [isComplete, setIsComplete] = useState(false)\n  const { t } = useTranslation()\n\n  const steps = [\n    'Energy Assessment',\n    'Activity Mapping', \n    'Trigger Identification',\n    'Energy Plan Creation',\n    'Results & Guidance'\n  ]\n\n  const energyLevels = [\n    { value: 'severe', label: 'Severe limitation - Can only do essential self-care tasks', score: 1 },\n    { value: 'moderate', label: 'Moderate limitation - Reduced activities, frequent rest needed', score: 2 },\n    { value: 'mild', label: 'Mild limitation - Some activities affected, weekend recovery', score: 3 },\n    { value: 'minimal', label: 'Minimal limitation - Slight reduction in stamina', score: 4 }\n  ]\n\n  const commonSymptoms = [\n    'Post-exertional malaise',\n    'Unrefreshing sleep',\n    'Cognitive difficulties (brain fog)',\n    'Orthostatic intolerance',\n    'Temperature sensitivity',\n    'Sensory hypersensitivity',\n    'Muscle/joint pain',\n    'Flu-like symptoms'\n  ]\n\n  const activityTypes = [\n    { type: 'cognitive', label: 'Cognitive (thinking, concentrating)', examples: 'Reading, computer work, decision making' },\n    { type: 'physical', label: 'Physical (movement, exertion)', examples: 'Walking, household tasks, exercise' },\n    { type: 'emotional', label: 'Emotional (stress, feelings)', examples: 'Difficult conversations, worry, excitement' },\n    { type: 'social', label: 'Social (interaction, engagement)', examples: 'Meetings, social events, phone calls' }\n  ]\n\n  const calculateEnergyBudget = () => {\n    const energyLevel = energyLevels.find(e => e.value === assessmentData.currentEnergyLevel)?.score || 0\n    const baseEnergy = energyLevel * 25 // 25, 50, 75, 100\n    const symptomDrain = assessmentData.symptoms.length * 5\n    const availableEnergy = Math.max(10, baseEnergy - symptomDrain)\n    \n    return {\n      totalEnergy: baseEnergy,\n      symptomDrain,\n      availableEnergy,\n      safeLevel: availableEnergy * 0.8, // 80% of available energy for safety margin\n      emergencyReserve: availableEnergy * 0.2\n    }\n  }\n\n  const generateEnergyPlan = () => {\n    const budget = calculateEnergyBudget()\n    const plan = {\n      dailyEnergyBudget: budget.safeLevel,\n      restSchedule: 'Plan rest periods between activities',\n      activityPacing: 'Break activities into smaller chunks',\n      monitoringSigns: 'Watch for early warning signs of energy depletion',\n      emergencyProtocol: 'What to do during flare-ups'\n    }\n\n    const recommendations = []\n    \n    if (budget.availableEnergy < 30) {\n      recommendations.push('Focus on essential activities only')\n      recommendations.push('Frequent rest periods (every 15-30 minutes)')\n      recommendations.push('Consider assistance with daily activities')\n    } else if (budget.availableEnergy < 60) {\n      recommendations.push('Moderate activity levels with regular breaks')\n      recommendations.push('Alternate between different types of activities')\n      recommendations.push('Plan demanding activities for your best time of day')\n    } else {\n      recommendations.push('Maintain awareness of energy limits')\n      recommendations.push('Pre-emptive rest before activities')\n      recommendations.push('Monitor for gradual increases in tolerance')\n    }\n\n    return { plan, recommendations, budget }\n  }\n\n  const nextStep = () => {\n    if (currentStep < steps.length - 1) {\n      setCurrentStep(prev => prev + 1)\n    } else {\n      setIsComplete(true)\n    }\n  }\n\n  const prevStep = () => {\n    if (currentStep > 0) {\n      setCurrentStep(prev => prev - 1)\n    }\n  }\n\n  if (isComplete) {\n    const { plan, recommendations, budget } = generateEnergyPlan()\n    \n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n        <div className=\"container mx-auto px-4 max-w-4xl\">\n          <Card>\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n                <CheckCircle className=\"h-6 w-6 text-green-600\" />\n                NICE NG206 Energy Management Plan\n              </CardTitle>\n              <CardDescription>\n                Personalised energy management based on NICE guidelines for ME/CFS\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <Card className=\"border-blue-200 bg-blue-50\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Battery className=\"h-5 w-5\" />\n                      Your Energy Budget\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Total Energy Capacity:</span>\n                        <Badge>{budget.totalEnergy}%</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Symptom Energy Cost:</span>\n                        <Badge variant=\"destructive\">-{budget.symptomDrain}%</Badge>\n                      </div>\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"text-sm\">Available Energy:</span>\n                        <Badge variant=\"secondary\">{budget.availableEnergy}%</Badge>\n                      </div>\n                      <div className=\"border-t pt-2\">\n                        <div className=\"flex justify-between items-center font-semibold\">\n                          <span className=\"text-sm\">Safe Daily Budget:</span>\n                          <Badge className=\"bg-green-100 text-green-800\">{Math.round(budget.safeLevel)}%</Badge>\n                        </div>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                <Card className=\"border-green-200 bg-green-50\">\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Target className=\"h-5 w-5\" />\n                      NICE NG206 Principles\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <ul className=\"text-sm space-y-2\">\n                      <li>• Energy management is self-management led by you</li>\n                      <li>• Do not use more energy than you perceive you have</li>\n                      <li>• Do not 'push through' your symptoms</li>\n                      <li>• Activity is never automatically increased</li>\n                      <li>• Flexible approach - adjust based on symptoms</li>\n                      <li>• Long-term approach - stabilisation takes time</li>\n                    </ul>\n                  </CardContent>\n                </Card>\n              </div>\n\n              <Alert className=\"border-yellow-200 bg-yellow-50\">\n                <Lightbulb className=\"h-4 w-4\" />\n                <AlertDescription>\n                  <strong>NICE NG206 Key Point:</strong> Energy management helps you learn to use the amount of energy you have while reducing your risk of post-exertional malaise. You are the expert in judging your own limits.\n                </AlertDescription>\n              </Alert>\n\n              <Card>\n                <CardHeader>\n                  <CardTitle>Your Personalised Recommendations</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid md:grid-cols-2 gap-4\">\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Daily Management:</h4>\n                      <ul className=\"text-sm space-y-1\">\n                        {recommendations.map((rec, index) => (\n                          <li key={index} className=\"flex items-start gap-2\">\n                            <span className=\"text-green-600\">•</span>\n                            {rec}\n                          </li>\n                        ))}\n                      </ul>\n                    </div>\n                    <div>\n                      <h4 className=\"font-semibold mb-2\">Activity Planning:</h4>\n                      <ul className=\"text-sm space-y-1\">\n                        <li>• Plan periods of rest and activity</li>\n                        <li>• Alternate between different activity types</li>\n                        <li>• Break activities into small chunks</li>\n                        <li>• Use pre-emptive rest</li>\n                        <li>• Monitor for early warning signs</li>\n                      </ul>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n\n              <div className=\"bg-red-50 p-4 rounded-lg border border-red-200\">\n                <h4 className=\"font-semibold mb-2 text-red-900 flex items-center gap-2\">\n                  <AlertTriangle className=\"h-4 w-4\" />\n                  Flare-up and Relapse Management\n                </h4>\n                <div className=\"text-red-800 text-sm space-y-2\">\n                  <p><strong>During a flare-up:</strong> Temporarily reduce activity levels and increase rest periods</p>\n                  <p><strong>During a relapse:</strong> Substantially reduce activities and reassess energy limits to stabilise symptoms</p>\n                  <p><strong>Recovery:</strong> Do not return to usual activity levels until symptoms have stabilised</p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-4 justify-center\">\n                <Button onClick={() => {\n                  setCurrentStep(0)\n                  setAssessmentData({\n                    currentEnergyLevel: '',\n                    symptoms: [],\n                    dailyActivities: [],\n                    triggers: [],\n                    restPeriods: '',\n                    goals: '',\n                    energyLimits: ''\n                  })\n                  setIsComplete(false)\n                }} variant=\"outline\">\n                  Create New Plan\n                </Button>\n                <Button onClick={() => {\n                  const content = `NICE NG206 Energy Management Plan\n                  \nEnergy Budget: ${Math.round(budget.safeLevel)}% daily\nCurrent Energy Level: ${assessmentData.currentEnergyLevel}\nSymptoms: ${assessmentData.symptoms.join(', ')}\n\nRecommendations:\n${recommendations.map(r => `• ${r}`).join('\\n')}\n\nRemember: You are the expert in judging your own limits. Do not push through symptoms.`\n                  \n                  const blob = new Blob([content], { type: 'text/plain' })\n                  const url = URL.createObjectURL(blob)\n                  const a = document.createElement('a')\n                  a.href = url\n                  a.download = 'energy-management-plan.txt'\n                  a.click()\n                  URL.revokeObjectURL(url)\n                }}>\n                  Download Plan\n                </Button>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    )\n  }\n\n  const progress = ((currentStep + 1) / steps.length) * 100\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n      <div className=\"container mx-auto px-4 max-w-3xl\">\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <Battery className=\"h-5 w-5 text-blue-600\" />\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">NICE NG206 Energy Management</h1>\n              <p className=\"text-gray-600\">Create your personalised energy management plan</p>\n            </div>\n          </div>\n          \n          <Progress value={progress} className=\"h-2\" />\n          <p className=\"text-sm text-gray-600 mt-2\">\n            Step {currentStep + 1} of {steps.length}: {steps[currentStep]}\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"text-lg\">\n              {steps[currentStep]}\n            </CardTitle>\n            <CardDescription>\n              {currentStep === 0 && \"Assess your current energy level and symptoms\"}\n              {currentStep === 1 && \"Map your daily activities and energy costs\"}\n              {currentStep === 2 && \"Identify triggers for symptom worsening\"}\n              {currentStep === 3 && \"Set goals and energy limits\"}\n              {currentStep === 4 && \"Review your personalised plan\"}\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-6\">\n              {currentStep === 0 && (\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-base font-medium\">Current Energy Level</Label>\n                    <RadioGroup \n                      value={assessmentData.currentEnergyLevel} \n                      onValueChange={(value) => setAssessmentData(prev => ({ ...prev, currentEnergyLevel: value }))}\n                      className=\"mt-2\"\n                    >\n                      {energyLevels.map((level) => (\n                        <div key={level.value} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n                          <RadioGroupItem value={level.value} id={level.value} className=\"mt-1\" />\n                          <Label htmlFor={level.value} className=\"cursor-pointer flex-1\">\n                            {level.label}\n                          </Label>\n                        </div>\n                      ))}\n                    </RadioGroup>\n                  </div>\n\n                  <div>\n                    <Label className=\"text-base font-medium\">Current Symptoms (Select all that apply)</Label>\n                    <div className=\"grid md:grid-cols-2 gap-2 mt-2\">\n                      {commonSymptoms.map((symptom) => (\n                        <div key={symptom} className=\"flex items-center space-x-2\">\n                          <Checkbox\n                            id={symptom}\n                            checked={assessmentData.symptoms.includes(symptom)}\n                            onCheckedChange={(checked) => {\n                              if (checked) {\n                                setAssessmentData(prev => ({ \n                                  ...prev, \n                                  symptoms: [...prev.symptoms, symptom] \n                                }))\n                              } else {\n                                setAssessmentData(prev => ({ \n                                  ...prev, \n                                  symptoms: prev.symptoms.filter(s => s !== symptom) \n                                }))\n                              }\n                            }}\n                          />\n                          <Label htmlFor={symptom} className=\"text-sm\">{symptom}</Label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                </div>\n              )}\n\n              {currentStep === 1 && (\n                <div className=\"space-y-4\">\n                  <p className=\"text-sm text-gray-600\">\n                    NICE NG206: Consider all types of activity - cognitive, physical, emotional and social\n                  </p>\n                  {activityTypes.map((type) => (\n                    <Card key={type.type} className=\"border-gray-200\">\n                      <CardHeader className=\"pb-2\">\n                        <CardTitle className=\"text-base\">{type.label}</CardTitle>\n                        <CardDescription className=\"text-xs\">{type.examples}</CardDescription>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"text-sm text-gray-600\">\n                          Consider how much energy these activities cost you on a typical day.\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              )}\n\n              {currentStep === 2 && (\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"triggers\" className=\"text-base font-medium\">\n                      What activities or situations consistently trigger symptom worsening?\n                    </Label>\n                    <Textarea\n                      id=\"triggers\"\n                      placeholder=\"e.g., phone calls, standing for long periods, bright lights, social events...\"\n                      value={assessmentData.triggers.join('\\n')}\n                      onChange={(e) => setAssessmentData(prev => ({ \n                        ...prev, \n                        triggers: e.target.value.split('\\n').filter(t => t.trim()) \n                      }))}\n                      className=\"mt-2\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              {currentStep === 3 && (\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label htmlFor=\"goals\" className=\"text-base font-medium\">\n                      What are your priorities and goals for managing your energy?\n                    </Label>\n                    <Textarea\n                      id=\"goals\"\n                      placeholder=\"e.g., be able to work part-time, maintain relationships, manage household tasks...\"\n                      value={assessmentData.goals}\n                      onChange={(e) => setAssessmentData(prev => ({ ...prev, goals: e.target.value }))}\n                      className=\"mt-2\"\n                    />\n                  </div>\n                  <div>\n                    <Label htmlFor=\"limits\" className=\"text-base font-medium\">\n                      What have you learned about your energy limits?\n                    </Label>\n                    <Textarea\n                      id=\"limits\"\n                      placeholder=\"e.g., can work for 2 hours before needing rest, social events drain me for days...\"\n                      value={assessmentData.energyLimits}\n                      onChange={(e) => setAssessmentData(prev => ({ ...prev, energyLimits: e.target.value }))}\n                      className=\"mt-2\"\n                    />\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex justify-between pt-6\">\n                <Button \n                  onClick={prevStep} \n                  disabled={currentStep === 0}\n                  variant=\"outline\"\n                  className=\"flex items-center gap-2\"\n                >\n                  Previous\n                </Button>\n                \n                <Button \n                  onClick={nextStep}\n                  disabled={currentStep === 0 && !assessmentData.currentEnergyLevel}\n                  className=\"flex items-center gap-2\"\n                >\n                  {currentStep === steps.length - 1 ? 'Create Plan' : 'Next'}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/app/energy-management/page.tsx",
      "exists": false
    },
    "title": "app/energy-management/page.tsx",
    "time": {
      "start": 1758394126748,
      "end": 1758394126771
    }
  }
}