{
  "id": "prt_968725c19001Mjy7nsy5O0hhTw",
  "messageID": "msg_9686eaaa9001ncp4X3sxFQYlqi",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "multiedit",
  "callID": "toolu_01LtZjm9BhScjumW1fyDfxhg",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/pem-quest/page.tsx",
      "edits": [
        {
          "filePath": "/home/user/project/app/pem-quest/page.tsx",
          "oldString": "  const getPEMQuestions = () => {\n    const scoreArrays = [[0,1,2,3,4], [0,1,2,3,4], [0,2,3,4,3], [0,1,2,3,4], [0,1,2,3,4]]\n    \n    return [\n      {\n        id: 'frequency',\n        question: t.pem.questions.frequency.question,\n        description: t.pem.questions.frequency.description,\n        options: t.pem.questions.frequency.options.map((label, index) => ({\n          value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n          label,\n          score: scoreArrays[0][index]\n        }))\n      },\n      {\n        id: 'mental_frequency',\n        question: t.pem.questions.mentalFrequency.question,\n        description: t.pem.questions.mentalFrequency.description,\n        options: t.pem.questions.mentalFrequency.options.map((label, index) => ({\n          value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n          label,\n          score: scoreArrays[1][index]\n        }))\n      },\n      {\n        id: 'onset_time',\n        question: t.pem.questions.onsetTime.question,\n        options: t.pem.questions.onsetTime.options.map((label, index) => ({\n          value: ['no_worsening', 'during', 'immediately', 'hours', 'next_day'][index],\n          label,\n          score: scoreArrays[2][index]\n        }))\n      },\n      {\n        id: 'severity',\n        question: t.pem.questions.severity.question,\n        options: t.pem.questions.severity.options.map((label, index) => ({\n          value: ['none', 'mild', 'moderate', 'severe', 'very_severe'][index],\n          label,\n          score: scoreArrays[3][index]\n        }))\n      },\n      {\n        id: 'recovery_time',\n        question: t.pem.questions.recoveryTime.question,\n        options: t.pem.questions.recoveryTime.options.map((label, index) => ({\n          value: ['no_recovery_needed', 'hours', 'one_day', 'several_days', 'week_or_more'][index],\n          label,\n          score: scoreArrays[4][index]\n        }))\n      }\n    ]\n  }",
          "newString": "  const getPEMQuestions = () => {\n    // NICE NG206 aligned scoring: Higher scores indicate more severe PEM\n    const scoreArrays = [[0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4]]\n    \n    return [\n      {\n        id: 'activity_tolerance',\n        question: t.pem.questions.activityTolerance.question,\n        description: t.pem.questions.activityTolerance.description,\n        options: t.pem.questions.activityTolerance.options.map((label, index) => ({\n          value: ['none', 'rare', 'sometimes', 'often', 'always'][index],\n          label,\n          score: scoreArrays[0][index]\n        }))\n      },\n      {\n        id: 'delayed_onset',\n        question: t.pem.questions.delayedOnset.question,\n        description: t.pem.questions.delayedOnset.description,\n        options: t.pem.questions.delayedOnset.options.map((label, index) => ({\n          value: ['no_delay', 'hours', 'several_hours', 'one_two_days', 'days_plus'][index],\n          label,\n          score: scoreArrays[1][index]\n        }))\n      },\n      {\n        id: 'disproportionate',\n        question: t.pem.questions.disproportionate.question,\n        description: t.pem.questions.disproportionate.description,\n        options: t.pem.questions.disproportionate.options.map((label, index) => ({\n          value: ['proportionate', 'slightly', 'moderately', 'significantly', 'severely'][index],\n          label,\n          score: scoreArrays[2][index]\n        }))\n      },\n      {\n        id: 'prolonged_recovery',\n        question: t.pem.questions.prolongedRecovery.question,\n        description: t.pem.questions.prolongedRecovery.description,\n        options: t.pem.questions.prolongedRecovery.options.map((label, index) => ({\n          value: ['no_recovery', 'hours', 'days', 'weeks', 'weeks_months'][index],\n          label,\n          score: scoreArrays[3][index]\n        }))\n      },\n      {\n        id: 'activity_types',\n        question: t.pem.questions.activityTypes.question,\n        description: t.pem.questions.activityTypes.description,\n        options: t.pem.questions.activityTypes.options.map((label, index) => ({\n          value: ['none', 'physical_only', 'physical_cognitive', 'physical_cognitive_emotional', 'all_types'][index],\n          label,\n          score: scoreArrays[4][index]\n        }))\n      }\n    ]\n  }"
        }
      ]
    },
    "output": "",
    "metadata": {
      "results": [
        {
          "diagnostics": {},
          "diff": "Index: /home/user/project/app/pem-quest/page.tsx\n===================================================================\n--- /home/user/project/app/pem-quest/page.tsx\n+++ /home/user/project/app/pem-quest/page.tsx\n@@ -48,54 +48,58 @@\n   }\n }\n \n const getPEMQuestions = () => {\n-  const scoreArrays = [[0,1,2,3,4], [0,1,2,3,4], [0,2,3,4,3], [0,1,2,3,4], [0,1,2,3,4]]\n+  // NICE NG206 aligned scoring: Higher scores indicate more severe PEM\n+  const scoreArrays = [[0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4], [0,1,2,3,4]]\n   \n   return [\n     {\n-      id: 'frequency',\n-      question: t.pem.questions.frequency.question,\n-      description: t.pem.questions.frequency.description,\n-      options: t.pem.questions.frequency.options.map((label, index) => ({\n-        value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n+      id: 'activity_tolerance',\n+      question: t.pem.questions.activityTolerance.question,\n+      description: t.pem.questions.activityTolerance.description,\n+      options: t.pem.questions.activityTolerance.options.map((label, index) => ({\n+        value: ['none', 'rare', 'sometimes', 'often', 'always'][index],\n         label,\n         score: scoreArrays[0][index]\n       }))\n     },\n     {\n-      id: 'mental_frequency',\n-      question: t.pem.questions.mentalFrequency.question,\n-      description: t.pem.questions.mentalFrequency.description,\n-      options: t.pem.questions.mentalFrequency.options.map((label, index) => ({\n-        value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n+      id: 'delayed_onset',\n+      question: t.pem.questions.delayedOnset.question,\n+      description: t.pem.questions.delayedOnset.description,\n+      options: t.pem.questions.delayedOnset.options.map((label, index) => ({\n+        value: ['no_delay', 'hours', 'several_hours', 'one_two_days', 'days_plus'][index],\n         label,\n         score: scoreArrays[1][index]\n       }))\n     },\n     {\n-      id: 'onset_time',\n-      question: t.pem.questions.onsetTime.question,\n-      options: t.pem.questions.onsetTime.options.map((label, index) => ({\n-        value: ['no_worsening', 'during', 'immediately', 'hours', 'next_day'][index],\n+      id: 'disproportionate',\n+      question: t.pem.questions.disproportionate.question,\n+      description: t.pem.questions.disproportionate.description,\n+      options: t.pem.questions.disproportionate.options.map((label, index) => ({\n+        value: ['proportionate', 'slightly', 'moderately', 'significantly', 'severely'][index],\n         label,\n         score: scoreArrays[2][index]\n       }))\n     },\n     {\n-      id: 'severity',\n-      question: t.pem.questions.severity.question,\n-      options: t.pem.questions.severity.options.map((label, index) => ({\n-        value: ['none', 'mild', 'moderate', 'severe', 'very_severe'][index],\n+      id: 'prolonged_recovery',\n+      question: t.pem.questions.prolongedRecovery.question,\n+      description: t.pem.questions.prolongedRecovery.description,\n+      options: t.pem.questions.prolongedRecovery.options.map((label, index) => ({\n+        value: ['no_recovery', 'hours', 'days', 'weeks', 'weeks_months'][index],\n         label,\n         score: scoreArrays[3][index]\n       }))\n     },\n     {\n-      id: 'recovery_time',\n-      question: t.pem.questions.recoveryTime.question,\n-      options: t.pem.questions.recoveryTime.options.map((label, index) => ({\n-        value: ['no_recovery_needed', 'hours', 'one_day', 'several_days', 'week_or_more'][index],\n+      id: 'activity_types',\n+      question: t.pem.questions.activityTypes.question,\n+      description: t.pem.questions.activityTypes.description,\n+      options: t.pem.questions.activityTypes.options.map((label, index) => ({\n+        value: ['none', 'physical_only', 'physical_cognitive', 'physical_cognitive_emotional', 'all_types'][index],\n         label,\n         score: scoreArrays[4][index]\n       }))\n     }\n"
        }
      ]
    },
    "title": "app/pem-quest/page.tsx",
    "time": {
      "start": 1758393964563,
      "end": 1758393964571
    }
  }
}