{
  "id": "prt_95938eaf5001Tc80X3pwoNLDjj",
  "messageID": "msg_95938adea001Xx6gKMMV8DLHGD",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "grep",
  "callID": "toolu_01Tvzt1ynRgZ4fagXSKYqDHN",
  "state": {
    "status": "completed",
    "input": {
      "pattern": "[A-Z][a-z].*[a-z]",
      "path": "/home/user/project/app/subtype-advisor"
    },
    "output": "Found 100 matches\n/home/user/project/app/subtype-advisor/page.tsx:\n  Line 3: import { useState } from 'react'\n  Line 4: import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n  Line 5: import { Button } from '@/components/ui/button'\n  Line 6: import { Checkbox } from '@/components/ui/checkbox'\n  Line 7: import { Badge } from '@/components/ui/badge'\n  Line 8: import { Alert, AlertDescription } from '@/components/ui/alert'\n  Line 9: import { Input } from '@/components/ui/input'\n  Line 10: import { Label } from '@/components/ui/label'\n  Line 11: import { ArrowLeft, Users, Pill, Heart, Droplets, Activity, Brain, Shield, Download } from 'lucide-react'\n  Line 12: import Link from 'next/link'\n  Line 13: import { useTranslation } from '@/lib/language-context'\n  Line 15: interface POTSSubtype {\n  Line 23:     nonPharmacological: string[]\n  Line 24:     firstLine: string[]\n  Line 25:     secondLine: string[]\n  Line 29: const createSubtypes = (t: any): POTSSubtype[] => [\n  Line 34:     icon: Droplets,\n  Line 42:       nonPharmacological: t.subtype.subtypes.hypovolemic.treatments.nonPharmacological,\n  Line 43:       firstLine: t.subtype.subtypes.hypovolemic.treatments.firstLine,\n  Line 44:       secondLine: t.subtype.subtypes.hypovolemic.treatments.secondLine\n  Line 51:     icon: Brain,\n  Line 59:       nonPharmacological: t.subtype.subtypes.neuropathic.treatments.nonPharmacological,\n  Line 60:       firstLine: t.subtype.subtypes.neuropathic.treatments.firstLine,\n  Line 61:       secondLine: t.subtype.subtypes.neuropathic.treatments.secondLine\n  Line 68:     icon: Activity,\n  Line 76:       nonPharmacological: t.subtype.subtypes.hyperadrenergic.treatments.nonPharmacological,\n  Line 77:       firstLine: t.subtype.subtypes.hyperadrenergic.treatments.firstLine,\n  Line 78:       secondLine: t.subtype.subtypes.hyperadrenergic.treatments.secondLine\n  Line 85:     icon: Shield,\n  Line 93:       nonPharmacological: t.subtype.subtypes.autoimmune.treatments.nonPharmacological,\n  Line 94:       firstLine: t.subtype.subtypes.autoimmune.treatments.firstLine,\n  Line 95:       secondLine: t.subtype.subtypes.autoimmune.treatments.secondLine\n  Line 100: export default function SubtypeAdvisor() {\n  Line 101:   const { t } = useTranslation()\n  Line 102:   const potsSubtypes = createSubtypes(t)\n  Line 103:   const [subtypeData, setSubtypeData] = useState(potsSubtypes.map(s => ({ ...s })))\n  Line 104:   const [patientAge, setPatientAge] = useState<number | null>(null)\n  Line 105:   const [comorbidities, setComorbidities] = useState<string[]>([])\n  Line 106:   const [isComplete, setIsComplete] = useState(false)\n  Line 108:   const handleCriteriaChange = (subtypeId: string, criteriaId: string, checked: boolean) => {\n  Line 109:     setSubtypeData(prev => prev.map(subtype => \n  Line 114:               c.id === criteriaId ? { ...c, checked } : c\n  Line 121:   const calculateSubtypeScores = () => {\n  Line 122:     return subtypeData.map(subtype => {\n  Line 124:       const maxScore = subtype.criteria.length\n  Line 125:       const percentage = (score / maxScore) * 100\n  Line 130:         maxScore,\n  Line 131:         percentage: Math.round(percentage),\n  Line 137:   const generateTreatmentPlan = () => {\n  Line 138:     const scores = calculateSubtypeScores()\n  Line 139:     const primarySubtype = scores[0]\n  Line 140:     const secondarySubtypes = scores.filter(s => s.percentage >= 40 && s.id !== primarySubtype.id)\n  Line 146:     plan += `${t.subtype.results.primary}: ${primarySubtype.name} (${primarySubtype.percentage}% ${t.subtype.results.likelihood})\\n`\n  Line 147:     if (secondarySubtypes.length > 0) {\n  Line 148:       plan += \"Secondary considerations:\\n\"\n  Line 149:       secondarySubtypes.forEach(s => {\n  Line 155:     plan += `${t.common.recommendations.toUpperCase()}:\\n\\n`\n  Line 156:     plan += `${t.subtype.results.nonPharmacological}:\\n`\n  Line 157:     primarySubtype.treatments.nonPharmacological.forEach(treatment => {\n  Line 162:     plan += `${t.subtype.results.firstLineRx}:\\n`\n  Line 163:     primarySubtype.treatments.firstLine.forEach(treatment => {\n  Line 168:     plan += `${t.subtype.results.secondLineOptions}:\\n`\n  Line 169:     primarySubtype.treatments.secondLine.forEach(treatment => {\n  Line 176:   if (isComplete) {\n  Line 177:     const scores = calculateSubtypeScores()\n  Line 178:     const primarySubtype = scores[0]\n  Line 179:     const secondarySubtypes = scores.filter(s => s.percentage >= 40 && s.id !== primarySubtype.id)\n  Line 182:       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n  Line 183:         <div className=\"container mx-auto px-4 max-w-5xl\">\n  Line 184:           <Card>\n  Line 185:             <CardHeader className=\"text-center\">\n  Line 186:                 <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n  Line 187:                 <Users className=\"h-6 w-6 text-blue-600\" />\n  Line 189:               </CardTitle>\n  Line 190:               <CardDescription>\n  Line 192:               </CardDescription>\n  Line 193:             </CardHeader>\n  Line 194:             <CardContent className=\"space-y-6\">\n  Line 195:               <div className=\"text-center\">\n  Line 196:                 <Badge className={`px-4 py-2 text-lg bg-${primarySubtype.color}-100 text-${primarySubtype.color}-800`}>\n  Line 197:                   {t.subtype.results.primary}: {primarySubtype.name}\n  Line 198:                 </Badge>\n  Line 199:                 <p className=\"text-sm text-gray-600 mt-2\">\n  Line 200:                   {primarySubtype.percentage}% {t.subtype.results.likelihood} ({primarySubtype.score}/{primarySubtype.maxScore} {t.common.criteria})\n  Line 204:               <div className=\"grid md:grid-cols-2 gap-6\">\n  Line 205:                 <Card className={`border-${primarySubtype.color}-200`}>\n  Line 206:                   <CardHeader className=\"pb-3\">\n  Line 207:                     <CardTitle className={`text-lg text-${primarySubtype.color}-800 flex items-center gap-2`}>\n  Line 208:                       <primarySubtype.icon className=\"h-5 w-5\" />\n  Line 209:                       {primarySubtype.name}\n  Line 210:                     </CardTitle>\n  Line 211:                     <CardDescription>{primarySubtype.description}</CardDescription>\n  Line 212:                   </CardHeader>\n  Line 213:                   <CardContent>\n  Line 214:                     <div className=\"space-y-2\">\n  Line 215:                       <h4 className=\"font-semibold text-sm\">{t.subtype.results.criteriaMetTitle}:</h4>\n  Line 216:                       {primarySubtype.criteria.filter(c => c.checked).map((criterion, index) => (\n  Line 217:                         <div key={index} className=\"text-sm flex items-center gap-2\">\n  Line 218:                           <span className=\"text-green-600\">âœ“</span>\n  Line 223:                   </CardContent>\n\n(Results are truncated. Consider using a more specific path or pattern.)",
    "metadata": {
      "matches": 100,
      "truncated": true
    },
    "title": "[A-Z][a-z].*[a-z]",
    "time": {
      "start": 1758138527536,
      "end": 1758138527575
    }
  }
}