{
  "id": "prt_962fc0129001fIc7M2tO9Rf9cK",
  "messageID": "msg_962fba899001VkzocRY6Po1psD",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01CpZnzzxJnTMmXuCDaFLRPf",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/stand-test/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect, useRef } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Input } from '@/components/ui/input'\n00007| import { Label } from '@/components/ui/label'\n00008| import { Progress } from '@/components/ui/progress'\n00009| import { Badge } from '@/components/ui/badge'\n00010| import { Alert, AlertDescription } from '@/components/ui/alert'\n00011| import { ArrowLeft, Heart, Play, Pause, Square, Timer, TrendingUp, AlertTriangle } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| import { useTranslation } from '@/lib/language-context'\n00014| import PPGCamera from '@/components/ppg-camera'\n00015| \n00016| interface HeartRateReading {\n00017|   time: number\n00018|   hr: number\n00019|   bp?: { systolic: number; diastolic: number }\n00020| }\n00021| \n00022| interface TestPhase {\n00023|   name: string\n00024|   duration: number\n00025|   position: 'lying' | 'standing'\n00026|   instructions: string\n00027| }\n00028| \n00029| // Test phases will be generated from translations\n00030| \n00031| export default function StandTest() {\n00032|   const [currentPhase, setCurrentPhase] = useState(0)\n00033|   const [timeElapsed, setTimeElapsed] = useState(0)\n00034|   const [isRunning, setIsRunning] = useState(false)\n00035|   const [isPaused, setIsPaused] = useState(false)\n00036|   const [readings, setReadings] = useState<HeartRateReading[]>([])\n00037|   const [currentHR, setCurrentHR] = useState<number | null>(null)\n00038|   const [currentBP, setCurrentBP] = useState<{ systolic: number; diastolic: number } | null>(null)\n00039|   const [isComplete, setIsComplete] = useState(false)\n00040|   const [testMethod, setTestMethod] = useState<'manual' | 'camera'>('manual')\n00041|   const [ppgStatus, setPPGStatus] = useState<'stopped' | 'starting' | 'detecting' | 'measuring'>('stopped')\n00042|   const { t } = useTranslation()\n00043|   \n00044|   const intervalRef = useRef<NodeJS.Timeout | null>(null)\n00045| \n00046|   useEffect(() => {\n00047|     if (isRunning && !isPaused) {\n00048|       intervalRef.current = setInterval(() => {\n00049|         setTimeElapsed(prev => prev + 1)\n00050|       }, 1000)\n00051|     } else {\n00052|       if (intervalRef.current) {\n00053|         clearInterval(intervalRef.current)\n00054|       }\n00055|     }\n00056| \n00057|     return () => {\n00058|       if (intervalRef.current) {\n00059|         clearInterval(intervalRef.current)\n00060|       }\n00061|     }\n00062|   }, [isRunning, isPaused])\n00063| \n00064|   const getTestPhases = () => [\n00065|     {\n00066|       name: t.standTest.phases.baseline.name,\n00067|       duration: 300, // 5 minutes\n00068|       position: 'lying' as const,\n00069|       instructions: t.standTest.phases.baseline.instructions\n00070|     },\n00071|     {\n00072|       name: t.standTest.phases.standing.name,\n00073|       duration: 600, // 10 minutes\n00074|       position: 'standing' as const,\n00075|       instructions: t.standTest.phases.standing.instructions\n00076|     }\n00077|   ]\n00078| \n00079|   useEffect(() => {\n00080|     const testPhases = getTestPhases()\n00081|     const phase = testPhases[currentPhase]\n00082|     if (phase && timeElapsed >= phase.duration && currentPhase < testPhases.length - 1) {\n00083|       setCurrentPhase(prev => prev + 1)\n00084|       setTimeElapsed(0)\n00085|     } else if (phase && timeElapsed >= phase.duration && currentPhase === testPhases.length - 1) {\n00086|       setIsRunning(false)\n00087|       setIsComplete(true)\n00088|     }\n00089|   }, [timeElapsed, currentPhase, t])\n00090| \n00091|   const startTest = () => {\n00092|     setIsRunning(true)\n00093|     setIsPaused(false)\n00094|     setTimeElapsed(0)\n00095|     setCurrentPhase(0)\n00096|     setReadings([])\n00097|     setIsComplete(false)\n00098|   }\n00099| \n00100|   const pauseTest = () => {\n00101|     setIsPaused(!isPaused)\n00102|   }\n00103| \n00104|   const stopTest = () => {\n00105|     setIsRunning(false)\n00106|     setIsPaused(false)\n00107|     setTimeElapsed(0)\n00108|     setCurrentPhase(0)\n00109|   }\n00110| \n00111|   const addReading = () => {\n00112|     if (currentHR) {\n00113|       const reading: HeartRateReading = {\n00114|         time: timeElapsed,\n00115|         hr: currentHR,\n00116|         bp: currentBP || undefined\n00117|       }\n00118|       setReadings(prev => [...prev, reading])\n00119|       setCurrentHR(null)\n00120|       setCurrentBP(null)\n00121|     }\n00122|   }\n00123| \n00124|   const handlePPGHeartRate = (heartRate: number) => {\n00125|     const reading: HeartRateReading = {\n00126|       time: timeElapsed,\n00127|       hr: heartRate,\n00128|       bp: undefined\n00129|     }\n00130|     setReadings(prev => [...prev, reading])\n00131|   }\n00132| \n00133|   const calculateResults = () => {\n00134|     const lyingReadings = readings.filter(r => r.time < 300)\n00135|     const standingReadings = readings.filter(r => r.time >= 300)\n00136|     \n00137|     if (lyingReadings.length === 0 || standingReadings.length === 0) {\n00138|       return null\n00139|     }\n00140| \n00141|     const baselineHR = lyingReadings.reduce((sum, r) => sum + r.hr, 0) / lyingReadings.length\n00142|     const maxStandingHR = Math.max(...standingReadings.map(r => r.hr))\n00143|     const hrIncrease = maxStandingHR - baselineHR\n00144| \n00145|     // POTS criteria: HR increase ≥30 bpm (≥40 for ages 12-19)\n00146|     const potsThreshold = 30\n00147|     const meetsPOTSCriteria = hrIncrease >= potsThreshold\n00148| \n00149|     // Calculate sustained HR increase (average of standing phase)\n00150|     const sustainedStandingHR = standingReadings.reduce((sum, r) => sum + r.hr, 0) / standingReadings.length\n00151|     const sustainedHRIncrease = sustainedStandingHR - baselineHR\n00152| \n00153|     return {\n00154|       baselineHR: Math.round(baselineHR),\n00155|       maxStandingHR: Math.round(maxStandingHR),\n00156|       sustainedStandingHR: Math.round(sustainedStandingHR),\n00157|       hrIncrease: Math.round(hrIncrease),\n00158|       sustainedHRIncrease: Math.round(sustainedHRIncrease),\n00159|       meetsPOTSCriteria,\n00160|       potsThreshold\n00161|     }\n00162|   }\n00163| \n00164|   const formatTime = (seconds: number) => {\n00165|     const mins = Math.floor(seconds / 60)\n00166|     const secs = seconds % 60\n00167|     return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n00168|   }\n00169| \n00170|   const currentPhaseData = getTestPhases()[currentPhase]\n00171|   const progress = currentPhaseData ? (timeElapsed / currentPhaseData.duration) * 100 : 0\n00172|   const results = calculateResults()\n00173| \n00174|   if (isComplete && results) {\n00175|     return (\n00176|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00177|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00178|           <Card>\n00179|             <CardHeader className=\"text-center\">\n00180|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00181|                 <Heart className=\"h-6 w-6 text-red-600\" />\n00182|                 {t.standTest.results.title}\n00183|               </CardTitle>\n00184|               <CardDescription>\n00185|                 {t.standTest.results.description}\n00186|               </CardDescription>\n00187|             </CardHeader>\n00188|             <CardContent className=\"space-y-6\">\n00189|               <div className=\"text-center\">\n00190|                 <Badge \n00191|                   className={`px-4 py-2 text-lg ${\n00192|                     results.meetsPOTSCriteria \n00193|                       ? 'bg-red-100 text-red-800' \n00194|                       : 'bg-green-100 text-green-800'\n00195|                   }`}\n00196|                 >\n00197|                   {results.meetsPOTSCriteria ? t.standTest.results.potsMet : t.standTest.results.potsNotMet}\n00198|                 </Badge>\n00199|               </div>\n00200| \n00201|               <div className=\"grid md:grid-cols-3 gap-4\">\n00202|                 <Card className=\"border-blue-200\">\n00203|                   <CardHeader className=\"pb-3\">\n00204|                     <CardTitle className=\"text-lg text-blue-800\">{t.standTest.results.baseline}</CardTitle>\n00205|                   </CardHeader>\n00206|                   <CardContent>\n00207|                     <div className=\"text-2xl font-bold text-blue-900\">\n00208|                       {results.baselineHR} bpm\n00209|                     </div>\n00210|                     <p className=\"text-sm text-blue-700\">{t.standTest.results.averageHR}</p>\n00211|                   </CardContent>\n00212|                 </Card>\n00213| \n00214|                 <Card className=\"border-orange-200\">\n00215|                   <CardHeader className=\"pb-3\">\n00216|                     <CardTitle className=\"text-lg text-orange-800\">{t.standTest.results.peakStanding}</CardTitle>\n00217|                   </CardHeader>\n00218|                   <CardContent>\n00219|                     <div className=\"text-2xl font-bold text-orange-900\">\n00220|                       {results.maxStandingHR} bpm\n00221|                     </div>\n00222|                     <p className=\"text-sm text-orange-700\">{t.standTest.results.maxHR}</p>\n00223|                     <Badge variant=\"outline\" className=\"mt-1\">\n00224|                       +{results.hrIncrease} bpm\n00225|                     </Badge>\n00226|                   </CardContent>\n00227|                 </Card>\n00228| \n00229|                 <Card className=\"border-purple-200\">\n00230|                   <CardHeader className=\"pb-3\">\n00231|                     <CardTitle className=\"text-lg text-purple-800\">{t.standTest.results.sustainedStanding}</CardTitle>\n00232|                   </CardHeader>\n00233|                   <CardContent>\n00234|                     <div className=\"text-2xl font-bold text-purple-900\">\n00235|                       {results.sustainedStandingHR} bpm\n00236|                     </div>\n00237|                     <p className=\"text-sm text-purple-700\">{t.standTest.results.averageHR}</p>\n00238|                     <Badge variant=\"outline\" className=\"mt-1\">\n00239|                       +{results.sustainedHRIncrease} bpm\n00240|                     </Badge>\n00241|                   </CardContent>\n00242|                 </Card>\n00243|               </div>\n00244| \n00245|               {results.meetsPOTSCriteria && (\n00246|                 <Alert className=\"border-red-200 bg-red-50\">\n00247|                   <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n00248|                   <AlertDescription className=\"text-red-800\">\n00249|                     <strong>POTS Criteria Met:</strong> Heart rate increase of {results.hrIncrease} bpm \n00250|                     exceeds the threshold of {results.potsThreshold} bpm. Consider POTS subtyping and \n00251|                     further evaluation.\n00252|                   </AlertDescription>\n00253|                 </Alert>\n00254|               )}\n00255| \n00256|               <div className=\"bg-gray-50 p-4 rounded-lg\">\n00257|                 <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n00258|                   <TrendingUp className=\"h-4 w-4\" />\n00259|                   {t.standTest.results.interpretation}\n00260|                 </h4>\n00261|                 <div className=\"text-sm space-y-2\">\n00262|                   {results.meetsPOTSCriteria ? \n00263|                     t.standTest.interpretations.potsMet.map((interpretation, index) => (\n00264|                       <p key={index}>• {interpretation}</p>\n00265|                     )) :\n00266|                     t.standTest.interpretations.potsNotMet.map((interpretation, index) => (\n00267|                       <p key={index}>• {interpretation}</p>\n00268|                     ))\n00269|                   }\n00270|                 </div>\n00271|               </div>\n00272| \n00273|               <div className=\"bg-blue-50 p-4 rounded-lg\">\n00274|                 <h4 className=\"font-semibold mb-2 text-blue-900\">{t.standTest.results.nextSteps}</h4>\n00275|                 <div className=\"text-sm text-blue-800 space-y-1\">\n00276|                   <p>• Complete PEM-Quest assessment</p>\n00277|                   <p>• Proceed to Criteria Engine for comprehensive diagnosis</p>\n00278|                   {results.meetsPOTSCriteria && (\n00279|                     <p>• Continue to Subtype & Treatment Advisor for POTS management</p>\n00280|                   )}\n00281|                 </div>\n00282|               </div>\n00283| \n00284|               <div className=\"flex gap-4 justify-center\">\n00285|                 <Button onClick={() => {\n00286|                   setIsComplete(false)\n00287|                   setReadings([])\n00288|                   setTimeElapsed(0)\n00289|                   setCurrentPhase(0)\n00290|                 }} variant=\"outline\">\n00291|                   {t.standTest.results.repeatTest}\n00292|                 </Button>\n00293|                 <Button asChild>\n00294|                   <Link href=\"/pem-quest\">\n00295|                       {t.common.continue} to PEM-Quest\n00296|                   </Link>\n00297|                 </Button>\n00298|               </div>\n00299|             </CardContent>\n00300|           </Card>\n00301|         </div>\n00302|       </div>\n00303|     )\n00304|   }\n00305| \n00306|   return (\n00307|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00308|       <div className=\"container mx-auto px-4 max-w-4xl\">\n00309|         <div className=\"mb-6\">\n00310|           \n00311|           <div className=\"flex items-center gap-4 mb-4\">\n00312|             <Heart className=\"h-5 w-5 text-red-600\" />\n00313|             <div>\n00314|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.standTest.title}</h1>\n00315|               <p className=\"text-gray-600\">{t.standTest.description}</p>\n00316|             </div>\n00317|           </div>\n00318|         </div>\n00319| \n00320|         <div className=\"space-y-6\">\n00321|           {!isRunning && readings.length === 0 && (\n00322|             <Card>\n00323|               <CardHeader>\n00324|                 <CardTitle>{t.standTest.setup.title}</CardTitle>\n00325|                 <CardDescription>\n00326|                   {t.standTest.setup.description}\n00327|                 </CardDescription>\n00328|               </CardHeader>\n00329|               <CardContent className=\"space-y-4\">\n00330|                 <div className=\"grid md:grid-cols-2 gap-4\">\n00331|                   <Card \n00332|                     className={`cursor-pointer transition-all ${\n00333|                       testMethod === 'manual' ? 'ring-2 ring-blue-500' : ''\n00334|                     }`}\n00335|                     onClick={() => setTestMethod('manual')}\n00336|                   >\n00337|                     <CardContent className=\"pt-6\">\n00338|                       <h3 className=\"font-semibold mb-2\">{t.standTest.setup.manual.title}</h3>\n00339|                       <p className=\"text-sm text-gray-600 mb-4\">\n00340|                         {t.standTest.setup.manual.description}\n00341|                       </p>\n00342|                       <Badge variant=\"outline\">{t.standTest.setup.manual.recommended}</Badge>\n00343|                     </CardContent>\n00344|                   </Card>\n00345|                   \n00346|                   <Card \n00347|                     className={`cursor-pointer transition-all ${\n00348|                       testMethod === 'camera' ? 'ring-2 ring-blue-500' : ''\n00349|                     }`}\n00350|                     onClick={() => setTestMethod('camera')}\n00351|                   >\n00352|                     <CardContent className=\"pt-6\">\n00353|                       <h3 className=\"font-semibold mb-2\">{t.standTest.setup.camera.title}</h3>\n00354|                       <p className=\"text-sm text-gray-600 mb-4\">\n00355|                         {t.standTest.setup.camera.description}\n00356|                       </p>\n00357|                       <Badge variant=\"secondary\">{t.standTest.setup.camera.beta}</Badge>\n00358|                     </CardContent>\n00359|                   </Card>\n00360|                 </div>\n00361| \n00362|                 <Alert>\n00363|                   <AlertTriangle className=\"h-4 w-4\" />\n00364|                   <AlertDescription>\n00365|                     {t.standTest.setup.safety}\n00366|                   </AlertDescription>\n00367|                 </Alert>\n00368| \n00369|                 <Button onClick={startTest} className=\"w-full\" size=\"lg\">\n00370|                   <Play className=\"h-4 w-4 mr-2\" />\n00371|                   {t.standTest.setup.startTest}\n00372|                 </Button>\n00373|               </CardContent>\n00374|             </Card>\n00375|           )}\n00376| \n00377|           {isRunning && (\n00378|             <>\n00379|               <Card>\n00380|                 <CardHeader>\n00381|                   <CardTitle className=\"flex items-center justify-between\">\n00382|                     <span>Phase: {currentPhaseData?.name}</span>\n00383|                     <div className=\"flex items-center gap-2\">\n00384|                       <Timer className=\"h-4 w-4\" />\n00385|                       {formatTime(timeElapsed)} / {formatTime(currentPhaseData?.duration || 0)}\n00386|                     </div>\n00387|                   </CardTitle>\n00388|                   <CardDescription className=\"flex items-center justify-between\">\n00389|                     <span>{currentPhaseData?.instructions}</span>\n00390|                     {testMethod === 'camera' && (\n00391|                       <Badge variant={ppgStatus === 'measuring' ? 'default' : 'secondary'} className=\"ml-2\">\n00392|                         PPG: {ppgStatus}\n00393|                       </Badge>\n00394|                     )}\n00395|                   </CardDescription>\n00396|                 </CardHeader>\n00397|                 <CardContent>\n00398|                   <Progress value={progress} className=\"h-3 mb-4\" />\n00399|                   \n00400|                   <div className=\"flex gap-4 justify-center mb-4\">\n00401|                     <Button onClick={pauseTest} variant=\"outline\">\n00402|                       {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n00403|                       {isPaused ? t.standTest.controls.resume : t.standTest.controls.pause}\n00404|                     </Button>\n00405|                     <Button onClick={stopTest} variant=\"destructive\">\n00406|                       <Square className=\"h-4 w-4 mr-2\" />\n00407|                       {t.standTest.controls.stop}\n00408|                     </Button>\n00409|                   </div>\n00410|                 </CardContent>\n00411|               </Card>\n00412| \n00413|               {testMethod === 'manual' ? (\n00414|                 <Card>\n00415|                   <CardHeader>\n00416|                   <CardTitle>{t.standTest.recording.title}</CardTitle>\n00417|                   <CardDescription>\n00418|                     {t.standTest.recording.description}\n00419|                   </CardDescription>\n00420|                   </CardHeader>\n00421|                   <CardContent className=\"space-y-4\">\n00422|                     <div className=\"grid md:grid-cols-3 gap-4\">\n00423|                       <div>\n00424|                         <Label htmlFor=\"hr\">Heart Rate ({t.common.bpm})</Label>\n00425|                         <Input\n00426|                           id=\"hr\"\n00427|                           type=\"number\"\n00428|                           placeholder=\"75\"\n00429|                           value={currentHR || ''}\n00430|                           onChange={(e) => setCurrentHR(parseInt(e.target.value) || null)}\n00431|                         />\n00432|                       </div>\n00433|                       <div>\n00434|                         <Label htmlFor=\"systolic\">{t.standTest.recording.systolicBP}</Label>\n00435|                         <Input\n00436|                           id=\"systolic\"\n00437|                           type=\"number\"\n00438|                           placeholder=\"120\"\n00439|                           value={currentBP?.systolic || ''}\n00440|                           onChange={(e) => setCurrentBP(prev => ({\n00441|                             ...prev,\n00442|                             systolic: parseInt(e.target.value) || 0,\n00443|                             diastolic: prev?.diastolic || 0\n00444|                           }))}\n00445|                         />\n00446|                       </div>\n00447|                       <div>\n00448|                         <Label htmlFor=\"diastolic\">{t.standTest.recording.diastolicBP}</Label>\n00449|                         <Input\n00450|                           id=\"diastolic\"\n00451|                           type=\"number\"\n00452|                           placeholder=\"80\"\n00453|                           value={currentBP?.diastolic || ''}\n00454|                           onChange={(e) => setCurrentBP(prev => ({\n00455|                             ...prev,\n00456|                             systolic: prev?.systolic || 0,\n00457|                             diastolic: parseInt(e.target.value) || 0\n00458|                           }))}\n00459|                         />\n00460|                       </div>\n00461|                     </div>\n00462|                     \n00463|                     <Button onClick={addReading} disabled={!currentHR} className=\"w-full\">\n00464|                       {t.standTest.recording.recordReading} at {formatTime(timeElapsed)}\n00465|                     </Button>\n00466|                   </CardContent>\n00467|                 </Card>\n00468|               ) : (\n00469|                 <PPGCamera\n00470|                   onHeartRateDetected={handlePPGHeartRate}\n00471|                   isActive={isRunning && !isPaused}\n00472|                   onStatusChange={setPPGStatus}\n00473|                 />\n00474|               )}\n00475| \n00476|               {readings.length > 0 && (\n00477|                 <Card>\n00478|                   <CardHeader>\n00479|                     <CardTitle>{t.standTest.recording.recentReadings}</CardTitle>\n00480|                   </CardHeader>\n00481|                   <CardContent>\n00482|                     <div className=\"bg-gray-50 p-4 rounded-lg\">\n00483|                       <div className=\"text-sm space-y-1\">\n00484|                         {readings.slice(-5).map((reading, index) => (\n00485|                           <div key={index} className=\"flex justify-between\">\n00486|                             <span>{formatTime(reading.time)}</span>\n00487|                             <span>{reading.hr} {t.common.bpm}</span>\n00488|                           </div>\n00489|                         ))}\n00490|                       </div>\n00491|                     </div>\n00492|                   </CardContent>\n00493|                 </Card>\n00494|               )}\n00495|             </>\n00496|           )}\n00497|         </div>\n00498|       </div>\n00499|     </div>\n00500|   )\n00501| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { ArrowLeft, Heart, Play, Pause, Square, Timer, TrendingUp, AlertTriangle } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\nimport PPGCamera from '@/components/ppg-camera'\n\ninterface HeartRateReading {\n  time: number\n  hr: number\n  bp?: { systolic: number; diastolic: number }\n}"
    },
    "title": "app/stand-test/page.tsx",
    "time": {
      "start": 1758302307179,
      "end": 1758302307183
    }
  }
}