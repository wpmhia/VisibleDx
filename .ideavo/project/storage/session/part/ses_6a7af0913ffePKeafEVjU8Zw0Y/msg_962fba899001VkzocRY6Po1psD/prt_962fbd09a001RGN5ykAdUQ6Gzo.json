{
  "id": "prt_962fbd09a001RGN5ykAdUQ6Gzo",
  "messageID": "msg_962fba899001VkzocRY6Po1psD",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01MnpkdcLn6P1CR29thhV1jM",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/red-flag-checker/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Checkbox } from '@/components/ui/checkbox'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { Alert, AlertDescription } from '@/components/ui/alert'\n00009| import { FileText, AlertTriangle, CheckCircle, Activity, Heart, Brain } from 'lucide-react'\n00010| import Link from 'next/link'\n00011| import { useTranslation } from '@/lib/language-context'\n00012| \n00013| const getRedFlagSymptoms = (t: any) => t.redFlag.symptoms.list.map((symptom: string, index: number) => ({\n00014|   id: ['fever', 'weight_loss', 'chest_pain', 'dyspnea', 'neurological', 'bleeding', 'lymphadenopathy', 'jaundice'][index],\n00015|   symptom,\n00016|   category: t.redFlag.urgentCategories[index] || t.redFlag.urgentCategories[0],\n00017|   priority: 'high',\n00018|   tests: [\n00019|     ['CBC with differential', 'ESR', 'CRP', 'Blood cultures', 'Chest X-ray'],\n00020|     ['CBC', 'Comprehensive metabolic panel', 'TSH', 'HbA1c', 'CT chest/abdomen/pelvis'],\n00021|     ['ECG', 'Troponin', 'Chest X-ray', 'Echocardiogram', 'Stress test'],\n00022|     ['Chest X-ray', 'ECG', 'Echocardiogram', 'Pulmonary function tests', 'D-dimer'],\n00023|     ['MRI brain', 'Neurological consultation', 'EEG if seizures'],\n00024|     ['CBC with platelet count', 'PT/PTT', 'Peripheral blood smear'],\n00025|     ['CBC with differential', 'LDH', 'CT chest/abdomen/pelvis'],\n00026|     ['Liver function tests', 'Hepatitis panel', 'Abdominal ultrasound']\n00027|   ][index]\n00028| }))\n00029| \n00030| const getRoutineLabs = (t: any) => [\n00031|   {\n00032|     category: t.redFlag.routineLabs.categories.basicMetabolic.title,\n00033|     tests: t.redFlag.routineLabs.categories.basicMetabolic.tests,\n00034|     indication: t.redFlag.routineLabs.categories.basicMetabolic.indication\n00035|   },\n00036|   {\n00037|     category: t.redFlag.routineLabs.categories.endocrine.title,\n00038|     tests: t.redFlag.routineLabs.categories.endocrine.tests,\n00039|     indication: t.redFlag.routineLabs.categories.endocrine.indication\n00040|   },\n00041|   {\n00042|     category: t.redFlag.routineLabs.categories.nutritional.title,\n00043|     tests: t.redFlag.routineLabs.categories.nutritional.tests,\n00044|     indication: t.redFlag.routineLabs.categories.nutritional.indication\n00045|   },\n00046|   {\n00047|     category: t.redFlag.routineLabs.categories.autoimmune.title,\n00048|     tests: t.redFlag.routineLabs.categories.autoimmune.tests,\n00049|     indication: t.redFlag.routineLabs.categories.autoimmune.indication\n00050|   },\n00051|   {\n00052|     category: t.redFlag.routineLabs.categories.cardiac.title,\n00053|     tests: t.redFlag.routineLabs.categories.cardiac.tests,\n00054|     indication: t.redFlag.routineLabs.categories.cardiac.indication\n00055|   },\n00056|   {\n00057|     category: t.redFlag.routineLabs.categories.infectious.title,\n00058|     tests: t.redFlag.routineLabs.categories.infectious.tests,\n00059|     indication: t.redFlag.routineLabs.categories.infectious.indication\n00060|   }\n00061| ]\n00062| \n00063| export default function RedFlagChecker() {\n00064|   const [selectedRedFlags, setSelectedRedFlags] = useState<string[]>([])\n00065|   const [selectedRoutineLabs, setSelectedRoutineLabs] = useState<string[]>([])\n00066|   const [isComplete, setIsComplete] = useState(false)\n00067|   const { t } = useTranslation()\n00068|   const redFlagSymptoms = getRedFlagSymptoms(t)\n00069|   const routineLabs = getRoutineLabs(t)\n00070| \n00071|   const handleRedFlagChange = (redFlagId: string, checked: boolean) => {\n00072|     if (checked) {\n00073|       setSelectedRedFlags(prev => [...prev, redFlagId])\n00074|     } else {\n00075|       setSelectedRedFlags(prev => prev.filter(id => id !== redFlagId))\n00076|     }\n00077|   }\n00078| \n00079|   const handleRoutineLabChange = (categoryKey: string, checked: boolean) => {\n00080|     if (checked) {\n00081|       setSelectedRoutineLabs(prev => [...prev, categoryKey])\n00082|     } else {\n00083|       setSelectedRoutineLabs(prev => prev.filter(cat => cat !== categoryKey))\n00084|     }\n00085|   }\n00086| \n00087|   const generateRecommendations = () => {\n00088|     const urgentTests = new Set<string>()\n00089|     const routineTests = new Set<string>()\n00090|     \n00091|     // Add tests based on red flags\n00092|     selectedRedFlags.forEach(flagId => {\n00093|       const flag = redFlagSymptoms.find(f => f.id === flagId)\n00094|       if (flag) {\n00095|         flag.tests.forEach(test => urgentTests.add(test))\n00096|       }\n00097|     })\n00098| \n00099|     // Add routine tests\n00100|     selectedRoutineLabs.forEach(categoryKey => {\n00101|       const category = routineLabs.find(cat => cat.category === categoryKey)\n00102|       if (category) {\n00103|         category.tests.forEach(test => routineTests.add(test))\n00104|       }\n00105|     })\n00106| \n00107|     const hasHighPriorityFlags = selectedRedFlags.some(flagId => \n00108|       redFlagSymptoms.find(f => f.id === flagId)?.priority === 'high'\n00109|     )\n00110| \n00111|     return {\n00112|       urgentTests: Array.from(urgentTests),\n00113|       routineTests: Array.from(routineTests),\n00114|       hasHighPriorityFlags,\n00115|       recommendation: hasHighPriorityFlags ? 'urgent' : selectedRedFlags.length > 0 ? 'priority' : 'routine'\n00116|     }\n00117|   }\n00118| \n00119|   if (isComplete) {\n00120|     const recommendations = generateRecommendations()\n00121|     \n00122|     return (\n00123|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00124|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00125|           <Card>\n00126|             <CardHeader className=\"text-center\">\n00127|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00128|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00129|                 {t.redFlag.results.complete}\n00130|               </CardTitle>\n00131|               <CardDescription>\n00132|                 Laboratory and diagnostic recommendations based on clinical presentation\n00133|               </CardDescription>\n00134|             </CardHeader>\n00135|             <CardContent className=\"space-y-6\">\n00136|               {recommendations.hasHighPriorityFlags && (\n00137|                 <Alert className=\"border-red-200 bg-red-50\">\n00138|                   <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n00139|                   <AlertDescription className=\"text-red-800\">\n00140|                     <strong>{t.redFlag.results.urgentEval}:</strong> High-priority red flags detected. \n00141|                     Consider immediate or expedited workup.\n00142|                   </AlertDescription>\n00143|                 </Alert>\n00144|               )}\n00145| \n00146|               <div className=\"grid md:grid-cols-2 gap-6\">\n00147|                 {recommendations.urgentTests.length > 0 && (\n00148|                   <Card className=\"border-red-200\">\n00149|                     <CardHeader className=\"pb-3\">\n00150|                       <CardTitle className=\"text-lg text-red-800 flex items-center gap-2\">\n00151|                         <Heart className=\"h-5 w-5\" />\n00152|                         {t.redFlag.results.priorityTests}\n00153|                       </CardTitle>\n00154|                     </CardHeader>\n00155|                     <CardContent>\n00156|                       <ul className=\"space-y-2\">\n00157|                         {recommendations.urgentTests.map((test, index) => (\n00158|                           <li key={index} className=\"flex items-center gap-2 text-sm\">\n00159|                             <Activity className=\"h-3 w-3 text-red-600\" />\n00160|                             {test}\n00161|                           </li>\n00162|                         ))}\n00163|                       </ul>\n00164|                     </CardContent>\n00165|                   </Card>\n00166|                 )}\n00167| \n00168|                 {recommendations.routineTests.length > 0 && (\n00169|                   <Card className=\"border-blue-200\">\n00170|                     <CardHeader className=\"pb-3\">\n00171|                       <CardTitle className=\"text-lg text-blue-800 flex items-center gap-2\">\n00172|                         <FileText className=\"h-5 w-5\" />\n00173|                         {t.redFlag.results.routineTests}\n00174|                       </CardTitle>\n00175|                     </CardHeader>\n00176|                     <CardContent>\n00177|                       <ul className=\"space-y-2\">\n00178|                         {recommendations.routineTests.map((test, index) => (\n00179|                           <li key={index} className=\"flex items-center gap-2 text-sm\">\n00180|                             <Activity className=\"h-3 w-3 text-blue-600\" />\n00181|                             {test}\n00182|                           </li>\n00183|                         ))}\n00184|                       </ul>\n00185|                     </CardContent>\n00186|                   </Card>\n00187|                 )}\n00188|               </div>\n00189| \n00190|               {selectedRedFlags.length === 0 && selectedRoutineLabs.length === 0 && (\n00191|                 <Card className=\"border-green-200 bg-green-50\">\n00192|                   <CardContent className=\"pt-6\">\n00193|                     <div className=\"text-center text-green-800\">\n00194|                       <CheckCircle className=\"h-8 w-8 mx-auto mb-2\" />\n00195|                       <h3 className=\"font-semibold mb-2\">{t.redFlag.results.noRedFlags}</h3>\n00196|                       <p className=\"text-sm\">\n00197|                         Patient can proceed to targeted ME/CFS, Long COVID, or POTS assessment.\n00198|                         Consider basic metabolic panel if not done recently.\n00199|                       </p>\n00200|                     </div>\n00201|                   </CardContent>\n00202|                 </Card>\n00203|               )}\n00204| \n00205|               <div className=\"bg-gray-50 p-4 rounded-lg\">\n00206|                 <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n00207|                   <Brain className=\"h-4 w-4\" />\n00208|                   {t.redFlag.results.clinicalSupport}\n00209|                 </h4>\n00210|                 <div className=\"text-sm space-y-2\">\n00211|                   {recommendations.recommendation === 'urgent' && (\n00212|                     <p className=\"text-red-700\">\n00213|                       {t.redFlag.results.urgent}\n00214|                     </p>\n00215|                   )}\n00216|                   {recommendations.recommendation === 'priority' && (\n00217|                     <p className=\"text-yellow-700\">\n00218|                       {t.redFlag.results.priority}\n00219|                     </p>\n00220|                   )}\n00221|                   {recommendations.recommendation === 'routine' && (\n00222|                     <p className=\"text-green-700\">\n00223|                       {t.redFlag.results.routine}\n00224|                     </p>\n00225|                   )}\n00226|                 </div>\n00227|               </div>\n00228| \n00229|               <div className=\"flex gap-4 justify-center\">\n00230|                 <Button onClick={() => {\n00231|                   setSelectedRedFlags([])\n00232|                   setSelectedRoutineLabs([])\n00233|                   setIsComplete(false)\n00234|                 }} variant=\"outline\">\n00235|                   {t.redFlag.results.reassess}\n00236|                 </Button>\n00237|                 {recommendations.recommendation === 'routine' && (\n00238|                   <Button asChild>\n00239|                     <Link href=\"/stand-test\">\n00240|                       {t.common.continue} to Stand-Test Pro\n00241|                     </Link>\n00242|                   </Button>\n00243|                 )}\n00244|               </div>\n00245|             </CardContent>\n00246|           </Card>\n00247|         </div>\n00248|       </div>\n00249|     )\n00250|   }\n00251| \n00252|   return (\n00253|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00254|       <div className=\"container mx-auto px-4 max-w-4xl\">\n00255|         <div className=\"mb-6\">\n00256|           <div className=\"flex items-center gap-4 mb-4\">\n00257|             <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n00258|             <div>\n00259|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.redFlag.title}</h1>\n00260|               <p className=\"text-gray-600\">{t.redFlag.description}</p>\n00261|             </div>\n00262|           </div>\n00263|         </div>\n00264| \n00265|         <div className=\"space-y-6\">\n00266|           <Card>\n00267|             <CardHeader>\n00268|               <CardTitle className=\"text-lg text-red-800\">{t.redFlag.symptoms.title}</CardTitle>\n00269|               <CardDescription>\n00270|                 {t.redFlag.symptoms.description}\n00271|               </CardDescription>\n00272|             </CardHeader>\n00273|             <CardContent>\n00274|               <div className=\"grid md:grid-cols-2 gap-4\">\n00275|                 {redFlagSymptoms.map((flag, index) => (\n00276|                   <div key={flag.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00277|                     <Checkbox\n00278|                       id={flag.id}\n00279|                       checked={selectedRedFlags.includes(flag.id)}\n00280|                       onCheckedChange={(checked) => handleRedFlagChange(flag.id, !!checked)}\n00281|                     />\n00282|                     <div className=\"flex-1\">\n00283|                       <label htmlFor={flag.id} className=\"text-sm font-medium cursor-pointer\">\n00284|                         {t.redFlag.symptoms.list[index]}\n00285|                       </label>\n00286|                       <div className=\"flex gap-2 mt-1\">\n00287|                         <Badge \n00288|                           variant={flag.priority === 'high' ? 'destructive' : 'secondary'}\n00289|                           className=\"text-xs\"\n00290|                         >\n00291|                           {flag.category}\n00292|                         </Badge>\n00293|                       </div>\n00294|                     </div>\n00295|                   </div>\n00296|                 ))}\n00297|               </div>\n00298|             </CardContent>\n00299|           </Card>\n00300| \n00301|           <Card>\n00302|             <CardHeader>\n00303|               <CardTitle className=\"text-lg text-blue-800\">{t.redFlag.routineLabs.title}</CardTitle>\n00304|               <CardDescription>\n00305|                 {t.redFlag.routineLabs.description}\n00306|               </CardDescription>\n00307|             </CardHeader>\n00308|             <CardContent>\n00309|               <div className=\"grid md:grid-cols-2 gap-4\">\n00310|                 {routineLabs.map((labCategory, index) => (\n00311|                   <div key={labCategory.category} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00312|                     <Checkbox\n00313|                       id={labCategory.category}\n00314|                       checked={selectedRoutineLabs.includes(labCategory.category)}\n00315|                       onCheckedChange={(checked) => handleRoutineLabChange(labCategory.category, !!checked)}\n00316|                     />\n00317|                     <div className=\"flex-1\">\n00318|                       <label htmlFor={labCategory.category} className=\"text-sm font-medium cursor-pointer\">\n00319|                         {labCategory.category}\n00320|                       </label>\n00321|                       <p className=\"text-xs text-gray-600 mt-1\">{labCategory.indication}</p>\n00322|                       <div className=\"text-xs text-gray-500 mt-1\">\n00323|                         {labCategory.tests.slice(0, 3).join(', ')}\n00324|                         {labCategory.tests.length > 3 && ` + ${labCategory.tests.length - 3} more`}\n00325|                       </div>\n00326|                     </div>\n00327|                   </div>\n00328|                 ))}\n00329|               </div>\n00330|             </CardContent>\n00331|           </Card>\n00332| \n00333|           <div className=\"flex justify-center\">\n00334|             <Button onClick={() => setIsComplete(true)} className=\"px-8\">\n00335|               {t.redFlag.results.generateRecommendations}\n00336|             </Button>\n00337|           </div>\n00338|         </div>\n00339|       </div>\n00340|     </div>\n00341|   )\n00342| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { FileText, AlertTriangle, CheckCircle, Activity, Heart, Brain } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\nconst getRedFlagSymptoms = (t: any) => t.redFlag.symptoms.list.map((symptom: string, index: number) => ({\n  id: ['fever', 'weight_loss', 'chest_pain', 'dyspnea', 'neurological', 'bleeding', 'lymphadenopathy', 'jaundice'][index],\n  symptom,\n  category: t.redFlag.urgentCategories[index] || t.redFlag.urgentCategories[0],\n  priority: 'high',\n  tests: [\n    ['CBC with differential', 'ESR', 'CRP', 'Blood cultures', 'Chest X-ray'],\n    ['CBC', 'Comprehensive metabolic panel', 'TSH', 'HbA1c', 'CT chest/abdomen/pelvis'],"
    },
    "title": "app/red-flag-checker/page.tsx",
    "time": {
      "start": 1758302294646,
      "end": 1758302294651
    }
  }
}