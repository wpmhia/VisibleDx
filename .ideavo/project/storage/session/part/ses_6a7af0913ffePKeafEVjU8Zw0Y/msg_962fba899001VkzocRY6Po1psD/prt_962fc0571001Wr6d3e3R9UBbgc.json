{
  "id": "prt_962fc0571001Wr6d3e3R9UBbgc",
  "messageID": "msg_962fba899001VkzocRY6Po1psD",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01HMKH51dw2irjdEuuUXMD3n",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/criteria-engine/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Checkbox } from '@/components/ui/checkbox'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { Alert, AlertDescription } from '@/components/ui/alert'\n00009| import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n00010| import { Label } from '@/components/ui/label'\n00011| import { BarChart3, CheckCircle, AlertTriangle, FileText, Download } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| import { useTranslation } from '@/lib/language-context'\n00014| \n00015| interface DiagnosticCriteria {\n00016|   id: string\n00017|   condition: string\n00018|   met: boolean\n00019|   criteria: { id: string; description: string; met: boolean }[]\n00020|   icdCode: string\n00021|   confidence: 'high' | 'medium' | 'low'\n00022| }\n00023| \n00024| // Criteria will be generated from translations\n00025| \n00026| export default function CriteriaEngine() {\n00027|   const { t } = useTranslation()\n00028|   \n00029|   const getMECFSCriteria = () => t.criteria.mecfs.criteria.map((desc, index) => ({\n00030|     id: ['fatigue', 'pem', 'sleep', 'cognitive', 'orthostatic'][index],\n00031|     description: desc,\n00032|     met: false\n00033|   }))\n00034|   \n00035|   const getLongCovidCriteria = () => t.criteria.longCovid.criteria.map((desc, index) => ({\n00036|     id: ['covid_history', 'duration', 'multisystem', 'unexplained'][index],\n00037|     description: desc,\n00038|     met: false\n00039|   }))\n00040|   \n00041|   const getPOTSCriteria = () => t.criteria.pots.criteria.map((desc, index) => ({\n00042|     id: ['hr_increase', 'sustained', 'symptoms', 'duration_pots', 'no_oh'][index],\n00043|     description: desc,\n00044|     met: false\n00045|   }))\n00046| \n00047|   const [mecfsChecked, setMecfsChecked] = useState(() => getMECFSCriteria())\n00048|   const [longCovidChecked, setLongCovidChecked] = useState(() => getLongCovidCriteria())\n00049|   const [potsChecked, setPotsChecked] = useState(() => getPOTSCriteria())\n00050|   const [covidTiming, setCovidTiming] = useState<string>('')\n00051|   const [isComplete, setIsComplete] = useState(false)\n00052| \n00053|   // Update criteria descriptions when language changes\n00054|   useEffect(() => {\n00055|     setMecfsChecked(prev => {\n00056|       const newCriteria = getMECFSCriteria()\n00057|       return prev.map((item, index) => ({\n00058|         ...item,\n00059|         description: newCriteria[index].description\n00060|       }))\n00061|     })\n00062|   }, [t])\n00063| \n00064|   useEffect(() => {\n00065|     setLongCovidChecked(prev => {\n00066|       const newCriteria = getLongCovidCriteria()\n00067|       return prev.map((item, index) => ({\n00068|         ...item,\n00069|         description: newCriteria[index].description\n00070|       }))\n00071|     })\n00072|   }, [t])\n00073| \n00074|   useEffect(() => {\n00075|     setPotsChecked(prev => {\n00076|       const newCriteria = getPOTSCriteria()\n00077|       return prev.map((item, index) => ({\n00078|         ...item,\n00079|         description: newCriteria[index].description\n00080|       }))\n00081|     })\n00082|   }, [t])\n00083| \n00084|   const handleMECFSChange = (id: string, checked: boolean) => {\n00085|     setMecfsChecked(prev => prev.map(item => \n00086|       item.id === id ? { ...item, met: checked } : item\n00087|     ))\n00088|   }\n00089| \n00090|   const handleLongCovidChange = (id: string, checked: boolean) => {\n00091|     setLongCovidChecked(prev => prev.map(item => \n00092|       item.id === id ? { ...item, met: checked } : item\n00093|     ))\n00094|   }\n00095| \n00096|   const handlePOTSChange = (id: string, checked: boolean) => {\n00097|     setPotsChecked(prev => prev.map(item => \n00098|       item.id === id ? { ...item, met: checked } : item\n00099|     ))\n00100|   }\n00101| \n00102|   const calculateDiagnoses = (): DiagnosticCriteria[] => {\n00103|     const diagnoses: DiagnosticCriteria[] = []\n00104| \n00105|     // ME/CFS Diagnosis (requires fatigue, PEM, sleep, and either cognitive OR orthostatic)\n00106|     const mecfsCore = mecfsChecked.filter(c => ['fatigue', 'pem', 'sleep'].includes(c.id) && c.met).length\n00107|     const mecfsAdditional = mecfsChecked.filter(c => ['cognitive', 'orthostatic'].includes(c.id) && c.met).length\n00108|     const mecfsMet = mecfsCore === 3 && mecfsAdditional >= 1\n00109|     \n00110|     diagnoses.push({\n00111|       id: 'mecfs',\n00112|       condition: t.conditions.mecfs.fullName,\n00113|       met: mecfsMet,\n00114|       criteria: mecfsChecked,\n00115|       icdCode: t.conditions.mecfs.icdCode,\n00116|       confidence: mecfsMet ? (mecfsCore === 3 && mecfsAdditional === 2 ? 'high' : 'medium') : 'low'\n00117|     })\n00118| \n00119|     // Long COVID Diagnosis\n00120|     const longCovidMet = longCovidChecked.filter(c => c.met).length >= 3\n00121|     diagnoses.push({\n00122|       id: 'longcovid',\n00123|       condition: t.conditions.longCovid.fullName,\n00124|       met: longCovidMet,\n00125|       criteria: longCovidChecked,\n00126|       icdCode: t.conditions.longCovid.icdCode,\n00127|       confidence: longCovidMet ? 'high' : 'low'\n00128|     })\n00129| \n00130|     // Enhanced POTS Diagnosis following ESC 2018/AAS-EFAS 2021 flowchart\n00131|     // Core criteria: HR increase + symptoms + duration + no OH\n00132|     const potsHRIncrease = potsChecked.find(c => c.id === 'hr_increase')?.met || false\n00133|     const potsSymptoms = potsChecked.find(c => c.id === 'symptoms')?.met || false\n00134|     const potsDuration = potsChecked.find(c => c.id === 'duration_pots')?.met || false\n00135|     const noOrthostHypotension = potsChecked.find(c => c.id === 'no_oh')?.met || false\n00136|     const sustainedTachycardia = potsChecked.find(c => c.id === 'sustained')?.met || false\n00137|     \n00138|     // POTS requires all 4 core criteria\n00139|     const potsMet = potsHRIncrease && potsSymptoms && potsDuration && noOrthostHypotension\n00140|     \n00141|     // Determine confidence based on additional criteria\n00142|     let potsConfidence: 'low' | 'medium' | 'high' = 'low'\n00143|     if (potsMet) {\n00144|       if (sustainedTachycardia && potsHRIncrease && potsSymptoms && potsDuration && noOrthostHypotension) {\n00145|         potsConfidence = 'high'\n00146|       } else if (potsHRIncrease && potsSymptoms && potsDuration) {\n00147|         potsConfidence = 'medium'\n00148|       }\n00149|     }\n00150|     \n00151|     diagnoses.push({\n00152|       id: 'pots',\n00153|       condition: t.conditions.pots.fullName,\n00154|       met: potsMet,\n00155|       criteria: potsChecked,\n00156|       icdCode: t.conditions.pots.icdCode,\n00157|       confidence: potsConfidence\n00158|     })\n00159| \n00160|     return diagnoses\n00161|   }\n00162| \n00163|   const generateReport = () => {\n00164|     const diagnoses = calculateDiagnoses()\n00165|     const positives = diagnoses.filter(d => d.met)\n00166|     \n00167|     let report = \"InvisibleDx Clinical Decision Support Report\\n\"\n00168|     report += \"=====================================\\n\\n\"\n00169|     \n00170|     report += \"DIAGNOSTIC SUMMARY:\\n\"\n00171|     if (positives.length === 0) {\n00172|       report += \"• No criteria met for ME/CFS, Long COVID, or POTS\\n\"\n00173|       report += \"• Consider alternative diagnoses\\n\"\n00174|       report += \"• Reassess if symptoms progress\\n\\n\"\n00175|     } else {\n00176|       positives.forEach(dx => {\n00177|         report += `• ${dx.condition} - CRITERIA MET (${dx.icdCode})\\n`\n00178|         report += `  Confidence: ${dx.confidence.toUpperCase()}\\n`\n00179|       })\n00180|       report += \"\\n\"\n00181|     }\n00182| \n00183|     report += \"DETAILED CRITERIA ASSESSMENT:\\n\\n\"\n00184|     \n00185|     diagnoses.forEach(dx => {\n00186|       report += `${dx.condition} (${dx.icdCode}):\\n`\n00187|       dx.criteria.forEach(criterion => {\n00188|         report += `  ${criterion.met ? '✓' : '✗'} ${criterion.description}\\n`\n00189|       })\n00190|       report += `  Result: ${dx.met ? 'CRITERIA MET' : 'Criteria not met'}\\n\\n`\n00191|     })\n00192| \n00193|     return report\n00194|   }\n00195| \n00196|   if (isComplete) {\n00197|     const diagnoses = calculateDiagnoses()\n00198|     const positives = diagnoses.filter(d => d.met)\n00199|     \n00200|     return (\n00201|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00202|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00203|           <Card>\n00204|             <CardHeader className=\"text-center\">\n00205|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00206|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00207|                 {t.criteria.results.complete}\n00208|               </CardTitle>\n00209|               <CardDescription>\n00210|                 {t.criteria.results.description}\n00211|               </CardDescription>\n00212|             </CardHeader>\n00213|             <CardContent className=\"space-y-6\">\n00214|               {positives.length > 0 ? (\n00215|                 <div className=\"space-y-4\">\n00216|                   <h3 className=\"text-lg font-semibold text-center mb-4\">{t.criteria.results.diagnosesMet}</h3>\n00217|                   {positives.map((diagnosis) => (\n00218|                     <Alert key={diagnosis.id} className=\"border-green-200 bg-green-50\">\n00219|                       <CheckCircle className=\"h-4 w-4 text-green-600\" />\n00220|                       <AlertDescription>\n00221|                         <div className=\"flex justify-between items-start\">\n00222|                           <div>\n00223|                             <strong className=\"text-green-800\">{diagnosis.condition}</strong>\n00224|                             <p className=\"text-green-700 text-sm mt-1\">\n00225|                               ICD-10 Code: {diagnosis.icdCode} | Confidence: {diagnosis.confidence}\n00226|                             </p>\n00227|                           </div>\n00228|                           <Badge className=\"bg-green-100 text-green-800\">\n00229|                             {t.criteria.results.criteriaMet}\n00230|                           </Badge>\n00231|                         </div>\n00232|                       </AlertDescription>\n00233|                     </Alert>\n00234|                   ))}\n00235|                 </div>\n00236|               ) : (\n00237|                 <Alert>\n00238|                   <AlertTriangle className=\"h-4 w-4\" />\n00239|                   <AlertDescription>\n00240|                     <strong>{t.newPatient.results.noDefinitiveDiagnoses}</strong>\n00241|                   </AlertDescription>\n00242|                 </Alert>\n00243|               )}\n00244| \n00245|               <div className=\"grid md:grid-cols-3 gap-4\">\n00246|                 {diagnoses.map((diagnosis) => (\n00247|                   <Card key={diagnosis.id} className={`border-2 ${\n00248|                     diagnosis.met ? 'border-green-500 bg-green-50' : 'border-gray-200'\n00249|                   }`}>\n00250|                     <CardHeader className=\"pb-3\">\n00251|                       <CardTitle className=\"text-sm font-semibold\">\n00252|                         {diagnosis.condition.split('(')[0].trim()}\n00253|                       </CardTitle>\n00254|                       <div className=\"flex justify-between items-center\">\n00255|                         <Badge variant={diagnosis.met ? 'default' : 'secondary'} className=\"text-xs\">\n00256|                           {diagnosis.icdCode}\n00257|                         </Badge>\n00258|                         <Badge variant={diagnosis.met ? 'default' : 'outline'} className=\"text-xs\">\n00259|                           {diagnosis.met ? t.common.met : t.common.notMet}\n00260|                         </Badge>\n00261|                       </div>\n00262|                     </CardHeader>\n00263|                     <CardContent>\n00264|                       <div className=\"space-y-2\">\n00265|                         {diagnosis.criteria.map((criterion) => (\n00266|                           <div key={criterion.id} className=\"flex items-start gap-2 text-xs\">\n00267|                             <span className={criterion.met ? 'text-green-600' : 'text-gray-400'}>\n00268|                               {criterion.met ? '✓' : '✗'}\n00269|                             </span>\n00270|                             <span className={criterion.met ? 'text-green-700' : 'text-gray-600'}>\n00271|                               {criterion.description}\n00272|                             </span>\n00273|                           </div>\n00274|                         ))}\n00275|                       </div>\n00276|                     </CardContent>\n00277|                   </Card>\n00278|                 ))}\n00279|               </div>\n00280| \n00281|               <div className=\"bg-blue-50 p-4 rounded-lg\">\n00282|                 <h4 className=\"font-semibold mb-2 text-blue-900\">{t.criteria.results.clinicalRecommendations}</h4>\n00283|                 <div className=\"text-blue-800 text-sm space-y-2\">\n00284|                   {positives.some(d => d.id === 'mecfs') && (\n00285|                     <div>\n00286|                       <strong>ME/CFS Management:</strong>\n00287|                       <ul className=\"ml-4 list-disc space-y-1 mt-1\">\n00288|                         {t.criteria.results.mecfsManagement.map((item, index) => (\n00289|                           <li key={index}>{item}</li>\n00290|                         ))}\n00291|                       </ul>\n00292|                     </div>\n00293|                   )}\n00294|                   {positives.some(d => d.id === 'longcovid') && (\n00295|                     <div>\n00296|                       <strong>Long COVID Management:</strong>\n00297|                       <ul className=\"ml-4 list-disc space-y-1 mt-1\">\n00298|                         {t.criteria.results.longCovidManagement.map((item, index) => (\n00299|                           <li key={index}>{item}</li>\n00300|                         ))}\n00301|                       </ul>\n00302|                     </div>\n00303|                   )}\n00304|                   {positives.some(d => d.id === 'pots') && (\n00305|                     <div>\n00306|                       <strong>POTS Management:</strong>\n00307|                       <ul className=\"ml-4 list-disc space-y-1 mt-1\">\n00308|                         {t.criteria.results.potsManagement.map((item, index) => (\n00309|                           <li key={index}>{item}</li>\n00310|                         ))}\n00311|                       </ul>\n00312|                     </div>\n00313|                   )}\n00314|                 </div>\n00315|               </div>\n00316| \n00317|               <div className=\"flex gap-4 justify-center\">\n00318|                 <Button onClick={() => {\n00319|                   setMecfsChecked(getMECFSCriteria())\n00320|                   setLongCovidChecked(getLongCovidCriteria())\n00321|                   setPotsChecked(getPOTSCriteria())\n00322|                   setIsComplete(false)\n00323|                 }} variant=\"outline\">\n00324|                   {t.criteria.results.reassess}\n00325|                 </Button>\n00326|                 <Button onClick={() => {\n00327|                   const report = generateReport()\n00328|                   const blob = new Blob([report], { type: 'text/plain' })\n00329|                   const url = URL.createObjectURL(blob)\n00330|                   const a = document.createElement('a')\n00331|                   a.href = url\n00332|                   a.download = 'autodx-diagnostic-report.txt'\n00333|                   a.click()\n00334|                   URL.revokeObjectURL(url)\n00335|                 }} className=\"flex items-center gap-2\">\n00336|                   <Download className=\"h-4 w-4\" />\n00337|                   {t.criteria.results.downloadReport}\n00338|                 </Button>\n00339|                 {positives.some(d => d.id === 'pots') && (\n00340|                   <Button asChild>\n00341|                     <Link href=\"/subtype-advisor\">\n00342|                       {t.criteria.results.potsSubtype}\n00343|                     </Link>\n00344|                   </Button>\n00345|                 )}\n00346|               </div>\n00347|             </CardContent>\n00348|           </Card>\n00349|         </div>\n00350|       </div>\n00351|     )\n00352|   }\n00353| \n00354|   return (\n00355|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00356|       <div className=\"container mx-auto px-4 max-w-4xl\">\n00357|         <div className=\"mb-6\">\n00358|           <div className=\"flex items-center gap-4 mb-4\">\n00359|             <BarChart3 className=\"h-5 w-5 text-blue-600\" />\n00360|             <div>\n00361|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.criteria.title}</h1>\n00362|               <p className=\"text-gray-600\">{t.criteria.description}</p>\n00363|             </div>\n00364|           </div>\n00365|         </div>\n00366| \n00367|         <div className=\"space-y-6\">\n00368|           <Card>\n00369|             <CardHeader>\n00370|               <CardTitle className=\"text-lg text-blue-800\">{t.criteria.mecfs.title}</CardTitle>\n00371|               <CardDescription>\n00372|                 {t.criteria.mecfs.description}\n00373|               </CardDescription>\n00374|             </CardHeader>\n00375|             <CardContent>\n00376|               <div className=\"space-y-3\">\n00377|                 {mecfsChecked.map((criterion) => (\n00378|                   <div key={criterion.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00379|                     <Checkbox\n00380|                       id={criterion.id}\n00381|                       checked={criterion.met}\n00382|                       onCheckedChange={(checked) => handleMECFSChange(criterion.id, !!checked)}\n00383|                     />\n00384|                     <Label htmlFor={criterion.id} className=\"cursor-pointer text-sm flex-1\">\n00385|                       {criterion.description}\n00386|                     </Label>\n00387|                   </div>\n00388|                 ))}\n00389|               </div>\n00390|             </CardContent>\n00391|           </Card>\n00392| \n00393|           <Card>\n00394|             <CardHeader>\n00395|               <CardTitle className=\"text-lg text-green-800\">{t.criteria.longCovid.title}</CardTitle>\n00396|               <CardDescription>\n00397|                 {t.criteria.longCovid.description}\n00398|               </CardDescription>\n00399|             </CardHeader>\n00400|             <CardContent>\n00401|               <div className=\"space-y-3\">\n00402|                 {longCovidChecked.map((criterion) => (\n00403|                   <div key={criterion.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00404|                     <Checkbox\n00405|                       id={criterion.id}\n00406|                       checked={criterion.met}\n00407|                       onCheckedChange={(checked) => handleLongCovidChange(criterion.id, !!checked)}\n00408|                     />\n00409|                     <Label htmlFor={criterion.id} className=\"cursor-pointer text-sm flex-1\">\n00410|                       {criterion.description}\n00411|                     </Label>\n00412|                   </div>\n00413|                 ))}\n00414|               </div>\n00415|               \n00416|               {longCovidChecked.find(c => c.id === 'covid_history')?.met && (\n00417|                 <div className=\"mt-4 p-3 bg-green-50 rounded-lg\">\n00418|                   <Label className=\"text-sm font-medium\">COVID-19 infection timing:</Label>\n00419|                   <RadioGroup value={covidTiming} onValueChange={setCovidTiming} className=\"mt-2\">\n00420|                     <div className=\"flex items-center space-x-2\">\n00421|                       <RadioGroupItem value=\"confirmed\" id=\"confirmed\" />\n00422|                       <Label htmlFor=\"confirmed\" className=\"text-sm\">{t.criteria.longCovid.timing.confirmed}</Label>\n00423|                     </div>\n00424|                     <div className=\"flex items-center space-x-2\">\n00425|                       <RadioGroupItem value=\"probable\" id=\"probable\" />\n00426|                       <Label htmlFor=\"probable\" className=\"text-sm\">{t.criteria.longCovid.timing.probable}</Label>\n00427|                     </div>\n00428|                     <div className=\"flex items-center space-x-2\">\n00429|                       <RadioGroupItem value=\"suspected\" id=\"suspected\" />\n00430|                       <Label htmlFor=\"suspected\" className=\"text-sm\">{t.criteria.longCovid.timing.suspected}</Label>\n00431|                     </div>\n00432|                   </RadioGroup>\n00433|                 </div>\n00434|               )}\n00435|             </CardContent>\n00436|           </Card>\n00437| \n00438|           <Card>\n00439|             <CardHeader>\n00440|               <CardTitle className=\"text-lg text-purple-800\">{t.criteria.pots.title}</CardTitle>\n00441|               <CardDescription>\n00442|                 {t.criteria.pots.description}\n00443|               </CardDescription>\n00444|             </CardHeader>\n00445|             <CardContent>\n00446|               <div className=\"space-y-3\">\n00447|                 {potsChecked.map((criterion) => (\n00448|                   <div key={criterion.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00449|                     <Checkbox\n00450|                       id={criterion.id}\n00451|                       checked={criterion.met}\n00452|                       onCheckedChange={(checked) => handlePOTSChange(criterion.id, !!checked)}\n00453|                     />\n00454|                     <Label htmlFor={criterion.id} className=\"cursor-pointer text-sm flex-1\">\n00455|                       {criterion.description}\n00456|                     </Label>\n00457|                   </div>\n00458|                 ))}\n00459|               </div>\n00460|             </CardContent>\n00461|           </Card>\n00462| \n00463|           <div className=\"flex justify-center\">\n00464|             <Button onClick={() => setIsComplete(true)} size=\"lg\" className=\"px-8\">\n00465|               <FileText className=\"h-4 w-4 mr-2\" />\n00466|               {t.criteria.results.downloadReport}\n00467|             </Button>\n00468|           </div>\n00469|         </div>\n00470|       </div>\n00471|     </div>\n00472|   )\n00473| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { Label } from '@/components/ui/label'\nimport { BarChart3, CheckCircle, AlertTriangle, FileText, Download } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface DiagnosticCriteria {\n  id: string\n  condition: string\n  met: boolean\n  criteria: { id: string; description: string; met: boolean }[]\n  icdCode: string"
    },
    "title": "app/criteria-engine/page.tsx",
    "time": {
      "start": 1758302308108,
      "end": 1758302308110
    }
  }
}