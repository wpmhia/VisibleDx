{
  "id": "prt_962fbcefe0010kJPw7KVcrosJA",
  "messageID": "msg_962fba899001VkzocRY6Po1psD",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01CdXFdi7fBR8yG27tzVdgiQ",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/quick-screen/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Progress } from '@/components/ui/progress'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { CheckCircle, Circle, ArrowLeft, ArrowRight, Clock, AlertTriangle } from 'lucide-react'\n00009| import Link from 'next/link'\n00010| import { useTranslation } from '@/lib/language-context'\n00011| \n00012| const questionCategories = [\n00013|   \"core\", \"pem\", \"core\", \"core\", \"cardiovascular\", \"orthostatic\", \"history\", \n00014|   \"duration\", \"pain\", \"neurological\", \"autonomic\", \"gi\", \"respiratory\", \n00015|   \"functional\", \"sensory\", \"functional\"\n00016| ]\n00017| \n00018| export default function QuickScreen() {\n00019|   const [answers, setAnswers] = useState<Record<number, boolean>>({})\n00020|   const [currentQuestion, setCurrentQuestion] = useState(0)\n00021|   const [isComplete, setIsComplete] = useState(false)\n00022|   const { t } = useTranslation()\n00023|   \n00024|   const screeningQuestions = t.quickScreen.questions\n00025| \n00026|   const handleAnswer = (questionId: number, answer: boolean) => {\n00027|     setAnswers(prev => ({\n00028|       ...prev,\n00029|       [questionId]: answer\n00030|     }))\n00031|   }\n00032| \n00033|   const nextQuestion = () => {\n00034|     if (currentQuestion < screeningQuestions.length - 1) {\n00035|       setCurrentQuestion(prev => prev + 1)\n00036|     } else {\n00037|       setIsComplete(true)\n00038|     }\n00039|   }\n00040| \n00041|   const prevQuestion = () => {\n00042|     if (currentQuestion > 0) {\n00043|       setCurrentQuestion(prev => prev - 1)\n00044|     }\n00045|   }\n00046| \n00047|   const calculateRisk = () => {\n00048|     const totalYes = Object.values(answers).filter(Boolean).length\n00049|     const coreSymptoms = [1, 3, 4].filter(id => answers[id]).length\n00050|     const pemPresent = answers[2]\n00051|     const covidHistory = answers[7]\n00052|     const chronicity = answers[8]\n00053|     \n00054|     let riskLevel = 'Low'\n00055|     let riskColor = 'bg-green-100 text-green-800'\n00056|     \n00057|     if (totalYes >= 8 && coreSymptoms >= 2 && pemPresent && chronicity) {\n00058|       riskLevel = 'High'\n00059|       riskColor = 'bg-red-100 text-red-800'\n00060|     } else if (totalYes >= 5 && (coreSymptoms >= 2 || pemPresent)) {\n00061|       riskLevel = 'Medium'\n00062|       riskColor = 'bg-yellow-100 text-yellow-800'\n00063|     }\n00064|     \n00065|     return { riskLevel, riskColor, totalYes, coreSymptoms, pemPresent, covidHistory, chronicity }\n00066|   }\n00067| \n00068|   const progress = ((currentQuestion + 1) / t.quickScreen.questions.length) * 100\n00069|   const currentQuestionData = {\n00070|     id: currentQuestion + 1,\n00071|     question: t.quickScreen.questions[currentQuestion],\n00072|     category: questionCategories[currentQuestion]\n00073|   }\n00074|   const currentAnswer = answers[currentQuestionData?.id]\n00075| \n00076|   if (isComplete) {\n00077|     const risk = calculateRisk()\n00078|     \n00079|     return (\n00080|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00081|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00082|           <Card>\n00083|             <CardHeader className=\"text-center\">\n00084|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00085|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00086|                 {t.quickScreen.results.complete}\n00087|               </CardTitle>\n00088|               <CardDescription>\n00089|                 {t.quickScreen.results.riskAssessment}\n00090|               </CardDescription>\n00091|             </CardHeader>\n00092|             <CardContent className=\"space-y-6\">\n00093|               <div className=\"text-center\">\n00094|                 <Badge className={`px-4 py-2 text-lg ${risk.riskColor}`}>\n00095|                   {risk.riskLevel === 'High' ? t.quickScreen.results.highRisk : \n00096|                    risk.riskLevel === 'Medium' ? t.quickScreen.results.mediumRisk : \n00097|                    t.quickScreen.results.lowRisk}\n00098|                 </Badge>\n00099|               </div>\n00100| \n00101|               <div className=\"grid md:grid-cols-2 gap-4\">\n00102|                 <div className=\"bg-gray-50 p-4 rounded-lg\">\n00103|                   <h4 className=\"font-semibold mb-2\">{t.common.results}</h4>\n00104|                   <ul className=\"text-sm space-y-1\">\n00105|                     <li>{t.quickScreen.results.totalResponses}: {risk.totalYes}/16</li>\n00106|                     <li>{t.quickScreen.results.coreSymptoms}: {risk.coreSymptoms}/3</li>\n00107|                     <li>{t.quickScreen.results.pemPresent}: {risk.pemPresent ? t.common.yes : t.common.no}</li>\n00108|                     <li>{t.quickScreen.results.covidHistory}: {risk.covidHistory ? t.common.yes : t.common.no}</li>\n00109|                     <li>{t.quickScreen.results.chronicSymptoms}: {risk.chronicity ? t.common.yes : t.common.no}</li>\n00110|                   </ul>\n00111|                 </div>\n00112| \n00113|                 <div className=\"bg-blue-50 p-4 rounded-lg\">\n00114|                   <h4 className=\"font-semibold mb-2 text-blue-900\">{t.quickScreen.results.nextSteps}</h4>\n00115|                   <ul className=\"text-sm space-y-1 text-blue-800\">\n00116|                     {risk.riskLevel === 'High' && \n00117|                       t.quickScreen.nextStepsRecommendations.high.map((step, index) => (\n00118|                         <li key={index}>• {step}</li>\n00119|                       ))\n00120|                     }\n00121|                     {risk.riskLevel === 'Medium' && \n00122|                       t.quickScreen.nextStepsRecommendations.medium.map((step, index) => (\n00123|                         <li key={index}>• {step}</li>\n00124|                       ))\n00125|                     }\n00126|                     {risk.riskLevel === 'Low' && \n00127|                       t.quickScreen.nextStepsRecommendations.low.map((step, index) => (\n00128|                         <li key={index}>• {step}</li>\n00129|                       ))\n00130|                     }\n00131|                   </ul>\n00132|                 </div>\n00133|               </div>\n00134| \n00135|               <div className=\"flex gap-4 justify-center\">\n00136|                 <Button onClick={() => {\n00137|                   setAnswers({})\n00138|                   setCurrentQuestion(0)\n00139|                   setIsComplete(false)\n00140|                 }} variant=\"outline\">\n00141|                   {t.quickScreen.results.retake}\n00142|                 </Button>\n00143|                 {risk.riskLevel !== 'Low' && (\n00144|                   <Button asChild>\n00145|                     <Link href=\"/red-flag-checker\">\n00146|                       {t.common.continue} to Red-flag Checker\n00147|                     </Link>\n00148|                   </Button>\n00149|                 )}\n00150|               </div>\n00151|             </CardContent>\n00152|           </Card>\n00153|         </div>\n00154|       </div>\n00155|     )\n00156|   }\n00157| \n00158|   return (\n00159|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00160|       <div className=\"container mx-auto px-4 max-w-2xl\">\n00161|         <div className=\"mb-6\">\n00162|           <div className=\"flex items-center gap-4 mb-4\">\n00163|             <Clock className=\"h-5 w-5 text-gray-600\" />\n00164|             <div>\n00165|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.quickScreen.title}</h1>\n00166|               <p className=\"text-gray-600\">{t.quickScreen.description}</p>\n00167|             </div>\n00168|           </div>\n00169|           \n00170|           <Progress value={progress} className=\"h-2\" />\n00171|             <p className=\"text-sm text-gray-600 mt-2\">\n00172|             {t.common.question} {currentQuestion + 1} {t.common.of} {t.quickScreen.questions.length}\n00173|           </p>\n00174|         </div>\n00175| \n00176|         <Card>\n00177|           <CardHeader>\n00178|             <CardTitle className=\"text-lg\">\n00179|               {currentQuestionData.question}\n00180|             </CardTitle>\n00181|             <CardDescription>\n00182|               Category: {t.quickScreen.categories[currentQuestionData.category as keyof typeof t.quickScreen.categories]}\n00183|             </CardDescription>\n00184|           </CardHeader>\n00185|           <CardContent>\n00186|             <div className=\"space-y-4\">\n00187|               <div className=\"flex gap-4 justify-center\">\n00188|                 <Button\n00189|                   onClick={() => handleAnswer(currentQuestionData.id, true)}\n00190|                   variant={currentAnswer === true ? \"default\" : \"outline\"}\n00191|                   className=\"flex items-center gap-2 px-8\"\n00192|                 >\n00193|                   {currentAnswer === true ? <CheckCircle className=\"h-4 w-4\" /> : <Circle className=\"h-4 w-4\" />}\n00194|                   {t.common.yes}\n00195|                 </Button>\n00196|                 <Button\n00197|                   onClick={() => handleAnswer(currentQuestionData.id, false)}\n00198|                   variant={currentAnswer === false ? \"default\" : \"outline\"}\n00199|                   className=\"flex items-center gap-2 px-8\"\n00200|                 >\n00201|                   {currentAnswer === false ? <CheckCircle className=\"h-4 w-4\" /> : <Circle className=\"h-4 w-4\" />}\n00202|                   {t.common.no}\n00203|                 </Button>\n00204|               </div>\n00205| \n00206|               <div className=\"flex justify-between pt-6\">\n00207|                 <Button \n00208|                   onClick={prevQuestion} \n00209|                   disabled={currentQuestion === 0}\n00210|                   variant=\"outline\"\n00211|                   className=\"flex items-center gap-2\"\n00212|                 >\n00213|                   <ArrowLeft className=\"h-4 w-4\" />\n00214|                   {t.common.previous}\n00215|                 </Button>\n00216|                 \n00217|                 <Button \n00218|                   onClick={nextQuestion}\n00219|                   disabled={currentAnswer === undefined}\n00220|                   className=\"flex items-center gap-2\"\n00221|                 >\n00222|                   {currentQuestion === t.quickScreen.questions.length - 1 ? t.common.complete : t.common.next}\n00223|                   <ArrowRight className=\"h-4 w-4\" />\n00224|                 </Button>\n00225|               </div>\n00226|             </div>\n00227|           </CardContent>\n00228|         </Card>\n00229| \n00230|         <div className=\"mt-6 text-center\">\n00231|           <div className=\"flex items-center justify-center gap-2 text-sm text-gray-600\">\n00232|             <AlertTriangle className=\"h-4 w-4\" />\n00233|             This screening tool is for clinical decision support only and does not replace professional medical judgment\n00234|           </div>\n00235|         </div>\n00236|       </div>\n00237|     </div>\n00238|   )\n00239| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { CheckCircle, Circle, ArrowLeft, ArrowRight, Clock, AlertTriangle } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\nconst questionCategories = [\n  \"core\", \"pem\", \"core\", \"core\", \"cardiovascular\", \"orthostatic\", \"history\", \n  \"duration\", \"pain\", \"neurological\", \"autonomic\", \"gi\", \"respiratory\", \n  \"functional\", \"sensory\", \"functional\"\n]\n\nexport default function QuickScreen() {\n  const [answers, setAnswers] = useState<Record<number, boolean>>({})\n  const [currentQuestion, setCurrentQuestion] = useState(0)"
    },
    "title": "app/quick-screen/page.tsx",
    "time": {
      "start": 1758302294166,
      "end": 1758302294168
    }
  }
}