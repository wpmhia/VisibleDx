{
  "id": "prt_962fbccc5001laGLOXPufw0X4n",
  "messageID": "msg_962fba899001VkzocRY6Po1psD",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01N5Ze4WQ94t8N4Sac5S5SFP",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/new-patient/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Input } from '@/components/ui/input'\n00007| import { Label } from '@/components/ui/label'\n00008| import { Progress } from '@/components/ui/progress'\n00009| import { Badge } from '@/components/ui/badge'\n00010| import { Alert, AlertDescription } from '@/components/ui/alert'\n00011| import { Checkbox } from '@/components/ui/checkbox'\n00012| import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n00013| import { ArrowRight, User, ClipboardList, FileText, Download, CheckCircle, AlertTriangle, Activity, Heart, Clock, BarChart3 } from 'lucide-react'\n00014| import Link from 'next/link'\n00015| import { useTranslation } from '@/lib/language-context'\n00016| \n00017| interface PatientData {\n00018|   demographics: {\n00019|     age: number | null\n00020|     gender: string\n00021|     clinicianName: string\n00022|     patientId: string\n00023|   }\n00024|   quickScreen: {\n00025|     answers: Record<number, boolean>\n00026|     score: number\n00027|     riskLevel: string\n00028|   }\n00029|   redFlags: {\n00030|     symptoms: string[]\n00031|     labsRecommended: string[]\n00032|     priority: string\n00033|   }\n00034|   standTest: {\n00035|     performed: boolean\n00036|     baselineHR: number | null\n00037|     peakHR: number | null\n00038|     sustainedHR: number | null\n00039|     meetsPOTS: boolean\n00040|   }\n00041|   pemQuest: {\n00042|     answers: Record<string, string>\n00043|     score: number\n00044|     severity: string\n00045|     present: boolean\n00046|   }\n00047|   diagnoses: {\n00048|     mecfs: { met: boolean; confidence: string }\n00049|     longCovid: { met: boolean; confidence: string }\n00050|     pots: { met: boolean; confidence: string; subtype?: string }\n00051|   }\n00052| }\n00053| \n00054| const initialPatientData: PatientData = {\n00055|   demographics: {\n00056|     age: null,\n00057|     gender: '',\n00058|     clinicianName: '',\n00059|     patientId: ''\n00060|   },\n00061|   quickScreen: {\n00062|     answers: {},\n00063|     score: 0,\n00064|     riskLevel: 'low'\n00065|   },\n00066|   redFlags: {\n00067|     symptoms: [],\n00068|     labsRecommended: [],\n00069|     priority: 'routine'\n00070|   },\n00071|   standTest: {\n00072|     performed: false,\n00073|     baselineHR: null,\n00074|     peakHR: null,\n00075|     sustainedHR: null,\n00076|     meetsPOTS: false\n00077|   },\n00078|   pemQuest: {\n00079|     answers: {},\n00080|     score: 0,\n00081|     severity: 'none',\n00082|     present: false\n00083|   },\n00084|   diagnoses: {\n00085|     mecfs: { met: false, confidence: 'low' },\n00086|     longCovid: { met: false, confidence: 'low' },\n00087|     pots: { met: false, confidence: 'low' }\n00088|   }\n00089| }\n00090| \n00091| type WorkflowStep = 'demographics' | 'quickScreen' | 'redFlags' | 'standTest' | 'pemQuest' | 'criteria' | 'summary'\n00092| \n00093| const createScreeningQuestions = (t: any) => t.quickScreen.questions.map((question: string, index: number) => ({\n00094|   id: index + 1,\n00095|   question,\n00096|   category: ['core', 'pem', 'core', 'core', 'cardiovascular', 'orthostatic', 'history', 'duration', 'pain', 'neurological', 'autonomic', 'gi', 'respiratory', 'functional', 'sensory', 'functional'][index]\n00097| }))\n00098| \n00099| const createRedFlagSymptoms = (t: any) => t.redFlag.symptoms.list.map((symptom: string, index: number) => ({\n00100|   id: ['fever', 'weight_loss', 'chest_pain', 'dyspnea', 'neurological', 'bleeding', 'lymphadenopathy', 'jaundice'][index],\n00101|   symptom,\n00102|   priority: 'high'\n00103| }))\n00104| \n00105| const createPemQuestions = (t: any) => [\n00106|   {\n00107|     id: 'frequency',\n00108|     question: t.pem.questions.frequency.question,\n00109|     options: t.pem.questions.frequency.options.map((label: string, index: number) => ({\n00110|       value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n00111|       label,\n00112|       score: index\n00113|     }))\n00114|   },\n00115|   {\n00116|     id: 'severity',\n00117|     question: t.pem.questions.severity.question,\n00118|     options: t.pem.questions.severity.options.map((label: string, index: number) => ({\n00119|       value: ['none', 'mild', 'moderate', 'severe', 'very_severe'][index],\n00120|       label,\n00121|       score: index\n00122|     }))\n00123|   },\n00124|   {\n00125|     id: 'recovery_time',\n00126|     question: t.pem.questions.recoveryTime.question,\n00127|     options: t.pem.questions.recoveryTime.options.map((label: string, index: number) => ({\n00128|       value: ['no_recovery_needed', 'hours', 'one_day', 'several_days', 'week_or_more'][index],\n00129|       label,\n00130|       score: index\n00131|     }))\n00132|   }\n00133| ]\n00134| \n00135| export default function NewPatientWorkflow() {\n00136|   const { t } = useTranslation()\n00137|   const [currentStep, setCurrentStep] = useState<WorkflowStep>('demographics')\n00138|   const [patientData, setPatientData] = useState<PatientData>(initialPatientData)\n00139|   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n00140|   const [isComplete, setIsComplete] = useState(false)\n00141|   \n00142|   const screeningQuestions = createScreeningQuestions(t)\n00143|   const redFlagSymptoms = createRedFlagSymptoms(t)\n00144|   const pemQuestions = createPemQuestions(t)\n00145| \n00146|   // Auto-process criteria when in criteria step\n00147|   useEffect(() => {\n00148|     if (currentStep === 'criteria') {\n00149|       finalizeDiagnoses()\n00150|     }\n00151|   }, [currentStep])\n00152| \n00153|   const getStepProgress = () => {\n00154|     const steps: WorkflowStep[] = ['demographics', 'quickScreen', 'redFlags', 'standTest', 'pemQuest', 'criteria', 'summary']\n00155|     const currentIndex = steps.indexOf(currentStep)\n00156|     return ((currentIndex + 1) / steps.length) * 100\n00157|   }\n00158| \n00159|   const calculateQuickScreenRisk = (answers: Record<number, boolean>) => {\n00160|     const totalYes = Object.values(answers).filter(Boolean).length\n00161|     const coreSymptoms = [1, 3, 4].filter(id => answers[id]).length\n00162|     const pemPresent = answers[2]\n00163|     const chronicity = answers[8]\n00164|     \n00165|     let riskLevel = 'low'\n00166|     if (totalYes >= 8 && coreSymptoms >= 2 && pemPresent && chronicity) {\n00167|       riskLevel = 'high'\n00168|     } else if (totalYes >= 5 && (coreSymptoms >= 2 || pemPresent)) {\n00169|       riskLevel = 'medium'\n00170|     }\n00171|     \n00172|     return { score: totalYes, riskLevel }\n00173|   }\n00174| \n00175|   const calculatePEMScore = (answers: Record<string, string>) => {\n00176|     const totalScore = pemQuestions.reduce((sum, question) => {\n00177|       const answer = answers[question.id]\n00178|       const option = question.options.find(opt => opt.value === answer)\n00179|       return sum + (option?.score || 0)\n00180|     }, 0)\n00181| \n00182|     const maxScore = pemQuestions.reduce((sum, question) => {\n00183|       return sum + Math.max(...question.options.map(opt => opt.score))\n00184|     }, 0)\n00185| \n00186|     const percentage = (totalScore / maxScore) * 100\n00187|     \n00188|     let severity = 'none'\n00189|     if (percentage >= 75) severity = 'severe'\n00190|     else if (percentage >= 50) severity = 'moderate'\n00191|     else if (percentage >= 25) severity = 'mild'\n00192| \n00193|     return { score: totalScore, severity, present: percentage >= 25 }\n00194|   }\n00195| \n00196|   const determineNextStep = () => {\n00197|     switch (currentStep) {\n00198|       case 'demographics':\n00199|         return 'quickScreen'\n00200|       case 'quickScreen':\n00201|         return patientData.quickScreen.riskLevel !== 'low' ? 'redFlags' : 'standTest'\n00202|       case 'redFlags':\n00203|         return patientData.redFlags.priority === 'urgent' ? 'summary' : 'standTest'\n00204|       case 'standTest':\n00205|         return 'pemQuest'\n00206|       case 'pemQuest':\n00207|         return 'criteria'\n00208|       case 'criteria':\n00209|         return 'summary'\n00210|       default:\n00211|         return 'summary'\n00212|     }\n00213|   }\n00214| \n00215|   const generateSOAPNote = () => {\n00216|     const { demographics, quickScreen, redFlags, standTest, pemQuest, diagnoses } = patientData\n00217|     const currentDate = new Date().toLocaleDateString()\n00218|     \n00219|     let soap = `CLINICAL ASSESSMENT - InvisibleDx Report\\n`\n00220|     soap += `=========================================\\n\\n`\n00221|     soap += `Date: ${currentDate}\\n`\n00222|     soap += `${t.soapNotes.clinician}: ${demographics.clinicianName || t.soapNotes.notSpecified}\\n`\n00223|     soap += `${t.soapNotes.patientId}: ${demographics.patientId || t.soapNotes.notSpecified}\\n`\n00224|     soap += `${t.soapNotes.age}: ${demographics.age || t.soapNotes.notSpecified} | ${t.soapNotes.gender}: ${demographics.gender || t.soapNotes.notSpecified}\\n\\n`\n00225| \n00226|     soap += `SUBJECTIVE:\\n`\n00227|     soap += `Chief Complaint: Chronic fatigue, post-exertional symptoms, and orthostatic intolerance\\n`\n00228|     soap += `Quick-Screen Risk Assessment: ${quickScreen.riskLevel.toUpperCase()} (${quickScreen.score}/16 positive responses)\\n`\n00229|     \n00230|     if (redFlags.symptoms.length > 0) {\n00231|       soap += `Red Flag Symptoms: ${redFlags.symptoms.join(', ')}\\n`\n00232|     } else {\n00233|       soap += `Red Flag Symptoms: None identified\\n`\n00234|     }\n00235|     \n00236|     soap += `Post-Exertional Malaise: ${pemQuest.present ? `${t.soapNotes.pemPresent} (${pemQuest.severity} ${t.soapNotes.severity})` : t.soapNotes.notPresent}\\n`\n00237|     soap += `Symptom Duration: ${patientData.quickScreen.answers[8] ? '≥3 months' : '<3 months or unclear'}\\n\\n`\n00238| \n00239|     soap += `OBJECTIVE:\\n`\n00240|     if (standTest.performed) {\n00241|       soap += `Orthostatic Vital Signs (10-min stand test):\\n`\n00242|       soap += `  - ${t.soapNotes.baselineHR}: ${standTest.baselineHR || t.soapNotes.notRecorded} bpm\\n`\n00243|       soap += `  - ${t.soapNotes.peakStandingHR}: ${standTest.peakHR || t.soapNotes.notRecorded} bpm\\n`\n00244|       soap += `  - ${t.soapNotes.hrIncrease}: ${standTest.peakHR && standTest.baselineHR ? standTest.peakHR - standTest.baselineHR : t.soapNotes.cannotCalculate} bpm\\n`\n00245|       soap += `  - POTS Criteria: ${standTest.meetsPOTS ? t.soapNotes.potsCriteriaMet : t.soapNotes.potsNotMet}\\n`\n00246|     } else {\n00247|       soap += `Orthostatic Testing: Not performed\\n`\n00248|     }\n00249|     \n00250|     if (redFlags.labsRecommended.length > 0) {\n00251|       soap += `Recommended Laboratory Studies: ${redFlags.labsRecommended.join(', ')}\\n`\n00252|     }\n00253|     soap += `\\n`\n00254| \n00255|     soap += `ASSESSMENT:\\n`\n00256|     const positiveDiagnoses: string[] = []\n00257|     if (diagnoses.mecfs.met) positiveDiagnoses.push(`ME/CFS (G93.32) - ${diagnoses.mecfs.confidence} confidence`)\n00258|     if (diagnoses.longCovid.met) positiveDiagnoses.push(`Long COVID (U09.9) - ${diagnoses.longCovid.confidence} confidence`)\n00259|     if (diagnoses.pots.met) positiveDiagnoses.push(`POTS (I47.1) - ${diagnoses.pots.confidence} confidence`)\n00260|     \n00261|     if (positiveDiagnoses.length > 0) {\n00262|       soap += `Diagnoses meeting criteria:\\n`\n00263|       positiveDiagnoses.forEach(dx => soap += `  • ${dx}\\n`)\n00264|     } else {\n00265|       soap += `No definitive diagnostic criteria met at this time\\n`\n00266|       soap += `Consider: Alternative diagnoses, subclinical presentations, symptom monitoring\\n`\n00267|     }\n00268|     soap += `\\n`\n00269| \n00270|     soap += `PLAN:\\n`\n00271|     \n00272|     if (redFlags.priority === 'urgent') {\n00273|       soap += `URGENT: Complete red flag workup before proceeding with chronic illness evaluation\\n`\n00274|       soap += `  - Expedite recommended laboratory studies\\n`\n00275|       soap += `  - Consider same-day or next-day specialist consultation\\n\\n`\n00276|     }\n00277|     \n00278|     if (diagnoses.mecfs.met) {\n00279|       soap += `ME/CFS Management:\\n`\n00280|       soap += `  • Activity pacing and energy management education\\n`\n00281|       soap += `  • Avoid graded exercise therapy (contraindicated)\\n`\n00282|       soap += `  • Symptom-directed treatments (sleep, pain, orthostatic symptoms)\\n`\n00283|       soap += `  • ME/CFS specialist referral if available\\n`\n00284|       soap += `  • Disability evaluation if functional capacity severely impaired\\n\\n`\n00285|     }\n00286|     \n00287|     if (diagnoses.longCovid.met) {\n00288|       soap += `Long COVID Management:\\n`\n00289|       soap += `  • Multidisciplinary symptom management approach\\n`\n00290|       soap += `  • Long COVID clinic referral if available\\n`\n00291|       soap += `  • Monitor for improvement over time\\n`\n00292|       soap += `  • Address individual symptoms (fatigue, cognitive, respiratory)\\n\\n`\n00293|     }\n00294|     \n00295|     if (diagnoses.pots.met) {\n00296|       soap += `POTS Management:\\n`\n00297|       soap += `  • Non-pharmacological: Increase salt (8-10g/day), fluids (2.5-3L/day)\\n`\n00298|       soap += `  • Compression garments (30-40 mmHg)\\n`\n00299|       soap += `  • Consider pharmacological therapy based on subtype\\n`\n00300|       soap += `  • Cardiology or autonomic specialist referral\\n`\n00301|       soap += `  • Gradual exercise reconditioning when appropriate\\n\\n`\n00302|     }\n00303|     \n00304|     soap += `Follow-up:\\n`\n00305|     soap += `  • Reassess in 4-6 weeks or sooner if symptoms worsen\\n`\n00306|     soap += `  • Repeat stand test if POTS suspected but initial test inconclusive\\n`\n00307|     soap += `  • Review laboratory results and adjust treatment accordingly\\n`\n00308|     soap += `  • Patient education materials provided\\n\\n`\n00309|     \n00310|     soap += `Clinical Decision Support provided by InvisibleDx v1.0\\n`\n00311|     soap += `This assessment is for clinical decision support only and does not replace physician judgment.\\n`\n00312| \n00313|     return soap\n00314|   }\n00315| \n00316|   const handleDemographicsNext = () => {\n00317|     if (patientData.demographics.age && patientData.demographics.gender) {\n00318|       setCurrentStep('quickScreen')\n00319|     }\n00320|   }\n00321| \n00322|   const handleQuickScreenAnswer = (questionId: number, answer: boolean) => {\n00323|     const newAnswers = { ...patientData.quickScreen.answers, [questionId]: answer }\n00324|     const risk = calculateQuickScreenRisk(newAnswers)\n00325|     \n00326|     setPatientData(prev => ({\n00327|       ...prev,\n00328|       quickScreen: {\n00329|         answers: newAnswers,\n00330|         score: risk.score,\n00331|         riskLevel: risk.riskLevel\n00332|       }\n00333|     }))\n00334|   }\n00335| \n00336|   const handlePEMAnswer = (questionId: string, value: string) => {\n00337|     const newAnswers = { ...patientData.pemQuest.answers, [questionId]: value }\n00338|     const pemScore = calculatePEMScore(newAnswers)\n00339|     \n00340|     setPatientData(prev => ({\n00341|       ...prev,\n00342|       pemQuest: {\n00343|         answers: newAnswers,\n00344|         score: pemScore.score,\n00345|         severity: pemScore.severity,\n00346|         present: pemScore.present\n00347|       }\n00348|     }))\n00349|   }\n00350| \n00351|   const finalizeDiagnoses = () => {\n00352|     const { quickScreen, pemQuest, standTest } = patientData\n00353|     \n00354|     // ME/CFS criteria\n00355|     const coreSymptoms = [1, 3, 4].filter(id => quickScreen.answers[id]).length\n00356|     const hasPEM = pemQuest.present\n00357|     const hasOrthostatic = quickScreen.answers[6] || standTest.meetsPOTS\n00358|     const mecfsMet = coreSymptoms >= 3 && hasPEM && hasOrthostatic && quickScreen.answers[8]\n00359|     \n00360|     // Long COVID criteria\n00361|     const hasCovidHistory = quickScreen.answers[7]\n00362|     const hasDuration = quickScreen.answers[8]\n00363|     const hasMultiSystem = quickScreen.score >= 4\n00364|     const longCovidMet = hasCovidHistory && hasDuration && hasMultiSystem\n00365|     \n00366|     // Enhanced POTS criteria following ESC 2018/AAS-EFAS 2021 flowchart\n00367|     const potsHRCriteria = standTest.meetsPOTS // HR increase ≥30 bpm\n00368|     const potsSymptoms = quickScreen.answers[5] || quickScreen.answers[6] // Orthostatic symptoms\n00369|     const potsDuration = quickScreen.answers[8] // ≥3 months duration\n00370|     \n00371|     // Additional POTS considerations\n00372|     const hasOrthostatic症状s = quickScreen.answers[5] || quickScreen.answers[6] // dizziness, palpitations\n00373|     const noOrthostatiHypotension = !quickScreen.answers[14] // Assuming question 14 is about OH\n00374|     const sustainedTachycardia = standTest.peakHR && standTest.peakHR >= 120\n00375|     \n00376|     // POTS diagnosis requires: HR criteria + symptoms + duration + no OH\n00377|     let potsConfidence = 'low'\n00378|     let potsMet = false\n00379|     \n00380|     if (potsHRCriteria && potsSymptoms && potsDuration) {\n00381|       potsMet = true\n00382|       // Determine confidence level\n00383|       if (sustainedTachycardia && noOrthostatiHypotension) {\n00384|         potsConfidence = 'high'\n00385|       } else if (potsHRCriteria && potsSymptoms) {\n00386|         potsConfidence = 'medium'\n00387|       }\n00388|     }\n00389|     \n00390|     setPatientData(prev => ({\n00391|       ...prev,\n00392|       diagnoses: {\n00393|         mecfs: { \n00394|           met: mecfsMet, \n00395|           confidence: mecfsMet ? (coreSymptoms === 3 && hasPEM ? 'high' : 'medium') : 'low' \n00396|         },\n00397|         longCovid: { \n00398|           met: longCovidMet, \n00399|           confidence: longCovidMet ? 'high' : 'low' \n00400|         },\n00401|         pots: { \n00402|           met: potsMet, \n00403|           confidence: potsConfidence\n00404|         }\n00405|       }\n00406|     }))\n00407|     \n00408|     setCurrentStep('summary')\n00409|     setIsComplete(true)\n00410|   }\n00411| \n00412|   if (isComplete) {\n00413|     const soap = generateSOAPNote()\n00414|     const anyDiagnosis = Object.values(patientData.diagnoses).some(d => d.met)\n00415|     \n00416|     return (\n00417|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00418|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00419|           <Card>\n00420|             <CardHeader className=\"text-center\">\n00421|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00422|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00423|                 {t.newPatient.results.title}\n00424|               </CardTitle>\n00425|               <CardDescription>\n00426|                 {t.newPatient.results.description}\n00427|               </CardDescription>\n00428|             </CardHeader>\n00429|             <CardContent className=\"space-y-6\">\n00430|               <div className=\"grid md:grid-cols-3 gap-4\">\n00431|                 <Card className={`border-2 ${patientData.diagnoses.mecfs.met ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>\n00432|                   <CardContent className=\"pt-4\">\n00433|                     <div className=\"text-center\">\n00434|                       <h3 className=\"font-semibold text-sm\">ME/CFS (G93.32)</h3>\n00435|                       <Badge variant={patientData.diagnoses.mecfs.met ? 'default' : 'secondary'} className=\"mt-2\">\n00436|                         {patientData.diagnoses.mecfs.met ? t.criteria.results.criteriaMet : t.common.notMet}\n00437|                       </Badge>\n00438|                       {patientData.diagnoses.mecfs.met && (\n00439|                         <p className=\"text-xs text-green-700 mt-1\">\n00440|                           {t.common.confidence}: {patientData.diagnoses.mecfs.confidence}\n00441|                         </p>\n00442|                       )}\n00443|                     </div>\n00444|                   </CardContent>\n00445|                 </Card>\n00446| \n00447|                 <Card className={`border-2 ${patientData.diagnoses.longCovid.met ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>\n00448|                   <CardContent className=\"pt-4\">\n00449|                     <div className=\"text-center\">\n00450|                       <h3 className=\"font-semibold text-sm\">Long COVID (U09.9)</h3>\n00451|                       <Badge variant={patientData.diagnoses.longCovid.met ? 'default' : 'secondary'} className=\"mt-2\">\n00452|                         {patientData.diagnoses.longCovid.met ? t.criteria.results.criteriaMet : t.common.notMet}\n00453|                       </Badge>\n00454|                       {patientData.diagnoses.longCovid.met && (\n00455|                         <p className=\"text-xs text-green-700 mt-1\">\n00456|                           {t.common.confidence}: {patientData.diagnoses.longCovid.confidence}\n00457|                         </p>\n00458|                       )}\n00459|                     </div>\n00460|                   </CardContent>\n00461|                 </Card>\n00462| \n00463|                 <Card className={`border-2 ${patientData.diagnoses.pots.met ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>\n00464|                   <CardContent className=\"pt-4\">\n00465|                     <div className=\"text-center\">\n00466|                       <h3 className=\"font-semibold text-sm\">POTS (I47.1)</h3>\n00467|                       <Badge variant={patientData.diagnoses.pots.met ? 'default' : 'secondary'} className=\"mt-2\">\n00468|                         {patientData.diagnoses.pots.met ? t.criteria.results.criteriaMet : t.common.notMet}\n00469|                       </Badge>\n00470|                       {patientData.diagnoses.pots.met && (\n00471|                         <p className=\"text-xs text-green-700 mt-1\">\n00472|                           {t.common.confidence}: {patientData.diagnoses.pots.confidence}\n00473|                         </p>\n00474|                       )}\n00475|                     </div>\n00476|                   </CardContent>\n00477|                 </Card>\n00478|               </div>\n00479| \n00480|               {!anyDiagnosis && (\n00481|                 <Alert>\n00482|                   <AlertTriangle className=\"h-4 w-4\" />\n00483|                   <AlertDescription>\n00484|                     <strong>{t.newPatient.results.noDefinitiveDiagnoses}:</strong> Consider alternative diagnoses, \n00485|                     subclinical presentations, or ongoing symptom monitoring. Some patients may \n00486|                     benefit from symptomatic treatment while monitoring for progression.\n00487|                   </AlertDescription>\n00488|                 </Alert>\n00489|               )}\n00490| \n00491|               <div className=\"bg-blue-50 p-4 rounded-lg\">\n00492|                 <h4 className=\"font-semibold mb-2 text-blue-900\">{t.newPatient.results.keyResults}</h4>\n00493|                 <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n00494|                   <div>\n00495|                     <p><strong>{t.newPatient.results.riskLevel}:</strong> {patientData.quickScreen.riskLevel.toUpperCase()}</p>\n00496|                     <p><strong>{t.newPatient.results.screeningScore}:</strong> {patientData.quickScreen.score}/16</p>\n00497|                     <p><strong>{t.newPatient.results.pemPresent}:</strong> {patientData.pemQuest.present ? t.common.yes : t.common.no}</p>\n00498|                   </div>\n00499|                   <div>\n00500|                     <p><strong>{t.newPatient.results.potsCriteria}:</strong> {patientData.standTest.meetsPOTS ? t.common.met : t.common.notMet}</p>\n00501|                     <p><strong>{t.newPatient.results.redFlags}:</strong> {patientData.redFlags.symptoms.length > 0 ? patientData.redFlags.symptoms.length + ' identified' : t.common.none}</p>\n00502|                     <p><strong>{t.newPatient.results.priority}:</strong> {patientData.redFlags.priority}</p>\n00503|                   </div>\n00504|                 </div>\n00505|               </div>\n00506| \n00507|               <div className=\"flex gap-4 justify-center\">\n00508|                 <Button onClick={() => {\n00509|                   setPatientData(initialPatientData)\n00510|                   setCurrentStep('demographics')\n00511|                   setCurrentQuestionIndex(0)\n00512|                   setIsComplete(false)\n00513|                 }} variant=\"outline\">\n00514|                   {t.newPatient.results.newAssessment}\n00515|                 </Button>\n00516|                 <Button onClick={() => {\n00517|                   const blob = new Blob([soap], { type: 'text/plain' })\n00518|                   const url = URL.createObjectURL(blob)\n00519|                   const a = document.createElement('a')\n00520|                   a.href = url\n00521|                   a.download = `autodx-soap-note-${new Date().toISOString().split('T')[0]}.txt`\n00522|                   a.click()\n00523|                   URL.revokeObjectURL(url)\n00524|                 }} className=\"flex items-center gap-2\">\n00525|                   <Download className=\"h-4 w-4\" />\n00526|                   {t.newPatient.results.downloadSOAP}\n00527|                 </Button>\n00528|               </div>\n00529|             </CardContent>\n00530|           </Card>\n00531|         </div>\n00532|       </div>\n00533|     )\n00534|   }\n00535| \n00536|   // Demographics Step\n00537|   if (currentStep === 'demographics') {\n00538|     return (\n00539|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00540|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00541|           <div className=\"mb-6\">\n00542|             <div className=\"flex items-center gap-4 mb-4\">\n00543|               <User className=\"h-5 w-5 text-blue-600\" />\n00544|               <div>\n00545|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.newPatient.title}</h1>\n00546|                 <p className=\"text-gray-600\">{t.newPatient.description}</p>\n00547|               </div>\n00548|             </div>\n00549|             \n00550|             <Progress value={getStepProgress()} className=\"h-2\" />\n00551|             <p className=\"text-sm text-gray-600 mt-2\">{t.newPatient.demographics.step}</p>\n00552|           </div>\n00553| \n00554|           <Card>\n00555|             <CardHeader>\n00556|               <CardTitle>{t.newPatient.demographics.title}</CardTitle>\n00557|               <CardDescription>{t.newPatient.demographics.description}</CardDescription>\n00558|             </CardHeader>\n00559|             <CardContent className=\"space-y-4\">\n00560|               <div className=\"grid md:grid-cols-2 gap-4\">\n00561|                 <div>\n00562|                   <Label htmlFor=\"age\">{t.newPatient.demographics.age} *</Label>\n00563|                   <Input\n00564|                     id=\"age\"\n00565|                     type=\"number\"\n00566|                     placeholder=\"25\"\n00567|                     value={patientData.demographics.age || ''}\n00568|                     onChange={(e) => setPatientData(prev => ({\n00569|                       ...prev,\n00570|                       demographics: { ...prev.demographics, age: parseInt(e.target.value) || null }\n00571|                     }))}\n00572|                   />\n00573|                 </div>\n00574|                 <div>\n00575|                   <Label>{t.newPatient.demographics.gender} *</Label>\n00576|                   <RadioGroup \n00577|                     value={patientData.demographics.gender} \n00578|                     onValueChange={(value) => setPatientData(prev => ({\n00579|                       ...prev,\n00580|                       demographics: { ...prev.demographics, gender: value }\n00581|                     }))}\n00582|                     className=\"flex gap-4 mt-2\"\n00583|                   >\n00584|                     <div className=\"flex items-center space-x-2\">\n00585|                       <RadioGroupItem value=\"female\" id=\"female\" />\n00586|                       <Label htmlFor=\"female\">{t.common.female}</Label>\n00587|                     </div>\n00588|                     <div className=\"flex items-center space-x-2\">\n00589|                       <RadioGroupItem value=\"male\" id=\"male\" />\n00590|                       <Label htmlFor=\"male\">{t.common.male}</Label>\n00591|                     </div>\n00592|                     <div className=\"flex items-center space-x-2\">\n00593|                       <RadioGroupItem value=\"other\" id=\"other\" />\n00594|                       <Label htmlFor=\"other\">{t.common.other}</Label>\n00595|                     </div>\n00596|                   </RadioGroup>\n00597|                 </div>\n00598|               </div>\n00599|               \n00600|               <div className=\"grid md:grid-cols-2 gap-4\">\n00601|                 <div>\n00602|                   <Label htmlFor=\"clinician\">{t.newPatient.demographics.clinicianName}</Label>\n00603|                   <Input\n00604|                     id=\"clinician\"\n00605|                     placeholder=\"Dr. Smith\"\n00606|                     value={patientData.demographics.clinicianName}\n00607|                     onChange={(e) => setPatientData(prev => ({\n00608|                       ...prev,\n00609|                       demographics: { ...prev.demographics, clinicianName: e.target.value }\n00610|                     }))}\n00611|                   />\n00612|                 </div>\n00613|                 <div>\n00614|                   <Label htmlFor=\"patientId\">{t.newPatient.demographics.patientId}</Label>\n00615|                   <Input\n00616|                     id=\"patientId\"\n00617|                     placeholder=\"12345\"\n00618|                     value={patientData.demographics.patientId}\n00619|                     onChange={(e) => setPatientData(prev => ({\n00620|                       ...prev,\n00621|                       demographics: { ...prev.demographics, patientId: e.target.value }\n00622|                     }))}\n00623|                   />\n00624|                 </div>\n00625|               </div>\n00626| \n00627|               <div className=\"flex justify-end pt-4\">\n00628|                 <Button \n00629|                   onClick={handleDemographicsNext}\n00630|                   disabled={!patientData.demographics.age || !patientData.demographics.gender}\n00631|                   className=\"flex items-center gap-2\"\n00632|                 >\n00633|                   {t.newPatient.demographics.startAssessment}\n00634|                   <ArrowRight className=\"h-4 w-4\" />\n00635|                 </Button>\n00636|               </div>\n00637|             </CardContent>\n00638|           </Card>\n00639|         </div>\n00640|       </div>\n00641|     )\n00642|   }\n00643| \n00644|   // Quick Screen Step\n00645|   if (currentStep === 'quickScreen') {\n00646|     const currentQuestion = screeningQuestions[currentQuestionIndex]\n00647|     const currentAnswer = patientData.quickScreen.answers[currentQuestion.id]\n00648|     const progress = ((currentQuestionIndex + 1) / screeningQuestions.length) * 100\n00649| \n00650|     return (\n00651|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00652|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00653|           <div className=\"mb-6\">\n00654|             <div className=\"flex items-center gap-4 mb-4\">\n00655|               <Clock className=\"h-5 w-5 text-orange-600\" />\n00656|               <div>\n00657|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.quickScreen.title}</h1>\n00658|                 <p className=\"text-gray-600\">{t.quickScreen.description}</p>\n00659|               </div>\n00660|             </div>\n00661|             \n00662|             <Progress value={getStepProgress()} className=\"h-2 mb-2\" />\n00663|             <Progress value={progress} className=\"h-1\" />\n00664|             <p className=\"text-sm text-gray-600 mt-2\">\n00665|               {t.common.question} {currentQuestionIndex + 1} {t.common.of} {screeningQuestions.length}\n00666|             </p>\n00667|           </div>\n00668| \n00669|           <Card>\n00670|             <CardHeader>\n00671|               <CardTitle className=\"text-lg\">{currentQuestion.question}</CardTitle>\n00672|               <CardDescription>{t.common.category}: {currentQuestion.category}</CardDescription>\n00673|             </CardHeader>\n00674|             <CardContent>\n00675|               <div className=\"space-y-4\">\n00676|                 <div className=\"flex gap-4 justify-center\">\n00677|                   <Button\n00678|                     onClick={() => handleQuickScreenAnswer(currentQuestion.id, true)}\n00679|                     variant={currentAnswer === true ? \"default\" : \"outline\"}\n00680|                     className=\"flex items-center gap-2 px-8\"\n00681|                   >\n00682|                     {t.common.yes}\n00683|                   </Button>\n00684|                   <Button\n00685|                     onClick={() => handleQuickScreenAnswer(currentQuestion.id, false)}\n00686|                     variant={currentAnswer === false ? \"default\" : \"outline\"}\n00687|                     className=\"flex items-center gap-2 px-8\"\n00688|                   >\n00689|                     {t.common.no}\n00690|                   </Button>\n00691|                 </div>\n00692| \n00693|                 <div className=\"flex justify-between pt-6\">\n00694|                   <Button \n00695|                     onClick={() => setCurrentQuestionIndex(prev => prev - 1)} \n00696|                     disabled={currentQuestionIndex === 0}\n00697|                     variant=\"outline\"\n00698|                   >\n00699|                     {t.common.previous}\n00700|                   </Button>\n00701|                   \n00702|                   <Button \n00703|                     onClick={() => {\n00704|                       if (currentQuestionIndex < screeningQuestions.length - 1) {\n00705|                         setCurrentQuestionIndex(prev => prev + 1)\n00706|                       } else {\n00707|                         setCurrentStep(determineNextStep())\n00708|                       }\n00709|                     }}\n00710|                     disabled={currentAnswer === undefined}\n00711|                   >\n00712|                     {currentQuestionIndex === screeningQuestions.length - 1 ? t.common.continue : t.common.next}\n00713|                   </Button>\n00714|                 </div>\n00715|               </div>\n00716|             </CardContent>\n00717|           </Card>\n00718|         </div>\n00719|       </div>\n00720|     )\n00721|   }\n00722| \n00723|   // Red Flags Step\n00724|   if (currentStep === 'redFlags') {\n00725|     return (\n00726|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00727|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00728|           <div className=\"mb-6\">\n00729|             <div className=\"flex items-center gap-4 mb-4\">\n00730|               <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n00731|               <div>\n00732|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.newPatient.redFlags.title}</h1>\n00733|                 <p className=\"text-gray-600\">{t.newPatient.redFlags.description}</p>\n00734|               </div>\n00735|             </div>\n00736|             <Progress value={getStepProgress()} className=\"h-2\" />\n00737|           </div>\n00738| \n00739|           <Card>\n00740|             <CardHeader>\n00741|               <CardTitle>{t.redFlag.symptoms.title}</CardTitle>\n00742|               <CardDescription>{t.newPatient.redFlags.selectSymptoms}</CardDescription>\n00743|             </CardHeader>\n00744|             <CardContent>\n00745|               <div className=\"space-y-3\">\n00746|                 {redFlagSymptoms.map((flag) => (\n00747|                   <div key={flag.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00748|                     <Checkbox\n00749|                       id={flag.id}\n00750|                       checked={patientData.redFlags.symptoms.includes(flag.id)}\n00751|                       onCheckedChange={(checked) => {\n00752|                         if (checked) {\n00753|                           setPatientData(prev => ({\n00754|                             ...prev,\n00755|                             redFlags: {\n00756|                               ...prev.redFlags,\n00757|                               symptoms: [...prev.redFlags.symptoms, flag.id],\n00758|                               priority: flag.priority === 'high' ? 'urgent' : prev.redFlags.priority\n00759|                             }\n00760|                           }))\n00761|                         } else {\n00762|                           const newSymptoms = patientData.redFlags.symptoms.filter(s => s !== flag.id)\n00763|                           setPatientData(prev => ({\n00764|                             ...prev,\n00765|                             redFlags: {\n00766|                               ...prev.redFlags,\n00767|                               symptoms: newSymptoms,\n00768|                               priority: newSymptoms.some(s => redFlagSymptoms.find(rf => rf.id === s)?.priority === 'high') ? 'urgent' : 'routine'\n00769|                             }\n00770|                           }))\n00771|                         }\n00772|                       }}\n00773|                     />\n00774|                     <Label htmlFor={flag.id} className=\"cursor-pointer text-sm flex-1\">\n00775|                       {flag.symptom}\n00776|                     </Label>\n00777|                   </div>\n00778|                 ))}\n00779|               </div>\n00780|               \n00781|               <div className=\"flex justify-center pt-6\">\n00782|                 <Button onClick={() => setCurrentStep(determineNextStep())}>\n00783|                   {t.newPatient.redFlags.continueAssessment}\n00784|                 </Button>\n00785|               </div>\n00786|             </CardContent>\n00787|           </Card>\n00788|         </div>\n00789|       </div>\n00790|     )\n00791|   }\n00792| \n00793|   // Stand Test Step\n00794|   if (currentStep === 'standTest') {\n00795|     return (\n00796|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00797|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00798|           <div className=\"mb-6\">\n00799|             <div className=\"flex items-center gap-4 mb-4\">\n00800|               <Heart className=\"h-5 w-5 text-red-600\" />\n00801|               <div>\n00802|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.newPatient.standTest.title}</h1>\n00803|                 <p className=\"text-gray-600\">{t.newPatient.standTest.description}</p>\n00804|               </div>\n00805|             </div>\n00806|             <Progress value={getStepProgress()} className=\"h-2\" />\n00807|           </div>\n00808| \n00809|           <Card>\n00810|             <CardHeader>\n00811|               <CardTitle>{t.newPatient.standTest.measurements}</CardTitle>\n00812|               <CardDescription>{t.newPatient.standTest.measurementDescription}</CardDescription>\n00813|             </CardHeader>\n00814|             <CardContent className=\"space-y-4\">\n00815|               <div className=\"grid md:grid-cols-2 gap-4\">\n00816|                 <div>\n00817|                   <Label htmlFor=\"baselineHR\">{t.newPatient.standTest.baselineHR}</Label>\n00818|                   <Input\n00819|                     id=\"baselineHR\"\n00820|                     type=\"number\"\n00821|                     placeholder=\"70\"\n00822|                     value={patientData.standTest.baselineHR || ''}\n00823|                     onChange={(e) => setPatientData(prev => ({\n00824|                       ...prev,\n00825|                       standTest: {\n00826|                         ...prev.standTest,\n00827|                         baselineHR: parseInt(e.target.value) || null\n00828|                       }\n00829|                     }))}\n00830|                   />\n00831|                 </div>\n00832|                 <div>\n00833|                   <Label htmlFor=\"peakHR\">{t.newPatient.standTest.peakHR}</Label>\n00834|                   <Input\n00835|                     id=\"peakHR\"\n00836|                     type=\"number\"\n00837|                     placeholder=\"110\"\n00838|                     value={patientData.standTest.peakHR || ''}\n00839|                     onChange={(e) => {\n00840|                       const peakHR = parseInt(e.target.value) || null\n00841|                       const baselineHR = patientData.standTest.baselineHR\n00842|                       \n00843|                       // Enhanced POTS criteria calculation\n00844|                       let meetsPOTS = false\n00845|                       let potsSubtype = ''\n00846|                       \n00847|                       if (peakHR && baselineHR) {\n00848|                         const hrIncrease = peakHR - baselineHR\n00849|                         const age = patientData.demographics.age || 25\n00850|                         \n00851|                         // Age-specific HR thresholds\n00852|                         const potsThreshold = (age >= 12 && age <= 19) ? 40 : 30\n00853|                         \n00854|                         if (hrIncrease >= potsThreshold) {\n00855|                           meetsPOTS = true\n00856|                           \n00857|                           // Determine potential subtype based on HR pattern\n00858|                           if (peakHR >= 120) {\n00859|                             potsSubtype = 'hyperadrenergic'\n00860|                           } else if (hrIncrease >= 40) {\n00861|                             potsSubtype = 'neuropathic'\n00862|                           } else {\n00863|                             potsSubtype = 'hypovolemic'\n00864|                           }\n00865|                         }\n00866|                       }\n00867|                       \n00868|                       setPatientData(prev => ({\n00869|                         ...prev,\n00870|                         standTest: {\n00871|                           ...prev.standTest,\n00872|                           peakHR,\n00873|                           sustainedHR: peakHR,\n00874|                           meetsPOTS,\n00875|                           performed: true\n00876|                         }\n00877|                       }))\n00878|                     }}\n00879|                   />\n00880|                 </div>\n00881|               </div>\n00882|               \n00883|               {patientData.standTest.baselineHR && patientData.standTest.peakHR && (\n00884|                 <Alert className={patientData.standTest.meetsPOTS ? 'border-red-200 bg-red-50' : 'border-green-200 bg-green-50'}>\n00885|                   <Heart className=\"h-4 w-4\" />\n00886|                   <AlertDescription>\n00887|                     <strong>{t.newPatient.standTest.hrIncrease}: {patientData.standTest.peakHR - patientData.standTest.baselineHR} {t.common.bpm}</strong><br />\n00888|                     {t.newPatient.standTest.potsCriteria} (≥30 {t.common.bpm}): {patientData.standTest.meetsPOTS ? t.common.met.toUpperCase() : t.common.notMet}\n00889|                   </AlertDescription>\n00890|                 </Alert>\n00891|               )}\n00892|               \n00893|               <div className=\"flex justify-center pt-4\">\n00894|                 <Button \n00895|                   onClick={() => setCurrentStep(determineNextStep())}\n00896|                   disabled={!patientData.standTest.baselineHR || !patientData.standTest.peakHR}\n00897|                 >\n00898|                   {t.newPatient.standTest.continueToPEM}\n00899|                 </Button>\n00900|               </div>\n00901|             </CardContent>\n00902|           </Card>\n00903|         </div>\n00904|       </div>\n00905|     )\n00906|   }\n00907| \n00908|   // PEM Quest Step\n00909|   if (currentStep === 'pemQuest') {\n00910|     const currentPEMQuestion = pemQuestions[currentQuestionIndex % pemQuestions.length]\n00911|     const currentAnswer = patientData.pemQuest.answers[currentPEMQuestion.id]\n00912|     const progress = ((currentQuestionIndex + 1) / pemQuestions.length) * 100\n00913| \n00914|     return (\n00915|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00916|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00917|           <div className=\"mb-6\">\n00918|             <div className=\"flex items-center gap-4 mb-4\">\n00919|               <Activity className=\"h-5 w-5 text-orange-600\" />\n00920|               <div>\n00921|                 <h1 className=\"text-2xl font-bold text-gray-900\">{t.newPatient.pemAssessment.title}</h1>\n00922|                 <p className=\"text-gray-600\">{t.newPatient.pemAssessment.description}</p>\n00923|               </div>\n00924|             </div>\n00925|             <Progress value={getStepProgress()} className=\"h-2 mb-2\" />\n00926|             <Progress value={progress} className=\"h-1\" />\n00927|             <p className=\"text-sm text-gray-600 mt-2\">\n00928|               {t.common.question} {(currentQuestionIndex % pemQuestions.length) + 1} {t.common.of} {pemQuestions.length}\n00929|             </p>\n00930|           </div>\n00931| \n00932|           <Card>\n00933|             <CardHeader>\n00934|               <CardTitle className=\"text-lg\">{currentPEMQuestion.question}</CardTitle>\n00935|             </CardHeader>\n00936|             <CardContent>\n00937|               <RadioGroup \n00938|                 value={currentAnswer || ''} \n00939|                 onValueChange={(value) => handlePEMAnswer(currentPEMQuestion.id, value)}\n00940|                 className=\"space-y-3\"\n00941|               >\n00942|                 {currentPEMQuestion.options.map((option) => (\n00943|                   <div key={option.value} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00944|                     <RadioGroupItem value={option.value} id={option.value} className=\"mt-1\" />\n00945|                     <Label htmlFor={option.value} className=\"cursor-pointer flex-1\">\n00946|                       {option.label}\n00947|                     </Label>\n00948|                   </div>\n00949|                 ))}\n00950|               </RadioGroup>\n00951| \n00952|               <div className=\"flex justify-between pt-6\">\n00953|                 <Button \n00954|                   onClick={() => setCurrentQuestionIndex(prev => prev - 1)} \n00955|                   disabled={currentQuestionIndex === 0}\n00956|                   variant=\"outline\"\n00957|                 >\n00958|                   Previous\n00959|                 </Button>\n00960|                 \n00961|                 <Button \n00962|                   onClick={() => {\n00963|                     if (currentQuestionIndex < pemQuestions.length - 1) {\n00964|                       setCurrentQuestionIndex(prev => prev + 1)\n00965|                     } else {\n00966|                       setCurrentStep('criteria')\n00967|                     }\n00968|                   }}\n00969|                   disabled={!currentAnswer}\n00970|                 >\n00971|                   {currentQuestionIndex === pemQuestions.length - 1 ? t.newPatient.pemAssessment.finalizeAssessment : t.common.next}\n00972|                 </Button>\n00973|               </div>\n00974|             </CardContent>\n00975|           </Card>\n00976|         </div>\n00977|       </div>\n00978|     )\n00979|   }\n00980| \n00981|   // Criteria Step (auto-process)\n00982|   if (currentStep === 'criteria') {\n00983|     return (\n00984|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00985|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00986|           <Card>\n00987|             <CardContent className=\"pt-6 text-center\">\n00988|               <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n00989|               <h3 className=\"text-lg font-semibold mb-2\">{t.newPatient.processing.title}</h3>\n00990|               <p className=\"text-gray-600\">{t.newPatient.processing.description}</p>\n00991|             </CardContent>\n00992|           </Card>\n00993|         </div>\n00994|       </div>\n00995|     )\n00996|   }\n00997| \n00998|   return <div>Loading...</div>\n00999| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { ArrowRight, User, ClipboardList, FileText, Download, CheckCircle, AlertTriangle, Activity, Heart, Clock, BarChart3 } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface PatientData {\n  demographics: {\n    age: number | null\n    gender: string"
    },
    "title": "app/new-patient/page.tsx",
    "time": {
      "start": 1758302293757,
      "end": 1758302293760
    }
  }
}