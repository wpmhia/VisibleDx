{
  "id": "prt_962fc036d001Pdn35IQXx3supt",
  "messageID": "msg_962fba899001VkzocRY6Po1psD",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01J6BcJV1biBTrtxpro8ou2A",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/pem-quest/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n00007| import { Label } from '@/components/ui/label'\n00008| import { Progress } from '@/components/ui/progress'\n00009| import { Badge } from '@/components/ui/badge'\n00010| import { Alert, AlertDescription } from '@/components/ui/alert'\n00011| import { ArrowLeft, ArrowRight, Activity, Clock, TrendingDown, CheckCircle } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| import { useTranslation } from '@/lib/language-context'\n00014| \n00015| interface PEMQuestion {\n00016|   id: string\n00017|   question: string\n00018|   description?: string\n00019|   options: { value: string; label: string; score: number }[]\n00020| }\n00021| \n00022| // PEM questions will be generated from translations\n00023| \n00024| export default function PEMQuest() {\n00025|   const [answers, setAnswers] = useState<Record<string, string>>({})\n00026|   const [currentQuestion, setCurrentQuestion] = useState(0)\n00027|   const [isComplete, setIsComplete] = useState(false)\n00028|   const { t } = useTranslation()\n00029| \n00030|   const handleAnswer = (questionId: string, value: string) => {\n00031|     setAnswers(prev => ({\n00032|       ...prev,\n00033|       [questionId]: value\n00034|     }))\n00035|   }\n00036| \n00037|   const nextQuestion = () => {\n00038|     if (currentQuestion < pemQuestions.length - 1) {\n00039|       setCurrentQuestion(prev => prev + 1)\n00040|     } else {\n00041|       setIsComplete(true)\n00042|     }\n00043|   }\n00044| \n00045|   const prevQuestion = () => {\n00046|     if (currentQuestion > 0) {\n00047|       setCurrentQuestion(prev => prev - 1)\n00048|     }\n00049|   }\n00050| \n00051|   const getPEMQuestions = () => {\n00052|     const scoreArrays = [[0,1,2,3,4], [0,1,2,3,4], [0,2,3,4,3], [0,1,2,3,4], [0,1,2,3,4]]\n00053|     \n00054|     return [\n00055|       {\n00056|         id: 'frequency',\n00057|         question: t.pem.questions.frequency.question,\n00058|         description: t.pem.questions.frequency.description,\n00059|         options: t.pem.questions.frequency.options.map((label, index) => ({\n00060|           value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n00061|           label,\n00062|           score: scoreArrays[0][index]\n00063|         }))\n00064|       },\n00065|       {\n00066|         id: 'mental_frequency',\n00067|         question: t.pem.questions.mentalFrequency.question,\n00068|         description: t.pem.questions.mentalFrequency.description,\n00069|         options: t.pem.questions.mentalFrequency.options.map((label, index) => ({\n00070|           value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n00071|           label,\n00072|           score: scoreArrays[1][index]\n00073|         }))\n00074|       },\n00075|       {\n00076|         id: 'onset_time',\n00077|         question: t.pem.questions.onsetTime.question,\n00078|         options: t.pem.questions.onsetTime.options.map((label, index) => ({\n00079|           value: ['no_worsening', 'during', 'immediately', 'hours', 'next_day'][index],\n00080|           label,\n00081|           score: scoreArrays[2][index]\n00082|         }))\n00083|       },\n00084|       {\n00085|         id: 'severity',\n00086|         question: t.pem.questions.severity.question,\n00087|         options: t.pem.questions.severity.options.map((label, index) => ({\n00088|           value: ['none', 'mild', 'moderate', 'severe', 'very_severe'][index],\n00089|           label,\n00090|           score: scoreArrays[3][index]\n00091|         }))\n00092|       },\n00093|       {\n00094|         id: 'recovery_time',\n00095|         question: t.pem.questions.recoveryTime.question,\n00096|         options: t.pem.questions.recoveryTime.options.map((label, index) => ({\n00097|           value: ['no_recovery_needed', 'hours', 'one_day', 'several_days', 'week_or_more'][index],\n00098|           label,\n00099|           score: scoreArrays[4][index]\n00100|         }))\n00101|       }\n00102|     ]\n00103|   }\n00104| \n00105|   const calculatePEMScore = () => {\n00106|     const pemQuestions = getPEMQuestions()\n00107|     const totalScore = pemQuestions.reduce((sum, question) => {\n00108|       const answer = answers[question.id]\n00109|       const option = question.options.find(opt => opt.value === answer)\n00110|       return sum + (option?.score || 0)\n00111|     }, 0)\n00112| \n00113|     const maxScore = pemQuestions.reduce((sum, question) => {\n00114|       return sum + Math.max(...question.options.map(opt => opt.score))\n00115|     }, 0)\n00116| \n00117|     const percentage = (totalScore / maxScore) * 100\n00118| \n00119|     let severity = t.pem.results.severityLevels.none\n00120|     let color = 'bg-green-100 text-green-800'\n00121|     \n00122|     if (percentage >= 75) {\n00123|       severity = t.pem.results.severityLevels.severe\n00124|       color = 'bg-red-100 text-red-800'\n00125|     } else if (percentage >= 50) {\n00126|       severity = t.pem.results.severityLevels.moderate\n00127|       color = 'bg-orange-100 text-orange-800'\n00128|     } else if (percentage >= 25) {\n00129|       severity = t.pem.results.severityLevels.mild\n00130|       color = 'bg-yellow-100 text-yellow-800'\n00131|     }\n00132| \n00133|     const isPEMPresent = percentage >= 25\n00134| \n00135|     return {\n00136|       totalScore,\n00137|       maxScore,\n00138|       percentage: Math.round(percentage),\n00139|       severity,\n00140|       color,\n00141|       isPEMPresent\n00142|     }\n00143|   }\n00144| \n00145|   const pemQuestions = getPEMQuestions()\n00146|   const progress = ((currentQuestion + 1) / pemQuestions.length) * 100\n00147|   const current = pemQuestions[currentQuestion]\n00148|   const currentAnswer = answers[current?.id]\n00149| \n00150|   if (isComplete) {\n00151|     const pemScore = calculatePEMScore()\n00152|     \n00153|     return (\n00154|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00155|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00156|           <Card>\n00157|             <CardHeader className=\"text-center\">\n00158|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00159|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00160|                 {t.pem.results.complete}\n00161|               </CardTitle>\n00162|               <CardDescription>\n00163|                 {t.pem.results.description}\n00164|               </CardDescription>\n00165|             </CardHeader>\n00166|             <CardContent className=\"space-y-6\">\n00167|               <div className=\"text-center\">\n00168|                 <Badge className={`px-4 py-2 text-lg ${pemScore.color}`}>\n00169|                   {pemScore.severity}\n00170|                 </Badge>\n00171|                 <p className=\"text-sm text-gray-600 mt-2\">\n00172|                   Score: {pemScore.totalScore}/{pemScore.maxScore} ({pemScore.percentage}%)\n00173|                 </p>\n00174|               </div>\n00175| \n00176|               <div className=\"grid md:grid-cols-2 gap-6\">\n00177|                 <div className=\"space-y-4\">\n00178|                   <h3 className=\"font-semibold text-lg\">{t.common.results}</h3>\n00179|                   \n00180|                   <div className=\"bg-gray-50 p-4 rounded-lg space-y-3\">\n00181|                     {pemQuestions.map((question) => {\n00182|                       const answer = answers[question.id]\n00183|                       const option = question.options.find(opt => opt.value === answer)\n00184|                       return (\n00185|                         <div key={question.id} className=\"border-b border-gray-200 pb-2 last:border-b-0\">\n00186|                           <p className=\"text-sm font-medium text-gray-700 mb-1\">\n00187|                             {question.question}\n00188|                           </p>\n00189|                           <div className=\"flex justify-between items-center\">\n00190|                             <span className=\"text-sm text-gray-600\">{option?.label}</span>\n00191|                             <Badge variant=\"outline\" className=\"text-xs\">\n00192|                               {option?.score} pts\n00193|                             </Badge>\n00194|                           </div>\n00195|                         </div>\n00196|                       )\n00197|                     })}\n00198|                   </div>\n00199|                 </div>\n00200| \n00201|                 <div className=\"space-y-4\">\n00202|                   <h3 className=\"font-semibold text-lg\">{t.pem.results.clinicalInterpretation}</h3>\n00203|                   \n00204|                   <div className=\"bg-blue-50 p-4 rounded-lg\">\n00205|                     <h4 className=\"font-semibold mb-2 text-blue-900\">{t.pem.results.status}</h4>\n00206|                     <p className=\"text-blue-800 text-sm mb-2\">\n00207|                       {pemScore.isPEMPresent \n00208|                         ? t.pem.results.present\n00209|                         : t.pem.results.absent\n00210|                       }\n00211|                     </p>\n00212|                     \n00213|                     {pemScore.isPEMPresent && (\n00214|                       <div className=\"text-blue-800 text-sm space-y-1\">\n00215|                         <p>• PEM is a key diagnostic criterion for ME/CFS</p>\n00216|                         <p>• Consider activity pacing and energy management</p>\n00217|                         <p>• Avoid graded exercise therapy (GET)</p>\n00218|                       </div>\n00219|                     )}\n00220|                   </div>\n00221| \n00222|                   <div className=\"bg-yellow-50 p-4 rounded-lg\">\n00223|                     <h4 className=\"font-semibold mb-2 text-yellow-900\">{t.common.recommendations}</h4>\n00224|                     <div className=\"text-yellow-800 text-sm space-y-1\">\n00225|                       {pemScore.severity === t.pem.results.severityLevels.severe && \n00226|                         t.pem.results.recommendations.severe.map((rec, index) => (\n00227|                           <p key={index}>• {rec}</p>\n00228|                         ))\n00229|                       }\n00230|                       {pemScore.severity === t.pem.results.severityLevels.moderate && \n00231|                         t.pem.results.recommendations.moderate.map((rec, index) => (\n00232|                           <p key={index}>• {rec}</p>\n00233|                         ))\n00234|                       }\n00235|                       {pemScore.severity === t.pem.results.severityLevels.mild && \n00236|                         t.pem.results.recommendations.mild.map((rec, index) => (\n00237|                           <p key={index}>• {rec}</p>\n00238|                         ))\n00239|                       }\n00240|                       {pemScore.severity === t.pem.results.severityLevels.none && \n00241|                         t.pem.results.recommendations.none.map((rec, index) => (\n00242|                           <p key={index}>• {rec}</p>\n00243|                         ))\n00244|                       }\n00245|                     </div>\n00246|                   </div>\n00247|                 </div>\n00248|               </div>\n00249| \n00250|               <Alert>\n00251|                 <Activity className=\"h-4 w-4\" />\n00252|                 <AlertDescription>\n00253|                     {t.pem.results.important}\n00254|                 </AlertDescription>\n00255|               </Alert>\n00256| \n00257|               <div className=\"flex gap-4 justify-center\">\n00258|                 <Button onClick={() => {\n00259|                   setAnswers({})\n00260|                   setCurrentQuestion(0)\n00261|                   setIsComplete(false)\n00262|                 }} variant=\"outline\">\n00263|                   {t.pem.results.retake}\n00264|                 </Button>\n00265|                 <Button asChild>\n00266|                   <Link href=\"/criteria-engine\">\n00267|                       {t.common.continue} to Criteria Engine\n00268|                   </Link>\n00269|                 </Button>\n00270|               </div>\n00271|             </CardContent>\n00272|           </Card>\n00273|         </div>\n00274|       </div>\n00275|     )\n00276|   }\n00277| \n00278|   return (\n00279|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00280|       <div className=\"container mx-auto px-4 max-w-3xl\">\n00281|         <div className=\"mb-6\">\n00282|           <div className=\"flex items-center gap-4 mb-4\">\n00283|             <Activity className=\"h-5 w-5 text-orange-600\" />\n00284|             <div>\n00285|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.pem.title}</h1>\n00286|               <p className=\"text-gray-600\">{t.pem.description}</p>\n00287|             </div>\n00288|           </div>\n00289|           \n00290|           <Progress value={progress} className=\"h-2\" />\n00291|           <p className=\"text-sm text-gray-600 mt-2\">\n00292|             {t.common.question} {currentQuestion + 1} {t.common.of} {pemQuestions.length}\n00293|           </p>\n00294|         </div>\n00295| \n00296|         <Card>\n00297|           <CardHeader>\n00298|             <CardTitle className=\"text-lg\">\n00299|               {current.question}\n00300|             </CardTitle>\n00301|             {current.description && (\n00302|               <CardDescription>\n00303|                 {current.description}\n00304|               </CardDescription>\n00305|             )}\n00306|           </CardHeader>\n00307|           <CardContent>\n00308|             <div className=\"space-y-6\">\n00309|               <RadioGroup \n00310|                 value={currentAnswer || ''} \n00311|                 onValueChange={(value) => handleAnswer(current.id, value)}\n00312|                 className=\"space-y-3\"\n00313|               >\n00314|                 {current.options.map((option) => (\n00315|                   <div key={option.value} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00316|                     <RadioGroupItem value={option.value} id={option.value} className=\"mt-1\" />\n00317|                     <div className=\"flex-1\">\n00318|                       <Label htmlFor={option.value} className=\"cursor-pointer font-medium\">\n00319|                         {option.label}\n00320|                       </Label>\n00321|                       <div className=\"flex justify-between items-center mt-1\">\n00322|                         <Badge variant=\"outline\" className=\"text-xs\">\n00323|                           {option.score} {option.score === 1 ? 'point' : 'points'}\n00324|                         </Badge>\n00325|                       </div>\n00326|                     </div>\n00327|                   </div>\n00328|                 ))}\n00329|               </RadioGroup>\n00330| \n00331|               <div className=\"flex justify-between pt-6\">\n00332|                 <Button \n00333|                   onClick={prevQuestion} \n00334|                   disabled={currentQuestion === 0}\n00335|                   variant=\"outline\"\n00336|                   className=\"flex items-center gap-2\"\n00337|                 >\n00338|                   <ArrowLeft className=\"h-4 w-4\" />\n00339|                   {t.common.previous}\n00340|                 </Button>\n00341|                 \n00342|                 <Button \n00343|                   onClick={nextQuestion}\n00344|                   disabled={!currentAnswer}\n00345|                   className=\"flex items-center gap-2\"\n00346|                 >\n00347|                   {currentQuestion === pemQuestions.length - 1 ? t.common.complete + ' Assessment' : t.common.next + ' Question'}\n00348|                   <ArrowRight className=\"h-4 w-4\" />\n00349|                 </Button>\n00350|               </div>\n00351|             </div>\n00352|           </CardContent>\n00353|         </Card>\n00354| \n00355|         <div className=\"mt-6\">\n00356|           <Card className=\"border-orange-200 bg-orange-50\">\n00357|             <CardContent className=\"pt-4\">\n00358|               <div className=\"flex items-start gap-3\">\n00359|                 <TrendingDown className=\"h-5 w-5 text-orange-600 mt-1\" />\n00360|                 <div className=\"text-sm text-orange-800\">\n00361|                   <h4 className=\"font-semibold mb-1\">{t.pem.about.title}</h4>\n00362|                   <p>\n00363|                     {t.pem.about.description}\n00364|                   </p>\n00365|                 </div>\n00366|               </div>\n00367|             </CardContent>\n00368|           </Card>\n00369|         </div>\n00370|       </div>\n00371|     </div>\n00372|   )\n00373| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { Label } from '@/components/ui/label'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { ArrowLeft, ArrowRight, Activity, Clock, TrendingDown, CheckCircle } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface PEMQuestion {\n  id: string\n  question: string\n  description?: string\n  options: { value: string; label: string; score: number }[]\n}"
    },
    "title": "app/pem-quest/page.tsx",
    "time": {
      "start": 1758302307695,
      "end": 1758302307698
    }
  }
}