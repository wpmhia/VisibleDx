{
  "id": "prt_962fc070d001qaGCqonVwUpzSw",
  "messageID": "msg_962fba899001VkzocRY6Po1psD",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_0114eW96fhXtok7W1pwvP3i2",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/subtype-advisor/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Checkbox } from '@/components/ui/checkbox'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { Alert, AlertDescription } from '@/components/ui/alert'\n00009| import { Input } from '@/components/ui/input'\n00010| import { Label } from '@/components/ui/label'\n00011| import { ArrowLeft, Users, Pill, Heart, Droplets, Activity, Brain, Shield, Download } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| import { useTranslation } from '@/lib/language-context'\n00014| \n00015| interface POTSSubtype {\n00016|   id: string\n00017|   name: string\n00018|   description: string\n00019|   icon: any\n00020|   color: string\n00021|   criteria: { id: string; description: string; checked: boolean }[]\n00022|   treatments: {\n00023|     nonPharmacological: string[]\n00024|     firstLine: string[]\n00025|     firstLineMonitoring?: string[]\n00026|     secondLine: string[]\n00027|     secondLineMonitoring?: string[]\n00028|   }\n00029| }\n00030| \n00031| const createSubtypes = (t: any): POTSSubtype[] => [\n00032|   {\n00033|     id: 'hypovolemic',\n00034|     name: t.subtype.subtypes.hypovolemic.name,\n00035|     description: t.subtype.subtypes.hypovolemic.description,\n00036|     icon: Droplets,\n00037|     color: 'blue',\n00038|     criteria: t.subtype.subtypes.hypovolemic.criteria.map((desc: string, index: number) => ({\n00039|       id: ['low_bp', 'thirst', 'salt_craving', 'volume_depletion', 'renin_high'][index],\n00040|       description: desc,\n00041|       checked: false\n00042|     })),\n00043|     treatments: {\n00044|       nonPharmacological: t.subtype.subtypes.hypovolemic.treatments.nonPharmacological,\n00045|       firstLine: t.subtype.subtypes.hypovolemic.treatments.firstLine,\n00046|       firstLineMonitoring: t.subtype.subtypes.hypovolemic.treatments.firstLineMonitoring,\n00047|       secondLine: t.subtype.subtypes.hypovolemic.treatments.secondLine,\n00048|       secondLineMonitoring: t.subtype.subtypes.hypovolemic.treatments.secondLineMonitoring\n00049|     }\n00050|   },\n00051|   {\n00052|     id: 'neuropathic',\n00053|     name: t.subtype.subtypes.neuropathic.name,\n00054|     description: t.subtype.subtypes.neuropathic.description,\n00055|     icon: Brain,\n00056|     color: 'purple',\n00057|     criteria: t.subtype.subtypes.neuropathic.criteria.map((desc: string, index: number) => ({\n00058|       id: ['distal_neuropathy', 'gi_dysfunction', 'anhidrosis', 'pupil_abnormal', 'diabetes_autoimmune'][index],\n00059|       description: desc,\n00060|       checked: false\n00061|     })),\n00062|     treatments: {\n00063|       nonPharmacological: t.subtype.subtypes.neuropathic.treatments.nonPharmacological,\n00064|       firstLine: t.subtype.subtypes.neuropathic.treatments.firstLine,\n00065|       firstLineMonitoring: t.subtype.subtypes.neuropathic.treatments.firstLineMonitoring,\n00066|       secondLine: t.subtype.subtypes.neuropathic.treatments.secondLine,\n00067|       secondLineMonitoring: t.subtype.subtypes.neuropathic.treatments.secondLineMonitoring\n00068|     }\n00069|   },\n00070|   {\n00071|     id: 'hyperadrenergic',\n00072|     name: t.subtype.subtypes.hyperadrenergic.name,\n00073|     description: t.subtype.subtypes.hyperadrenergic.description,\n00074|     icon: Activity,\n00075|     color: 'red',\n00076|     criteria: t.subtype.subtypes.hyperadrenergic.criteria.map((desc: string, index: number) => ({\n00077|       id: ['high_bp', 'anxiety_panic', 'migraine', 'cold_hands', 'norepinephrine_high'][index],\n00078|       description: desc,\n00079|       checked: false\n00080|     })),\n00081|     treatments: {\n00082|       nonPharmacological: t.subtype.subtypes.hyperadrenergic.treatments.nonPharmacological,\n00083|       firstLine: t.subtype.subtypes.hyperadrenergic.treatments.firstLine,\n00084|       firstLineMonitoring: t.subtype.subtypes.hyperadrenergic.treatments.firstLineMonitoring,\n00085|       secondLine: t.subtype.subtypes.hyperadrenergic.treatments.secondLine,\n00086|       secondLineMonitoring: t.subtype.subtypes.hyperadrenergic.treatments.secondLineMonitoring\n00087|     }\n00088|   },\n00089|   {\n00090|     id: 'autoimmune',\n00091|     name: t.subtype.subtypes.autoimmune.name,\n00092|     description: t.subtype.subtypes.autoimmune.description,\n00093|     icon: Shield,\n00094|     color: 'green',\n00095|     criteria: t.subtype.subtypes.autoimmune.criteria.map((desc: string, index: number) => ({\n00096|       id: ['autoimmune_history', 'rapid_onset', 'viral_trigger', 'antibodies', 'other_autoimmune'][index],\n00097|       description: desc,\n00098|       checked: false\n00099|     })),\n00100|     treatments: {\n00101|       nonPharmacological: t.subtype.subtypes.autoimmune.treatments.nonPharmacological,\n00102|       firstLine: t.subtype.subtypes.autoimmune.treatments.firstLine,\n00103|       firstLineMonitoring: t.subtype.subtypes.autoimmune.treatments.firstLineMonitoring,\n00104|       secondLine: t.subtype.subtypes.autoimmune.treatments.secondLine,\n00105|       secondLineMonitoring: t.subtype.subtypes.autoimmune.treatments.secondLineMonitoring\n00106|     }\n00107|   }\n00108| ]\n00109| \n00110| export default function SubtypeAdvisor() {\n00111|   const { t } = useTranslation()\n00112|   const potsSubtypes = createSubtypes(t)\n00113|   const [subtypeData, setSubtypeData] = useState(potsSubtypes.map(s => ({ ...s })))\n00114|   const [patientAge, setPatientAge] = useState<number | null>(null)\n00115|   const [comorbidities, setComorbidities] = useState<string[]>([])\n00116|   const [isComplete, setIsComplete] = useState(false)\n00117|   const [expandedSubtype, setExpandedSubtype] = useState<string | null>(null)\n00118| \n00119|   // Update subtype translations when language changes while preserving checked states\n00120|   useEffect(() => {\n00121|     const newSubtypes = createSubtypes(t)\n00122|     setSubtypeData(prev => \n00123|       newSubtypes.map((newSubtype, index) => ({\n00124|         ...newSubtype,\n00125|         criteria: newSubtype.criteria.map((newCriterion, criterionIndex) => ({\n00126|           ...newCriterion,\n00127|           checked: prev[index]?.criteria[criterionIndex]?.checked || false\n00128|         }))\n00129|       }))\n00130|     )\n00131|   }, [t])\n00132| \n00133|   // Scroll to top when analysis is complete\n00134|   useEffect(() => {\n00135|     if (isComplete) {\n00136|       // Use setTimeout to ensure DOM is fully rendered before scrolling\n00137|       setTimeout(() => {\n00138|         window.scrollTo({ top: 0, behavior: 'auto' })\n00139|       }, 100)\n00140|     }\n00141|   }, [isComplete])\n00142| \n00143|   const handleCriteriaChange = (subtypeId: string, criteriaId: string, checked: boolean) => {\n00144|     setSubtypeData(prev => prev.map(subtype => \n00145|       subtype.id === subtypeId \n00146|         ? {\n00147|             ...subtype,\n00148|             criteria: subtype.criteria.map(c => \n00149|               c.id === criteriaId ? { ...c, checked } : c\n00150|             )\n00151|           }\n00152|         : subtype\n00153|     ))\n00154|   }\n00155| \n00156|   const calculateSubtypeScores = () => {\n00157|     return subtypeData.map(subtype => {\n00158|       const score = subtype.criteria.filter(c => c.checked).length\n00159|       const maxScore = subtype.criteria.length\n00160|       const percentage = (score / maxScore) * 100\n00161|       \n00162|       return {\n00163|         ...subtype,\n00164|         score,\n00165|         maxScore,\n00166|         percentage: Math.round(percentage),\n00167|         likelihood: percentage >= 60 ? 'high' : percentage >= 40 ? 'medium' : 'low'\n00168|       }\n00169|     }).sort((a, b) => b.percentage - a.percentage)\n00170|   }\n00171| \n00172|   const generateTreatmentPlan = () => {\n00173|     const scores = calculateSubtypeScores()\n00174|     const primarySubtype = scores[0]\n00175|     const secondarySubtypes = scores.filter(s => s.percentage >= 40 && s.id !== primarySubtype.id)\n00176|     \n00177|     let plan = `${t.subtype.title}\\n`\n00178|     plan += \"=============================\\n\\n\"\n00179|     \n00180|     plan += `${t.subtype.results.analysisHeader}:\\n`\n00181|     plan += `${t.subtype.results.primary}: ${primarySubtype.name} (${primarySubtype.percentage}% ${t.subtype.results.likelihood})\\n`\n00182|     if (secondarySubtypes.length > 0) {\n00183|       plan += `${t.subtype.results.secondaryConsiderations}:\\n`\n00184|       secondarySubtypes.forEach(s => {\n00185|         plan += `  • ${s.name} (${s.percentage}% ${t.subtype.results.likelihood})\\n`\n00186|       })\n00187|     }\n00188|     plan += \"\\n\"\n00189|     \n00190|     plan += `${t.common.recommendations.toUpperCase()}:\\n\\n`\n00191|     plan += `${t.subtype.results.nonPharmacological}:\\n`\n00192|     primarySubtype.treatments.nonPharmacological.forEach(treatment => {\n00193|       plan += `  • ${treatment}\\n`\n00194|     })\n00195|     plan += \"\\n\"\n00196|     \n00197|     plan += `${t.subtype.results.firstLineRx}:\\n`\n00198|     primarySubtype.treatments.firstLine.forEach(treatment => {\n00199|       plan += `  • ${treatment}\\n`\n00200|     })\n00201|     plan += \"\\n\"\n00202|     \n00203|     plan += `${t.subtype.results.secondLineOptions}:\\n`\n00204|     primarySubtype.treatments.secondLine.forEach(treatment => {\n00205|       plan += `  • ${treatment}\\n`\n00206|     })\n00207|     \n00208|     return plan\n00209|   }\n00210| \n00211|   if (isComplete) {\n00212|     const scores = calculateSubtypeScores()\n00213|     const primarySubtype = scores[0]\n00214|     const secondarySubtypes = scores.filter(s => s.percentage >= 40 && s.id !== primarySubtype.id)\n00215|     \n00216|     return (\n00217|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00218|         <div className=\"container mx-auto px-4 max-w-5xl\">\n00219|           <Card>\n00220|             <CardHeader className=\"text-center\">\n00221|                 <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00222|                 <Users className=\"h-6 w-6 text-blue-600\" />\n00223|                 {t.subtype.results.complete}\n00224|               </CardTitle>\n00225|               <CardDescription>\n00226|                 {t.subtype.results.description}\n00227|               </CardDescription>\n00228|             </CardHeader>\n00229|             <CardContent className=\"space-y-6\">\n00230|               <div className=\"text-center\">\n00231|                 <Badge className={`px-4 py-2 text-lg bg-${primarySubtype.color}-100 text-${primarySubtype.color}-800`}>\n00232|                   {t.subtype.results.primary}: {primarySubtype.name}\n00233|                 </Badge>\n00234|                 <p className=\"text-sm text-gray-600 mt-2\">\n00235|                   {primarySubtype.percentage}% {t.subtype.results.likelihood} ({primarySubtype.score}/{primarySubtype.maxScore} {t.common.criteria})\n00236|                 </p>\n00237|               </div>\n00238| \n00239|               <div className=\"grid md:grid-cols-2 gap-6\">\n00240|                 <Card className={`border-${primarySubtype.color}-200`}>\n00241|                   <CardHeader className=\"pb-3\">\n00242|                     <CardTitle className={`text-lg text-${primarySubtype.color}-800 flex items-center gap-2`}>\n00243|                       <primarySubtype.icon className=\"h-5 w-5\" />\n00244|                       {primarySubtype.name}\n00245|                     </CardTitle>\n00246|                     <CardDescription>{primarySubtype.description}</CardDescription>\n00247|                   </CardHeader>\n00248|                   <CardContent>\n00249|                     <div className=\"space-y-2\">\n00250|                       <h4 className=\"font-semibold text-sm\">{t.subtype.results.criteriaMetTitle}:</h4>\n00251|                       {primarySubtype.criteria.filter(c => c.checked).map((criterion, index) => (\n00252|                         <div key={index} className=\"text-sm flex items-center gap-2\">\n00253|                           <span className=\"text-green-600\">✓</span>\n00254|                           {criterion.description}\n00255|                         </div>\n00256|                       ))}\n00257|                     </div>\n00258|                   </CardContent>\n00259|                 </Card>\n00260| \n00261|                 <div className=\"space-y-4\">\n00262|                   <h3 className=\"font-semibold text-lg\">{t.subtype.results.allSubtypeScores}</h3>\n00263|                   {scores.map((subtype) => (\n00264|                     <div key={subtype.id} className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n00265|                       <div className=\"flex items-center gap-2\">\n00266|                         <subtype.icon className=\"h-4 w-4\" />\n00267|                         <span className=\"text-sm font-medium\">{subtype.name}</span>\n00268|                       </div>\n00269|                       <div className=\"flex items-center gap-2\">\n00270|                         <Badge variant={subtype.likelihood === 'high' ? 'default' : 'secondary'} className=\"text-xs\">\n00271|                           {subtype.percentage}%\n00272|                         </Badge>\n00273|                         <span className=\"text-xs text-gray-600\">\n00274|                           {subtype.score}/{subtype.maxScore}\n00275|                         </span>\n00276|                       </div>\n00277|                     </div>\n00278|                   ))}\n00279|                 </div>\n00280|               </div>\n00281| \n00282|               <div className=\"grid md:grid-cols-3 gap-4\">\n00283|                 <Card className=\"border-green-200 bg-green-50\">\n00284|                   <CardHeader className=\"pb-3\">\n00285|                     <CardTitle className=\"text-lg text-green-800 flex items-center gap-2\">\n00286|                       <Activity className=\"h-5 w-5\" />\n00287|                       {t.subtype.results.nonPharmacological}\n00288|                     </CardTitle>\n00289|                   </CardHeader>\n00290|                   <CardContent>\n00291|                     <ul className=\"space-y-2 text-sm\">\n00292|                       {primarySubtype.treatments.nonPharmacological.map((treatment, index) => (\n00293|                         <li key={index} className=\"flex items-start gap-2\">\n00294|                           <span className=\"text-green-600 mt-1\">•</span>\n00295|                           {treatment}\n00296|                         </li>\n00297|                       ))}\n00298|                     </ul>\n00299|                   </CardContent>\n00300|                 </Card>\n00301| \n00302|                 <Card className=\"border-blue-200 bg-blue-50\">\n00303|                   <CardHeader className=\"pb-3\">\n00304|                     <CardTitle className=\"text-lg text-blue-800 flex items-center gap-2\">\n00305|                       <Pill className=\"h-5 w-5\" />\n00306|                       {t.subtype.results.firstLineRx}\n00307|                     </CardTitle>\n00308|                   </CardHeader>\n00309|                   <CardContent>\n00310|                     <ul className=\"space-y-2 text-sm\">\n00311|                       {primarySubtype.treatments.firstLine.map((treatment, index) => (\n00312|                         <li key={index} className=\"flex items-start gap-2\">\n00313|                           <span className=\"text-blue-600 mt-1\">•</span>\n00314|                           {treatment}\n00315|                         </li>\n00316|                       ))}\n00317|                     </ul>\n00318|                     \n00319|                     {primarySubtype.treatments.firstLineMonitoring && (\n00320|                       <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-lg\">\n00321|                         <h5 className=\"font-semibold text-sm text-yellow-800 mb-2 flex items-center gap-2\">\n00322|                           <Activity className=\"h-4 w-4\" />\n00323|                           Required Monitoring\n00324|                         </h5>\n00325|                         <ul className=\"space-y-1 text-xs\">\n00326|                           {primarySubtype.treatments.firstLineMonitoring.map((monitoring, index) => (\n00327|                             <li key={index} className=\"flex items-start gap-2\">\n00328|                               <span className=\"text-yellow-600 mt-1\">⚠</span>\n00329|                               {monitoring}\n00330|                             </li>\n00331|                           ))}\n00332|                         </ul>\n00333|                       </div>\n00334|                     )}\n00335|                   </CardContent>\n00336|                 </Card>\n00337| \n00338|                 <Card className=\"border-purple-200 bg-purple-50\">\n00339|                   <CardHeader className=\"pb-3\">\n00340|                     <CardTitle className=\"text-lg text-purple-800 flex items-center gap-2\">\n00341|                       <Heart className=\"h-5 w-5\" />\n00342|                       {t.subtype.results.secondLineOptions}\n00343|                     </CardTitle>\n00344|                   </CardHeader>\n00345|                   <CardContent>\n00346|                     <ul className=\"space-y-2 text-sm\">\n00347|                       {primarySubtype.treatments.secondLine.map((treatment, index) => (\n00348|                         <li key={index} className=\"flex items-start gap-2\">\n00349|                           <span className=\"text-purple-600 mt-1\">•</span>\n00350|                           {treatment}\n00351|                         </li>\n00352|                       ))}\n00353|                     </ul>\n00354|                     \n00355|                     {primarySubtype.treatments.secondLineMonitoring && (\n00356|                       <div className=\"mt-4 p-3 bg-red-50 border border-red-200 rounded-lg\">\n00357|                         <h5 className=\"font-semibold text-sm text-red-800 mb-2 flex items-center gap-2\">\n00358|                           <Activity className=\"h-4 w-4\" />\n00359|                           Advanced Monitoring\n00360|                         </h5>\n00361|                         <ul className=\"space-y-1 text-xs\">\n00362|                           {primarySubtype.treatments.secondLineMonitoring.map((monitoring, index) => (\n00363|                             <li key={index} className=\"flex items-start gap-2\">\n00364|                               <span className=\"text-red-600 mt-1\">⚠</span>\n00365|                               {monitoring}\n00366|                             </li>\n00367|                           ))}\n00368|                         </ul>\n00369|                       </div>\n00370|                     )}\n00371|                   </CardContent>\n00372|                 </Card>\n00373|               </div>\n00374| \n00375|               {secondarySubtypes.length > 0 && (\n00376|                 <Alert className=\"border-yellow-200 bg-yellow-50\">\n00377|                   <Shield className=\"h-4 w-4 text-yellow-600\" />\n00378|                   <AlertDescription className=\"text-yellow-800\">\n00379|                     <div>\n00380|                       <strong>Mixed Subtype Detected:</strong> This patient also shows features of {secondarySubtypes.map(s => s.name).join(' and ')}.\n00381|                     </div>\n00382|                     <div className=\"mt-3 space-y-2\">\n00383|                       <p className=\"text-sm\">Consider combination therapy approaches. View additional subtype treatments:</p>\n00384|                       <div className=\"flex gap-2 flex-wrap\">\n00385|                         {secondarySubtypes.map(subtype => (\n00386|                           <Button \n00387|                             key={subtype.id}\n00388|                             size=\"sm\" \n00389|                             variant=\"outline\"\n00390|                             className=\"h-8 text-xs\"\n00391|                             onClick={() => setExpandedSubtype(expandedSubtype === subtype.id ? null : subtype.id)}\n00392|                           >\n00393|                             {expandedSubtype === subtype.id ? 'Hide' : 'View'} {subtype.name} Treatment\n00394|                           </Button>\n00395|                         ))}\n00396|                       </div>\n00397|                     </div>\n00398|                   </AlertDescription>\n00399|                 </Alert>\n00400|               )}\n00401| \n00402|               {/* Expanded Subtype Treatment Details */}\n00403|               {expandedSubtype && (\n00404|                 <Card className=\"border-yellow-300 bg-yellow-25\">\n00405|                   <CardHeader className=\"pb-3\">\n00406|                     <CardTitle className=\"text-lg text-yellow-800 flex items-center gap-2\">\n00407|                       {(() => {\n00408|                         const subtype = secondarySubtypes.find(s => s.id === expandedSubtype)\n00409|                         return subtype ? <subtype.icon className=\"h-5 w-5\" /> : null\n00410|                       })()}\n00411|                       {secondarySubtypes.find(s => s.id === expandedSubtype)?.name} - Additional Treatment Options\n00412|                     </CardTitle>\n00413|                     <CardDescription>\n00414|                       {secondarySubtypes.find(s => s.id === expandedSubtype)?.description}\n00415|                     </CardDescription>\n00416|                   </CardHeader>\n00417|                   <CardContent>\n00418|                     {(() => {\n00419|                       const subtype = secondarySubtypes.find(s => s.id === expandedSubtype)\n00420|                       if (!subtype) return null\n00421|                       \n00422|                       return (\n00423|                         <div className=\"grid md:grid-cols-2 gap-4\">\n00424|                           <div>\n00425|                             <h5 className=\"font-semibold text-sm mb-2\">First-Line Treatments</h5>\n00426|                             <ul className=\"space-y-1 text-sm\">\n00427|                               {subtype.treatments.firstLine.map((treatment, index) => (\n00428|                                 <li key={index} className=\"flex items-start gap-2\">\n00429|                                   <span className=\"text-blue-600 mt-1\">•</span>\n00430|                                   {treatment}\n00431|                                 </li>\n00432|                               ))}\n00433|                             </ul>\n00434|                             \n00435|                             {subtype.treatments.firstLineMonitoring && (\n00436|                               <div className=\"mt-3 p-2 bg-yellow-50 border border-yellow-200 rounded\">\n00437|                                 <h6 className=\"font-semibold text-xs text-yellow-800 mb-1\">Monitoring Required</h6>\n00438|                                 <ul className=\"space-y-1 text-xs\">\n00439|                                   {subtype.treatments.firstLineMonitoring.map((monitoring, index) => (\n00440|                                     <li key={index} className=\"flex items-start gap-2\">\n00441|                                       <span className=\"text-yellow-600 mt-1\">⚠</span>\n00442|                                       {monitoring}\n00443|                                     </li>\n00444|                                   ))}\n00445|                                 </ul>\n00446|                               </div>\n00447|                             )}\n00448|                           </div>\n00449|                           \n00450|                           <div>\n00451|                             <h5 className=\"font-semibold text-sm mb-2\">Second-Line Options</h5>\n00452|                             <ul className=\"space-y-1 text-sm\">\n00453|                               {subtype.treatments.secondLine.map((treatment, index) => (\n00454|                                 <li key={index} className=\"flex items-start gap-2\">\n00455|                                   <span className=\"text-purple-600 mt-1\">•</span>\n00456|                                   {treatment}\n00457|                                 </li>\n00458|                               ))}\n00459|                             </ul>\n00460|                           </div>\n00461|                         </div>\n00462|                       )\n00463|                     })()}\n00464|                   </CardContent>\n00465|                 </Card>\n00466|               )}\n00467| \n00468|               <div className=\"bg-gray-50 p-4 rounded-lg\">\n00469|                 <h4 className=\"font-semibold mb-2\">{t.subtype.results.clinicalPearls}</h4>\n00470|                 <div className=\"text-sm space-y-2\">\n00471|                   {t.subtype.results.pearls.map((pearl, index) => (\n00472|                     <p key={index}>• {pearl}</p>\n00473|                   ))}\n00474|                 </div>\n00475|               </div>\n00476| \n00477|               <div className=\"flex gap-4 justify-center\">\n00478|                 <Button onClick={() => {\n00479|                   const newSubtypes = createSubtypes(t)\n00480|                   setSubtypeData(newSubtypes.map(s => ({ ...s })))\n00481|                   setIsComplete(false)\n00482|                 }} variant=\"outline\">\n00483|                   {t.subtype.results.reassess}\n00484|                 </Button>\n00485|                 <Button onClick={() => {\n00486|                   const plan = generateTreatmentPlan()\n00487|                   const blob = new Blob([plan], { type: 'text/plain' })\n00488|                   const url = URL.createObjectURL(blob)\n00489|                   const a = document.createElement('a')\n00490|                   a.href = url\n00491|                   a.download = 'pots-treatment-plan.txt'\n00492|                   a.click()\n00493|                   URL.revokeObjectURL(url)\n00494|                 }} className=\"flex items-center gap-2\">\n00495|                   <Download className=\"h-4 w-4\" />\n00496|                   {t.subtype.results.downloadPlan}\n00497|                 </Button>\n00498|               </div>\n00499|             </CardContent>\n00500|           </Card>\n00501|         </div>\n00502|       </div>\n00503|     )\n00504|   }\n00505| \n00506|   return (\n00507|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00508|       <div className=\"container mx-auto px-4 max-w-5xl\">\n00509|         <div className=\"mb-6\">\n00510|           \n00511|           <div className=\"flex items-center gap-4 mb-4\">\n00512|             <Users className=\"h-5 w-5 text-blue-600\" />\n00513|             <div>\n00514|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.subtype.title}</h1>\n00515|               <p className=\"text-gray-600\">{t.subtype.description}</p>\n00516|             </div>\n00517|           </div>\n00518|         </div>\n00519| \n00520|         <div className=\"space-y-6\">\n00521|           <Card>\n00522|             <CardHeader>\n00523|               <CardTitle>{t.subtype.patientInfo.title}</CardTitle>\n00524|               <CardDescription>{t.subtype.patientInfo.description}</CardDescription>\n00525|             </CardHeader>\n00526|             <CardContent>\n00527|               <div className=\"grid md:grid-cols-2 gap-4\">\n00528|                 <div>\n00529|                   <Label htmlFor=\"age\">{t.common.age}</Label>\n00530|                   <Input\n00531|                     id=\"age\"\n00532|                     type=\"number\"\n00533|                     placeholder=\"25\"\n00534|                     value={patientAge || ''}\n00535|                     onChange={(e) => setPatientAge(parseInt(e.target.value) || null)}\n00536|                   />\n00537|                 </div>\n00538|                 <div>\n00539|                   <Label>{t.subtype.patientInfo.comorbidities}</Label>\n00540|                   <div className=\"flex gap-4 mt-2\">\n00541|                     {t.subtype.patientInfo.comorbidityOptions.map((condition, index) => (\n00542|                       <div key={index} className=\"flex items-center space-x-2\">\n00543|                         <Checkbox\n00544|                           id={`comorbidity-${index}`}\n00545|                           checked={comorbidities.includes(condition)}\n00546|                           onCheckedChange={(checked) => {\n00547|                             if (checked) {\n00548|                               setComorbidities(prev => [...prev, condition])\n00549|                             } else {\n00550|                               setComorbidities(prev => prev.filter(c => c !== condition))\n00551|                             }\n00552|                           }}\n00553|                         />\n00554|                         <Label htmlFor={`comorbidity-${index}`} className=\"text-sm\">{condition}</Label>\n00555|                       </div>\n00556|                     ))}\n00557|                   </div>\n00558|                 </div>\n00559|               </div>\n00560|             </CardContent>\n00561|           </Card>\n00562| \n00563|           {subtypeData.map((subtype) => (\n00564|             <Card key={subtype.id} className={`border-${subtype.color}-200`}>\n00565|               <CardHeader>\n00566|                 <CardTitle className={`text-lg text-${subtype.color}-800 flex items-center gap-2`}>\n00567|                   <subtype.icon className=\"h-5 w-5\" />\n00568|                   {subtype.name}\n00569|                 </CardTitle>\n00570|                 <CardDescription>{subtype.description}</CardDescription>\n00571|               </CardHeader>\n00572|               <CardContent>\n00573|                 <div className=\"space-y-3\">\n00574|                   {subtype.criteria.map((criterion) => (\n00575|                     <div key={criterion.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00576|                       <Checkbox\n00577|                         id={`${subtype.id}-${criterion.id}`}\n00578|                         checked={criterion.checked}\n00579|                         onCheckedChange={(checked) => handleCriteriaChange(subtype.id, criterion.id, !!checked)}\n00580|                       />\n00581|                       <Label htmlFor={`${subtype.id}-${criterion.id}`} className=\"cursor-pointer text-sm flex-1\">\n00582|                         {criterion.description}\n00583|                       </Label>\n00584|                     </div>\n00585|                   ))}\n00586|                 </div>\n00587|                 \n00588|                 <div className=\"mt-4 p-3 bg-gray-50 rounded-lg\">\n00589|                   <div className=\"text-sm text-gray-600\">\n00590|                     <strong>{t.common.score}:</strong> {subtype.criteria.filter(c => c.checked).length}/{subtype.criteria.length} {t.common.criteria} {t.common.met.toLowerCase()}\n00591|                   </div>\n00592|                 </div>\n00593|               </CardContent>\n00594|             </Card>\n00595|           ))}\n00596| \n00597|           <div className=\"flex justify-center\">\n00598|             <Button onClick={() => {\n00599|               setIsComplete(true)\n00600|               // Immediate scroll to top\n00601|               setTimeout(() => window.scrollTo({ top: 0, behavior: 'auto' }), 50)\n00602|             }} size=\"lg\" className=\"px-8\">\n00603|               <Pill className=\"h-4 w-4 mr-2\" />\n00604|               {t.common.recommendations}\n00605|             </Button>\n00606|           </div>\n00607|         </div>\n00608|       </div>\n00609|     </div>\n00610|   )\n00611| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { ArrowLeft, Users, Pill, Heart, Droplets, Activity, Brain, Shield, Download } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface POTSSubtype {\n  id: string\n  name: string\n  description: string\n  icon: any\n  color: string"
    },
    "title": "app/subtype-advisor/page.tsx",
    "time": {
      "start": 1758302308532,
      "end": 1758302308534
    }
  }
}