{
  "id": "prt_9597045c4001HoO1CUfHFrUAnU",
  "messageID": "msg_9597037b5001kkN56NHKIpIuEW",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01Hf1p2g2J1xi8bAJD2v6s7e",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/stand-test/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect, useRef } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Input } from '@/components/ui/input'\n00007| import { Label } from '@/components/ui/label'\n00008| import { Progress } from '@/components/ui/progress'\n00009| import { Badge } from '@/components/ui/badge'\n00010| import { Alert, AlertDescription } from '@/components/ui/alert'\n00011| import { ArrowLeft, Heart, Play, Pause, Square, Timer, TrendingUp, AlertTriangle } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| import { useTranslation } from '@/lib/language-context'\n00014| \n00015| interface HeartRateReading {\n00016|   time: number\n00017|   hr: number\n00018|   bp?: { systolic: number; diastolic: number }\n00019| }\n00020| \n00021| interface TestPhase {\n00022|   name: string\n00023|   duration: number\n00024|   position: 'lying' | 'standing'\n00025|   instructions: string\n00026| }\n00027| \n00028| // Test phases will be generated from translations\n00029| \n00030| export default function StandTest() {\n00031|   const [currentPhase, setCurrentPhase] = useState(0)\n00032|   const [timeElapsed, setTimeElapsed] = useState(0)\n00033|   const [isRunning, setIsRunning] = useState(false)\n00034|   const [isPaused, setIsPaused] = useState(false)\n00035|   const [readings, setReadings] = useState<HeartRateReading[]>([])\n00036|   const [currentHR, setCurrentHR] = useState<number | null>(null)\n00037|   const [currentBP, setCurrentBP] = useState<{ systolic: number; diastolic: number } | null>(null)\n00038|   const [isComplete, setIsComplete] = useState(false)\n00039|   const [testMethod, setTestMethod] = useState<'manual' | 'camera'>('manual')\n00040|   const { t } = useTranslation()\n00041|   \n00042|   const intervalRef = useRef<NodeJS.Timeout | null>(null)\n00043| \n00044|   useEffect(() => {\n00045|     if (isRunning && !isPaused) {\n00046|       intervalRef.current = setInterval(() => {\n00047|         setTimeElapsed(prev => prev + 1)\n00048|       }, 1000)\n00049|     } else {\n00050|       if (intervalRef.current) {\n00051|         clearInterval(intervalRef.current)\n00052|       }\n00053|     }\n00054| \n00055|     return () => {\n00056|       if (intervalRef.current) {\n00057|         clearInterval(intervalRef.current)\n00058|       }\n00059|     }\n00060|   }, [isRunning, isPaused])\n00061| \n00062|   const getTestPhases = () => [\n00063|     {\n00064|       name: t.standTest.phases.baseline.name,\n00065|       duration: 300, // 5 minutes\n00066|       position: 'lying' as const,\n00067|       instructions: t.standTest.phases.baseline.instructions\n00068|     },\n00069|     {\n00070|       name: t.standTest.phases.standing.name,\n00071|       duration: 600, // 10 minutes\n00072|       position: 'standing' as const,\n00073|       instructions: t.standTest.phases.standing.instructions\n00074|     }\n00075|   ]\n00076| \n00077|   useEffect(() => {\n00078|     const testPhases = getTestPhases()\n00079|     const phase = testPhases[currentPhase]\n00080|     if (phase && timeElapsed >= phase.duration && currentPhase < testPhases.length - 1) {\n00081|       setCurrentPhase(prev => prev + 1)\n00082|       setTimeElapsed(0)\n00083|     } else if (phase && timeElapsed >= phase.duration && currentPhase === testPhases.length - 1) {\n00084|       setIsRunning(false)\n00085|       setIsComplete(true)\n00086|     }\n00087|   }, [timeElapsed, currentPhase, t])\n00088| \n00089|   const startTest = () => {\n00090|     setIsRunning(true)\n00091|     setIsPaused(false)\n00092|     setTimeElapsed(0)\n00093|     setCurrentPhase(0)\n00094|     setReadings([])\n00095|     setIsComplete(false)\n00096|   }\n00097| \n00098|   const pauseTest = () => {\n00099|     setIsPaused(!isPaused)\n00100|   }\n00101| \n00102|   const stopTest = () => {\n00103|     setIsRunning(false)\n00104|     setIsPaused(false)\n00105|     setTimeElapsed(0)\n00106|     setCurrentPhase(0)\n00107|   }\n00108| \n00109|   const addReading = () => {\n00110|     if (currentHR) {\n00111|       const reading: HeartRateReading = {\n00112|         time: timeElapsed,\n00113|         hr: currentHR,\n00114|         bp: currentBP || undefined\n00115|       }\n00116|       setReadings(prev => [...prev, reading])\n00117|       setCurrentHR(null)\n00118|       setCurrentBP(null)\n00119|     }\n00120|   }\n00121| \n00122|   const calculateResults = () => {\n00123|     const lyingReadings = readings.filter(r => r.time < 300)\n00124|     const standingReadings = readings.filter(r => r.time >= 300)\n00125|     \n00126|     if (lyingReadings.length === 0 || standingReadings.length === 0) {\n00127|       return null\n00128|     }\n00129| \n00130|     const baselineHR = lyingReadings.reduce((sum, r) => sum + r.hr, 0) / lyingReadings.length\n00131|     const maxStandingHR = Math.max(...standingReadings.map(r => r.hr))\n00132|     const hrIncrease = maxStandingHR - baselineHR\n00133| \n00134|     // POTS criteria: HR increase ≥30 bpm (≥40 for ages 12-19)\n00135|     const potsThreshold = 30\n00136|     const meetsPOTSCriteria = hrIncrease >= potsThreshold\n00137| \n00138|     // Calculate sustained HR increase (average of standing phase)\n00139|     const sustainedStandingHR = standingReadings.reduce((sum, r) => sum + r.hr, 0) / standingReadings.length\n00140|     const sustainedHRIncrease = sustainedStandingHR - baselineHR\n00141| \n00142|     return {\n00143|       baselineHR: Math.round(baselineHR),\n00144|       maxStandingHR: Math.round(maxStandingHR),\n00145|       sustainedStandingHR: Math.round(sustainedStandingHR),\n00146|       hrIncrease: Math.round(hrIncrease),\n00147|       sustainedHRIncrease: Math.round(sustainedHRIncrease),\n00148|       meetsPOTSCriteria,\n00149|       potsThreshold\n00150|     }\n00151|   }\n00152| \n00153|   const formatTime = (seconds: number) => {\n00154|     const mins = Math.floor(seconds / 60)\n00155|     const secs = seconds % 60\n00156|     return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n00157|   }\n00158| \n00159|   const currentPhaseData = getTestPhases()[currentPhase]\n00160|   const progress = currentPhaseData ? (timeElapsed / currentPhaseData.duration) * 100 : 0\n00161|   const results = calculateResults()\n00162| \n00163|   if (isComplete && results) {\n00164|     return (\n00165|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00166|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00167|           <Card>\n00168|             <CardHeader className=\"text-center\">\n00169|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00170|                 <Heart className=\"h-6 w-6 text-red-600\" />\n00171|                 {t.standTest.results.title}\n00172|               </CardTitle>\n00173|               <CardDescription>\n00174|                 {t.standTest.results.description}\n00175|               </CardDescription>\n00176|             </CardHeader>\n00177|             <CardContent className=\"space-y-6\">\n00178|               <div className=\"text-center\">\n00179|                 <Badge \n00180|                   className={`px-4 py-2 text-lg ${\n00181|                     results.meetsPOTSCriteria \n00182|                       ? 'bg-red-100 text-red-800' \n00183|                       : 'bg-green-100 text-green-800'\n00184|                   }`}\n00185|                 >\n00186|                   {results.meetsPOTSCriteria ? t.standTest.results.potsMet : t.standTest.results.potsNotMet}\n00187|                 </Badge>\n00188|               </div>\n00189| \n00190|               <div className=\"grid md:grid-cols-3 gap-4\">\n00191|                 <Card className=\"border-blue-200\">\n00192|                   <CardHeader className=\"pb-3\">\n00193|                     <CardTitle className=\"text-lg text-blue-800\">{t.standTest.results.baseline}</CardTitle>\n00194|                   </CardHeader>\n00195|                   <CardContent>\n00196|                     <div className=\"text-2xl font-bold text-blue-900\">\n00197|                       {results.baselineHR} bpm\n00198|                     </div>\n00199|                     <p className=\"text-sm text-blue-700\">{t.standTest.results.averageHR}</p>\n00200|                   </CardContent>\n00201|                 </Card>\n00202| \n00203|                 <Card className=\"border-orange-200\">\n00204|                   <CardHeader className=\"pb-3\">\n00205|                     <CardTitle className=\"text-lg text-orange-800\">{t.standTest.results.peakStanding}</CardTitle>\n00206|                   </CardHeader>\n00207|                   <CardContent>\n00208|                     <div className=\"text-2xl font-bold text-orange-900\">\n00209|                       {results.maxStandingHR} bpm\n00210|                     </div>\n00211|                     <p className=\"text-sm text-orange-700\">{t.standTest.results.maxHR}</p>\n00212|                     <Badge variant=\"outline\" className=\"mt-1\">\n00213|                       +{results.hrIncrease} bpm\n00214|                     </Badge>\n00215|                   </CardContent>\n00216|                 </Card>\n00217| \n00218|                 <Card className=\"border-purple-200\">\n00219|                   <CardHeader className=\"pb-3\">\n00220|                     <CardTitle className=\"text-lg text-purple-800\">{t.standTest.results.sustainedStanding}</CardTitle>\n00221|                   </CardHeader>\n00222|                   <CardContent>\n00223|                     <div className=\"text-2xl font-bold text-purple-900\">\n00224|                       {results.sustainedStandingHR} bpm\n00225|                     </div>\n00226|                     <p className=\"text-sm text-purple-700\">{t.standTest.results.averageHR}</p>\n00227|                     <Badge variant=\"outline\" className=\"mt-1\">\n00228|                       +{results.sustainedHRIncrease} bpm\n00229|                     </Badge>\n00230|                   </CardContent>\n00231|                 </Card>\n00232|               </div>\n00233| \n00234|               {results.meetsPOTSCriteria && (\n00235|                 <Alert className=\"border-red-200 bg-red-50\">\n00236|                   <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n00237|                   <AlertDescription className=\"text-red-800\">\n00238|                     <strong>POTS Criteria Met:</strong> Heart rate increase of {results.hrIncrease} bpm \n00239|                     exceeds the threshold of {results.potsThreshold} bpm. Consider POTS subtyping and \n00240|                     further evaluation.\n00241|                   </AlertDescription>\n00242|                 </Alert>\n00243|               )}\n00244| \n00245|               <div className=\"bg-gray-50 p-4 rounded-lg\">\n00246|                 <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n00247|                   <TrendingUp className=\"h-4 w-4\" />\n00248|                   {t.standTest.results.interpretation}\n00249|                 </h4>\n00250|                 <div className=\"text-sm space-y-2\">\n00251|                   {results.meetsPOTSCriteria ? \n00252|                     t.standTest.interpretations.potsMet.map((interpretation, index) => (\n00253|                       <p key={index}>• {interpretation}</p>\n00254|                     )) :\n00255|                     t.standTest.interpretations.potsNotMet.map((interpretation, index) => (\n00256|                       <p key={index}>• {interpretation}</p>\n00257|                     ))\n00258|                   }\n00259|                 </div>\n00260|               </div>\n00261| \n00262|               <div className=\"bg-blue-50 p-4 rounded-lg\">\n00263|                 <h4 className=\"font-semibold mb-2 text-blue-900\">{t.standTest.results.nextSteps}</h4>\n00264|                 <div className=\"text-sm text-blue-800 space-y-1\">\n00265|                   <p>• Complete PEM-Quest assessment</p>\n00266|                   <p>• Proceed to Criteria Engine for comprehensive diagnosis</p>\n00267|                   {results.meetsPOTSCriteria && (\n00268|                     <p>• Continue to Subtype & Treatment Advisor for POTS management</p>\n00269|                   )}\n00270|                 </div>\n00271|               </div>\n00272| \n00273|               <div className=\"flex gap-4 justify-center\">\n00274|                 <Button onClick={() => {\n00275|                   setIsComplete(false)\n00276|                   setReadings([])\n00277|                   setTimeElapsed(0)\n00278|                   setCurrentPhase(0)\n00279|                 }} variant=\"outline\">\n00280|                   {t.standTest.results.repeatTest}\n00281|                 </Button>\n00282|                 <Button asChild>\n00283|                   <Link href=\"/pem-quest\">\n00284|                       {t.common.continue} to PEM-Quest\n00285|                   </Link>\n00286|                 </Button>\n00287|               </div>\n00288|             </CardContent>\n00289|           </Card>\n00290|         </div>\n00291|       </div>\n00292|     )\n00293|   }\n00294| \n00295|   return (\n00296|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00297|       <div className=\"container mx-auto px-4 max-w-4xl\">\n00298|         <div className=\"mb-6\">\n00299|           \n00300|           <div className=\"flex items-center gap-4 mb-4\">\n00301|             <Heart className=\"h-5 w-5 text-red-600\" />\n00302|             <div>\n00303|               <h1 className=\"text-2xl font-bold text-gray-900\">{t.standTest.title}</h1>\n00304|               <p className=\"text-gray-600\">{t.standTest.description}</p>\n00305|             </div>\n00306|           </div>\n00307|         </div>\n00308| \n00309|         <div className=\"space-y-6\">\n00310|           {!isRunning && readings.length === 0 && (\n00311|             <Card>\n00312|               <CardHeader>\n00313|                 <CardTitle>{t.standTest.setup.title}</CardTitle>\n00314|                 <CardDescription>\n00315|                   {t.standTest.setup.description}\n00316|                 </CardDescription>\n00317|               </CardHeader>\n00318|               <CardContent className=\"space-y-4\">\n00319|                 <div className=\"grid md:grid-cols-2 gap-4\">\n00320|                   <Card \n00321|                     className={`cursor-pointer transition-all ${\n00322|                       testMethod === 'manual' ? 'ring-2 ring-blue-500' : ''\n00323|                     }`}\n00324|                     onClick={() => setTestMethod('manual')}\n00325|                   >\n00326|                     <CardContent className=\"pt-6\">\n00327|                       <h3 className=\"font-semibold mb-2\">{t.standTest.setup.manual.title}</h3>\n00328|                       <p className=\"text-sm text-gray-600 mb-4\">\n00329|                         {t.standTest.setup.manual.description}\n00330|                       </p>\n00331|                       <Badge variant=\"outline\">{t.standTest.setup.manual.recommended}</Badge>\n00332|                     </CardContent>\n00333|                   </Card>\n00334|                   \n00335|                   <Card \n00336|                     className={`cursor-pointer transition-all ${\n00337|                       testMethod === 'camera' ? 'ring-2 ring-blue-500' : ''\n00338|                     }`}\n00339|                     onClick={() => setTestMethod('camera')}\n00340|                   >\n00341|                     <CardContent className=\"pt-6\">\n00342|                       <h3 className=\"font-semibold mb-2\">{t.standTest.setup.camera.title}</h3>\n00343|                       <p className=\"text-sm text-gray-600 mb-4\">\n00344|                         {t.standTest.setup.camera.description}\n00345|                       </p>\n00346|                       <Badge variant=\"secondary\">{t.standTest.setup.camera.beta}</Badge>\n00347|                     </CardContent>\n00348|                   </Card>\n00349|                 </div>\n00350| \n00351|                 <Alert>\n00352|                   <AlertTriangle className=\"h-4 w-4\" />\n00353|                   <AlertDescription>\n00354|                     {t.standTest.setup.safety}\n00355|                   </AlertDescription>\n00356|                 </Alert>\n00357| \n00358|                 <Button onClick={startTest} className=\"w-full\" size=\"lg\">\n00359|                   <Play className=\"h-4 w-4 mr-2\" />\n00360|                   {t.standTest.setup.startTest}\n00361|                 </Button>\n00362|               </CardContent>\n00363|             </Card>\n00364|           )}\n00365| \n00366|           {isRunning && (\n00367|             <>\n00368|               <Card>\n00369|                 <CardHeader>\n00370|                   <CardTitle className=\"flex items-center justify-between\">\n00371|                     <span>Phase: {currentPhaseData?.name}</span>\n00372|                     <div className=\"flex items-center gap-2\">\n00373|                       <Timer className=\"h-4 w-4\" />\n00374|                       {formatTime(timeElapsed)} / {formatTime(currentPhaseData?.duration || 0)}\n00375|                     </div>\n00376|                   </CardTitle>\n00377|                   <CardDescription>\n00378|                     {currentPhaseData?.instructions}\n00379|                   </CardDescription>\n00380|                 </CardHeader>\n00381|                 <CardContent>\n00382|                   <Progress value={progress} className=\"h-3 mb-4\" />\n00383|                   \n00384|                   <div className=\"flex gap-4 justify-center mb-4\">\n00385|                     <Button onClick={pauseTest} variant=\"outline\">\n00386|                       {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n00387|                       {isPaused ? t.standTest.controls.resume : t.standTest.controls.pause}\n00388|                     </Button>\n00389|                     <Button onClick={stopTest} variant=\"destructive\">\n00390|                       <Square className=\"h-4 w-4 mr-2\" />\n00391|                       {t.standTest.controls.stop}\n00392|                     </Button>\n00393|                   </div>\n00394|                 </CardContent>\n00395|               </Card>\n00396| \n00397|               <Card>\n00398|                 <CardHeader>\n00399|                 <CardTitle>{t.standTest.recording.title}</CardTitle>\n00400|                 <CardDescription>\n00401|                   {t.standTest.recording.description}\n00402|                 </CardDescription>\n00403|                 </CardHeader>\n00404|                 <CardContent className=\"space-y-4\">\n00405|                   <div className=\"grid md:grid-cols-3 gap-4\">\n00406|                     <div>\n00407|                       <Label htmlFor=\"hr\">Heart Rate ({t.common.bpm})</Label>\n00408|                       <Input\n00409|                         id=\"hr\"\n00410|                         type=\"number\"\n00411|                         placeholder=\"75\"\n00412|                         value={currentHR || ''}\n00413|                         onChange={(e) => setCurrentHR(parseInt(e.target.value) || null)}\n00414|                       />\n00415|                     </div>\n00416|                     <div>\n00417|                       <Label htmlFor=\"systolic\">{t.standTest.recording.systolicBP}</Label>\n00418|                       <Input\n00419|                         id=\"systolic\"\n00420|                         type=\"number\"\n00421|                         placeholder=\"120\"\n00422|                         value={currentBP?.systolic || ''}\n00423|                         onChange={(e) => setCurrentBP(prev => ({\n00424|                           ...prev,\n00425|                           systolic: parseInt(e.target.value) || 0,\n00426|                           diastolic: prev?.diastolic || 0\n00427|                         }))}\n00428|                       />\n00429|                     </div>\n00430|                     <div>\n00431|                       <Label htmlFor=\"diastolic\">{t.standTest.recording.diastolicBP}</Label>\n00432|                       <Input\n00433|                         id=\"diastolic\"\n00434|                         type=\"number\"\n00435|                         placeholder=\"80\"\n00436|                         value={currentBP?.diastolic || ''}\n00437|                         onChange={(e) => setCurrentBP(prev => ({\n00438|                           ...prev,\n00439|                           systolic: prev?.systolic || 0,\n00440|                           diastolic: parseInt(e.target.value) || 0\n00441|                         }))}\n00442|                       />\n00443|                     </div>\n00444|                   </div>\n00445|                   \n00446|                   <Button onClick={addReading} disabled={!currentHR} className=\"w-full\">\n00447|                     {t.standTest.recording.recordReading} at {formatTime(timeElapsed)}\n00448|                   </Button>\n00449|                   \n00450|                   {readings.length > 0 && (\n00451|                     <div className=\"bg-gray-50 p-4 rounded-lg\">\n00452|                       <h4 className=\"font-semibold mb-2\">{t.standTest.recording.recentReadings}</h4>\n00453|                       <div className=\"text-sm space-y-1\">\n00454|                         {readings.slice(-5).map((reading, index) => (\n00455|                           <div key={index} className=\"flex justify-between\">\n00456|                             <span>{formatTime(reading.time)}</span>\n00457|                             <span>{reading.hr} {t.common.bpm}</span>\n00458|                           </div>\n00459|                         ))}\n00460|                       </div>\n00461|                     </div>\n00462|                   )}\n00463|                 </CardContent>\n00464|               </Card>\n00465|             </>\n00466|           )}\n00467|         </div>\n00468|       </div>\n00469|     </div>\n00470|   )\n00471| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { ArrowLeft, Heart, Play, Pause, Square, Timer, TrendingUp, AlertTriangle } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface HeartRateReading {\n  time: number\n  hr: number\n  bp?: { systolic: number; diastolic: number }\n}\n"
    },
    "title": "app/stand-test/page.tsx",
    "time": {
      "start": 1758142154711,
      "end": 1758142154724
    }
  }
}