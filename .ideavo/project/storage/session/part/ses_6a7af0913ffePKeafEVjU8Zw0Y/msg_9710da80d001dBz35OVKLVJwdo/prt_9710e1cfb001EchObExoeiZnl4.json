{
  "id": "prt_9710e1cfb001EchObExoeiZnl4",
  "messageID": "msg_9710da80d001dBz35OVKLVJwdo",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "write",
  "callID": "toolu_01YJM2aQ1QWh2nHLqQaosro3",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/case-analyzer/page.tsx",
      "content": "'use client'\n\nimport { useState } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Textarea } from '@/components/ui/textarea'\nimport { Badge } from '@/components/ui/badge'\nimport { Progress } from '@/components/ui/progress'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { \n  FileText, \n  Search, \n  CheckCircle, \n  AlertTriangle, \n  Clock,\n  Brain,\n  Heart,\n  Activity,\n  Lightbulb,\n  ArrowLeft\n} from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface CaseAnalysisResult {\n  overallScore: number\n  mecfsLikelihood: 'very-high' | 'high' | 'moderate' | 'low' | 'very-low'\n  criteriaAssessment: {\n    debilitatingFatigue: boolean\n    postExertionalMalaise: boolean\n    unrefreshingSleep: boolean\n    cognitiveDifficulties: boolean\n    duration: boolean\n  }\n  redFlags: string[]\n  pemIndicators: {\n    present: boolean\n    severity: 'none' | 'mild' | 'moderate' | 'severe'\n    evidence: string[]\n  }\n  differentialDiagnoses: string[]\n  recommendations: string[]\n  keyFindings: string[]\n}\n\n// Clinical keyword patterns for analysis\nconst CLINICAL_PATTERNS = {\n  // Core ME/CFS symptoms\n  debilitatingFatigue: [\n    'severe fatigue', 'debilitating fatigue', 'exhaustion', 'extreme tiredness',\n    'profound fatigue', 'overwhelming fatigue', 'crushing fatigue'\n  ],\n  postExertionalMalaise: [\n    'post-exertional malaise', 'PEM', 'crashes after activity', 'worsens with activity',\n    'worse after exercise', 'activity intolerance', 'delayed recovery', 'payback',\n    'flare after activity', 'symptom exacerbation'\n  ],\n  unrefreshingSleep: [\n    'unrefreshing sleep', 'non-restorative sleep', 'wakes tired', 'poor sleep quality',\n    'sleep doesn\\'t help', 'still tired after sleep', 'no rest from sleep'\n  ],\n  cognitiveDifficulties: [\n    'brain fog', 'cognitive dysfunction', 'memory problems', 'concentration issues',\n    'word finding difficulties', 'mental fatigue', 'confusion', 'cognitive impairment'\n  ],\n  \n  // Duration indicators\n  duration: [\n    'months', 'chronic', 'ongoing', 'persistent', 'long-term', '6 months', 'year'\n  ],\n  \n  // Red flag symptoms\n  redFlags: [\n    'weight loss', 'fever', 'night sweats', 'lymphadenopathy', 'neurological deficits',\n    'chest pain', 'shortness of breath', 'bleeding', 'jaundice', 'seizures'\n  ],\n  \n  // Triggering events\n  triggers: [\n    'viral infection', 'flu', 'COVID', 'mononucleosis', 'stress', 'surgery',\n    'vaccination', 'bacterial infection', 'illness'\n  ],\n  \n  // Additional symptoms\n  orthostatic: [\n    'dizziness on standing', 'palpitations', 'racing heart', 'orthostatic intolerance',\n    'POTS', 'tachycardia on standing'\n  ],\n  pain: [\n    'muscle pain', 'joint pain', 'headaches', 'sore throat', 'tender lymph nodes'\n  ]\n}\n\nexport default function CaseAnalyzer() {\n  const [caseText, setCaseText] = useState('')\n  const [isAnalyzing, setIsAnalyzing] = useState(false)\n  const [analysisResult, setAnalysisResult] = useState<CaseAnalysisResult | null>(null)\n  const { t } = useTranslation()\n\n  const analyzeCaseText = (text: string): CaseAnalysisResult => {\n    const lowerText = text.toLowerCase()\n    \n    // Check core criteria\n    const criteriaAssessment = {\n      debilitatingFatigue: CLINICAL_PATTERNS.debilitatingFatigue.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      postExertionalMalaise: CLINICAL_PATTERNS.postExertionalMalaise.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      unrefreshingSleep: CLINICAL_PATTERNS.unrefreshingSleep.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      cognitiveDifficulties: CLINICAL_PATTERNS.cognitiveDifficulties.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      ),\n      duration: CLINICAL_PATTERNS.duration.some(pattern => \n        lowerText.includes(pattern.toLowerCase())\n      )\n    }\n\n    // Calculate core symptom score\n    const coreSymptoms = Object.values(criteriaAssessment).filter(Boolean).length\n    \n    // Check for red flags\n    const redFlags = CLINICAL_PATTERNS.redFlags.filter(flag => \n      lowerText.includes(flag.toLowerCase())\n    )\n\n    // Assess PEM\n    const pemEvidence = CLINICAL_PATTERNS.postExertionalMalaise.filter(pattern => \n      lowerText.includes(pattern.toLowerCase())\n    )\n    \n    const pemIndicators = {\n      present: pemEvidence.length > 0,\n      severity: pemEvidence.length >= 3 ? 'severe' : \n               pemEvidence.length >= 2 ? 'moderate' : \n               pemEvidence.length >= 1 ? 'mild' : 'none' as 'none' | 'mild' | 'moderate' | 'severe',\n      evidence: pemEvidence\n    }\n\n    // Calculate overall score (0-100)\n    let score = 0\n    score += coreSymptoms * 15 // Core symptoms worth 15 points each\n    score += criteriaAssessment.duration ? 20 : 0 // Duration worth 20 points\n    score += pemIndicators.present ? 10 : 0 // PEM bonus\n    \n    // Penalty for red flags\n    score -= redFlags.length * 10\n\n    // Ensure score is between 0-100\n    score = Math.max(0, Math.min(100, score))\n\n    // Determine likelihood\n    let mecfsLikelihood: 'very-high' | 'high' | 'moderate' | 'low' | 'very-low'\n    if (score >= 80) mecfsLikelihood = 'very-high'\n    else if (score >= 65) mecfsLikelihood = 'high'\n    else if (score >= 40) mecfsLikelihood = 'moderate'\n    else if (score >= 20) mecfsLikelihood = 'low'\n    else mecfsLikelihood = 'very-low'\n\n    // Generate findings\n    const keyFindings = []\n    if (criteriaAssessment.debilitatingFatigue) keyFindings.push('Debilitating fatigue documented')\n    if (criteriaAssessment.postExertionalMalaise) keyFindings.push('Post-exertional malaise present')\n    if (criteriaAssessment.unrefreshingSleep) keyFindings.push('Unrefreshing sleep reported')\n    if (criteriaAssessment.cognitiveDifficulties) keyFindings.push('Cognitive difficulties noted')\n    if (criteriaAssessment.duration) keyFindings.push('Chronic duration (â‰¥3 months)')\n\n    // Generate recommendations\n    const recommendations = []\n    if (score >= 60) {\n      recommendations.push('Strong consideration for ME/CFS diagnosis')\n      recommendations.push('Complete NICE NG206 required investigations')\n      recommendations.push('Consider referral to ME/CFS specialist service')\n    } else if (score >= 30) {\n      recommendations.push('Possible ME/CFS - requires further assessment')\n      recommendations.push('Consider 3-month follow-up if symptoms persist')\n    } else {\n      recommendations.push('Low probability of ME/CFS')\n      recommendations.push('Consider alternative diagnoses')\n    }\n\n    if (redFlags.length > 0) {\n      recommendations.unshift('RED FLAGS PRESENT - Urgent evaluation required')\n    }\n\n    // Differential diagnoses to consider\n    const differentialDiagnoses = [\n      'Thyroid dysfunction',\n      'Sleep disorders',\n      'Depression/anxiety',\n      'Autoimmune conditions',\n      'Chronic infections',\n      'Fibromyalgia'\n    ]\n\n    return {\n      overallScore: score,\n      mecfsLikelihood,\n      criteriaAssessment,\n      redFlags,\n      pemIndicators,\n      differentialDiagnoses,\n      recommendations,\n      keyFindings\n    }\n  }\n\n  const handleAnalyze = async () => {\n    if (!caseText.trim()) return\n\n    setIsAnalyzing(true)\n    \n    // Simulate processing time\n    await new Promise(resolve => setTimeout(resolve, 2000))\n    \n    const result = analyzeCaseText(caseText)\n    setAnalysisResult(result)\n    setIsAnalyzing(false)\n  }\n\n  const getLikelihoodColor = (likelihood: string) => {\n    switch (likelihood) {\n      case 'very-high': return 'bg-red-100 text-red-800 border-red-200'\n      case 'high': return 'bg-orange-100 text-orange-800 border-orange-200'\n      case 'moderate': return 'bg-yellow-100 text-yellow-800 border-yellow-200'\n      case 'low': return 'bg-blue-100 text-blue-800 border-blue-200'\n      case 'very-low': return 'bg-gray-100 text-gray-800 border-gray-200'\n      default: return 'bg-gray-100 text-gray-800 border-gray-200'\n    }\n  }\n\n  const getLikelihoodText = (likelihood: string) => {\n    switch (likelihood) {\n      case 'very-high': return 'Very High (80-100%)'\n      case 'high': return 'High (65-79%)'\n      case 'moderate': return 'Moderate (40-64%)'\n      case 'low': return 'Low (20-39%)'\n      case 'very-low': return 'Very Low (0-19%)'\n      default: return 'Unknown'\n    }\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n      <div className=\"container mx-auto px-4 max-w-6xl\">\n        <div className=\"mb-6\">\n          <div className=\"flex items-center gap-4 mb-4\">\n            <Link href=\"/\" className=\"flex items-center gap-2 text-blue-600 hover:text-blue-800\">\n              <ArrowLeft className=\"h-4 w-4\" />\n              Back to Dashboard\n            </Link>\n          </div>\n          \n          <div className=\"flex items-center gap-4\">\n            <FileText className=\"h-6 w-6 text-blue-600\" />\n            <div>\n              <h1 className=\"text-3xl font-bold text-gray-900\">Case Analyzer</h1>\n              <p className=\"text-gray-600\">AI-powered clinical case analysis for ME/CFS assessment</p>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"grid lg:grid-cols-2 gap-6\">\n          {/* Input Section */}\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Search className=\"h-5 w-5\" />\n                Patient Case Input\n              </CardTitle>\n              <CardDescription>\n                Enter clinical presentation, history, and examination findings\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                <div>\n                  <label className=\"text-sm font-medium mb-2 block\">\n                    Clinical Case Description\n                  </label>\n                  <Textarea\n                    placeholder=\"Enter patient case details here... \n\nExample:\n32-year-old female presents with 8-month history of severe, debilitating fatigue following viral illness. Reports profound exhaustion that worsens significantly with minimal physical or mental activity. Experiences 'crashes' lasting days after simple tasks like grocery shopping. Sleep is unrefreshing despite 10+ hours. Significant brain fog with memory and concentration problems. Previously active marathon runner, now struggles with basic daily activities...\"\n                    value={caseText}\n                    onChange={(e) => setCaseText(e.target.value)}\n                    className=\"min-h-[300px] text-sm\"\n                  />\n                </div>\n                \n                <div className=\"flex gap-3\">\n                  <Button \n                    onClick={handleAnalyze}\n                    disabled={!caseText.trim() || isAnalyzing}\n                    className=\"flex-1\"\n                  >\n                    {isAnalyzing ? (\n                      <>\n                        <Clock className=\"h-4 w-4 mr-2 animate-spin\" />\n                        Analyzing...\n                      </>\n                    ) : (\n                      <>\n                        <Search className=\"h-4 w-4 mr-2\" />\n                        Analyze Case\n                      </>\n                    )}\n                  </Button>\n                  <Button \n                    variant=\"outline\" \n                    onClick={() => {\n                      setCaseText('')\n                      setAnalysisResult(null)\n                    }}\n                  >\n                    Clear\n                  </Button>\n                </div>\n\n                <Alert>\n                  <Lightbulb className=\"h-4 w-4\" />\n                  <AlertDescription>\n                    <strong>Tip:</strong> Include details about fatigue severity, activity tolerance, sleep quality, cognitive symptoms, duration, and any triggering events for best analysis.\n                  </AlertDescription>\n                </Alert>\n              </div>\n            </CardContent>\n          </Card>\n\n          {/* Results Section */}\n          <div className=\"space-y-6\">\n            {analysisResult ? (\n              <>\n                {/* Overall Assessment */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <CheckCircle className=\"h-5 w-5\" />\n                      ME/CFS Likelihood Assessment\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"text-center\">\n                        <div className=\"text-3xl font-bold mb-2\">{analysisResult.overallScore}%</div>\n                        <Badge className={`text-sm ${getLikelihoodColor(analysisResult.mecfsLikelihood)}`}>\n                          {getLikelihoodText(analysisResult.mecfsLikelihood)}\n                        </Badge>\n                      </div>\n                      \n                      <Progress value={analysisResult.overallScore} className=\"h-3\" />\n                      \n                      {analysisResult.redFlags.length > 0 && (\n                        <Alert className=\"border-red-200 bg-red-50\">\n                          <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                          <AlertDescription className=\"text-red-800\">\n                            <strong>Red Flags Detected:</strong> {analysisResult.redFlags.join(', ')}\n                          </AlertDescription>\n                        </Alert>\n                      )}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* NICE NG206 Criteria Assessment */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Brain className=\"h-5 w-5\" />\n                      NICE NG206 Criteria Assessment\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-3\">\n                      {[\n                        { key: 'debilitatingFatigue', label: 'Debilitating fatigue' },\n                        { key: 'postExertionalMalaise', label: 'Post-exertional malaise' },\n                        { key: 'unrefreshingSleep', label: 'Unrefreshing sleep' },\n                        { key: 'cognitiveDifficulties', label: 'Cognitive difficulties' },\n                        { key: 'duration', label: 'Duration â‰¥3 months' }\n                      ].map(({ key, label }) => (\n                        <div key={key} className=\"flex items-center gap-2\">\n                          {analysisResult.criteriaAssessment[key as keyof typeof analysisResult.criteriaAssessment] ? (\n                            <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                          ) : (\n                            <div className=\"w-4 h-4 rounded-full border-2 border-gray-300\" />\n                          )}\n                          <span className={`text-sm ${\n                            analysisResult.criteriaAssessment[key as keyof typeof analysisResult.criteriaAssessment] \n                              ? 'text-green-800 font-medium' \n                              : 'text-gray-600'\n                          }`}>\n                            {label}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* PEM Assessment */}\n                {analysisResult.pemIndicators.present && (\n                  <Card>\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center gap-2\">\n                        <Activity className=\"h-5 w-5\" />\n                        Post-Exertional Malaise\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"space-y-2\">\n                        <Badge variant=\"outline\" className=\"capitalize\">\n                          {analysisResult.pemIndicators.severity} severity\n                        </Badge>\n                        <div className=\"text-sm text-gray-600\">\n                          <strong>Evidence found:</strong>\n                          <ul className=\"list-disc list-inside mt-1\">\n                            {analysisResult.pemIndicators.evidence.map((evidence, idx) => (\n                              <li key={idx}>{evidence}</li>\n                            ))}\n                          </ul>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n\n                {/* Key Findings */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center gap-2\">\n                      <Heart className=\"h-5 w-5\" />\n                      Key Clinical Findings\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {analysisResult.keyFindings.map((finding, idx) => (\n                        <div key={idx} className=\"flex items-start gap-2\">\n                          <CheckCircle className=\"h-4 w-4 text-green-600 mt-0.5 flex-shrink-0\" />\n                          <span className=\"text-sm\">{finding}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Recommendations */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Clinical Recommendations</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-2\">\n                      {analysisResult.recommendations.map((rec, idx) => (\n                        <div key={idx} className=\"flex items-start gap-2\">\n                          <span className=\"text-blue-600 mt-1\">â€¢</span>\n                          <span className=\"text-sm\">{rec}</span>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Differential Diagnoses */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle>Consider Alternative Diagnoses</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"grid grid-cols-2 gap-2\">\n                      {analysisResult.differentialDiagnoses.map((diagnosis, idx) => (\n                        <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                          {diagnosis}\n                        </Badge>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </>\n            ) : (\n              <Card>\n                <CardContent className=\"text-center py-12\">\n                  <FileText className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                  <h3 className=\"text-lg font-semibold text-gray-600 mb-2\">No Analysis Yet</h3>\n                  <p className=\"text-gray-500\">Enter a patient case and click \"Analyze Case\" to see results</p>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "filepath": "/home/user/project/app/case-analyzer/page.tsx",
      "exists": false
    },
    "title": "app/case-analyzer/page.tsx",
    "time": {
      "start": 1758538439011,
      "end": 1758538439040
    }
  }
}