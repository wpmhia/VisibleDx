{
  "id": "prt_9596e1fcb0015hXhioAdAx1DH2",
  "messageID": "msg_9596d7917001GthVmCimh88w2x",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01SAKoS8WTARK4S55cjTery6",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/subtype-advisor/page.tsx",
      "limit": 130
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Checkbox } from '@/components/ui/checkbox'\n00007| import { Badge } from '@/components/ui/badge'\n00008| import { Alert, AlertDescription } from '@/components/ui/alert'\n00009| import { Input } from '@/components/ui/input'\n00010| import { Label } from '@/components/ui/label'\n00011| import { ArrowLeft, Users, Pill, Heart, Droplets, Activity, Brain, Shield, Download } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| import { useTranslation } from '@/lib/language-context'\n00014| \n00015| interface POTSSubtype {\n00016|   id: string\n00017|   name: string\n00018|   description: string\n00019|   icon: any\n00020|   color: string\n00021|   criteria: { id: string; description: string; checked: boolean }[]\n00022|   treatments: {\n00023|     nonPharmacological: string[]\n00024|     firstLine: string[]\n00025|     secondLine: string[]\n00026|   }\n00027| }\n00028| \n00029| const createSubtypes = (t: any): POTSSubtype[] => [\n00030|   {\n00031|     id: 'hypovolemic',\n00032|     name: t.subtype.subtypes.hypovolemic.name,\n00033|     description: t.subtype.subtypes.hypovolemic.description,\n00034|     icon: Droplets,\n00035|     color: 'blue',\n00036|     criteria: t.subtype.subtypes.hypovolemic.criteria.map((desc: string, index: number) => ({\n00037|       id: ['low_bp', 'thirst', 'salt_craving', 'volume_depletion', 'renin_high'][index],\n00038|       description: desc,\n00039|       checked: false\n00040|     })),\n00041|     treatments: {\n00042|       nonPharmacological: t.subtype.subtypes.hypovolemic.treatments.nonPharmacological,\n00043|       firstLine: t.subtype.subtypes.hypovolemic.treatments.firstLine,\n00044|       secondLine: t.subtype.subtypes.hypovolemic.treatments.secondLine\n00045|     }\n00046|   },\n00047|   {\n00048|     id: 'neuropathic',\n00049|     name: t.subtype.subtypes.neuropathic.name,\n00050|     description: t.subtype.subtypes.neuropathic.description,\n00051|     icon: Brain,\n00052|     color: 'purple',\n00053|     criteria: t.subtype.subtypes.neuropathic.criteria.map((desc: string, index: number) => ({\n00054|       id: ['distal_neuropathy', 'gi_dysfunction', 'anhidrosis', 'pupil_abnormal', 'diabetes_autoimmune'][index],\n00055|       description: desc,\n00056|       checked: false\n00057|     })),\n00058|     treatments: {\n00059|       nonPharmacological: t.subtype.subtypes.neuropathic.treatments.nonPharmacological,\n00060|       firstLine: t.subtype.subtypes.neuropathic.treatments.firstLine,\n00061|       secondLine: t.subtype.subtypes.neuropathic.treatments.secondLine\n00062|     }\n00063|   },\n00064|   {\n00065|     id: 'hyperadrenergic',\n00066|     name: t.subtype.subtypes.hyperadrenergic.name,\n00067|     description: t.subtype.subtypes.hyperadrenergic.description,\n00068|     icon: Activity,\n00069|     color: 'red',\n00070|     criteria: t.subtype.subtypes.hyperadrenergic.criteria.map((desc: string, index: number) => ({\n00071|       id: ['high_bp', 'anxiety_panic', 'migraine', 'cold_hands', 'norepinephrine_high'][index],\n00072|       description: desc,\n00073|       checked: false\n00074|     })),\n00075|     treatments: {\n00076|       nonPharmacological: t.subtype.subtypes.hyperadrenergic.treatments.nonPharmacological,\n00077|       firstLine: t.subtype.subtypes.hyperadrenergic.treatments.firstLine,\n00078|       secondLine: t.subtype.subtypes.hyperadrenergic.treatments.secondLine\n00079|     }\n00080|   },\n00081|   {\n00082|     id: 'autoimmune',\n00083|     name: t.subtype.subtypes.autoimmune.name,\n00084|     description: t.subtype.subtypes.autoimmune.description,\n00085|     icon: Shield,\n00086|     color: 'green',\n00087|     criteria: t.subtype.subtypes.autoimmune.criteria.map((desc: string, index: number) => ({\n00088|       id: ['autoimmune_history', 'rapid_onset', 'viral_trigger', 'antibodies', 'other_autoimmune'][index],\n00089|       description: desc,\n00090|       checked: false\n00091|     })),\n00092|     treatments: {\n00093|       nonPharmacological: t.subtype.subtypes.autoimmune.treatments.nonPharmacological,\n00094|       firstLine: t.subtype.subtypes.autoimmune.treatments.firstLine,\n00095|       secondLine: t.subtype.subtypes.autoimmune.treatments.secondLine\n00096|     }\n00097|   }\n00098| ]\n00099| \n00100| export default function SubtypeAdvisor() {\n00101|   const { t } = useTranslation()\n00102|   const potsSubtypes = createSubtypes(t)\n00103|   const [subtypeData, setSubtypeData] = useState(potsSubtypes.map(s => ({ ...s })))\n00104|   const [patientAge, setPatientAge] = useState<number | null>(null)\n00105|   const [comorbidities, setComorbidities] = useState<string[]>([])\n00106|   const [isComplete, setIsComplete] = useState(false)\n00107| \n00108|   // Update subtype translations when language changes while preserving checked states\n00109|   useEffect(() => {\n00110|     const newSubtypes = createSubtypes(t)\n00111|     setSubtypeData(prev => \n00112|       newSubtypes.map((newSubtype, index) => ({\n00113|         ...newSubtype,\n00114|         criteria: newSubtype.criteria.map((newCriterion, criterionIndex) => ({\n00115|           ...newCriterion,\n00116|           checked: prev[index]?.criteria[criterionIndex]?.checked || false\n00117|         }))\n00118|       }))\n00119|     )\n00120|   }, [t])\n00121| \n00122|   // Scroll to top when analysis is complete\n00123|   useEffect(() => {\n00124|     if (isComplete) {\n00125|       window.scrollTo({ top: 0, behavior: 'smooth' })\n00126|     }\n00127|   }, [isComplete])\n00128| \n00129|   const handleCriteriaChange = (subtypeId: string, criteriaId: string, checked: boolean) => {\n00130|     setSubtypeData(prev => prev.map(subtype => \n\n(File has more lines. Use 'offset' parameter to read beyond line 130)\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { ArrowLeft, Users, Pill, Heart, Droplets, Activity, Brain, Shield, Download } from 'lucide-react'\nimport Link from 'next/link'\nimport { useTranslation } from '@/lib/language-context'\n\ninterface POTSSubtype {\n  id: string\n  name: string\n  description: string\n  icon: any\n  color: string"
    },
    "title": "app/subtype-advisor/page.tsx",
    "time": {
      "start": 1758142013953,
      "end": 1758142013958
    }
  }
}