{
  "id": "prt_9589ae088001v1noZCGXMIDIvl",
  "messageID": "msg_9589aaf47001q8uvGQ3Wp3dX8a",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01Ufa91daHgL8ESfKkkBGW2Z",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/stand-test/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect, useRef } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Input } from '@/components/ui/input'\n00007| import { Label } from '@/components/ui/label'\n00008| import { Progress } from '@/components/ui/progress'\n00009| import { Badge } from '@/components/ui/badge'\n00010| import { Alert, AlertDescription } from '@/components/ui/alert'\n00011| import { ArrowLeft, Heart, Play, Pause, Square, Timer, TrendingUp, AlertTriangle } from 'lucide-react'\n00012| import Link from 'next/link'\n00013| \n00014| interface HeartRateReading {\n00015|   time: number\n00016|   hr: number\n00017|   bp?: { systolic: number; diastolic: number }\n00018| }\n00019| \n00020| interface TestPhase {\n00021|   name: string\n00022|   duration: number\n00023|   position: 'lying' | 'standing'\n00024|   instructions: string\n00025| }\n00026| \n00027| const testPhases: TestPhase[] = [\n00028|   {\n00029|     name: 'Baseline Lying',\n00030|     duration: 300, // 5 minutes\n00031|     position: 'lying',\n00032|     instructions: 'Lie down comfortably and remain still. Breathe normally and relax.'\n00033|   },\n00034|   {\n00035|     name: 'Standing Phase',\n00036|     duration: 600, // 10 minutes\n00037|     position: 'standing',\n00038|     instructions: 'Stand up quickly and remain standing. Do not lean against walls or move around.'\n00039|   }\n00040| ]\n00041| \n00042| export default function StandTest() {\n00043|   const [currentPhase, setCurrentPhase] = useState(0)\n00044|   const [timeElapsed, setTimeElapsed] = useState(0)\n00045|   const [isRunning, setIsRunning] = useState(false)\n00046|   const [isPaused, setIsPaused] = useState(false)\n00047|   const [readings, setReadings] = useState<HeartRateReading[]>([])\n00048|   const [currentHR, setCurrentHR] = useState<number | null>(null)\n00049|   const [currentBP, setCurrentBP] = useState<{ systolic: number; diastolic: number } | null>(null)\n00050|   const [isComplete, setIsComplete] = useState(false)\n00051|   const [testMethod, setTestMethod] = useState<'manual' | 'camera'>('manual')\n00052|   \n00053|   const intervalRef = useRef<NodeJS.Timeout | null>(null)\n00054| \n00055|   useEffect(() => {\n00056|     if (isRunning && !isPaused) {\n00057|       intervalRef.current = setInterval(() => {\n00058|         setTimeElapsed(prev => prev + 1)\n00059|       }, 1000)\n00060|     } else {\n00061|       if (intervalRef.current) {\n00062|         clearInterval(intervalRef.current)\n00063|       }\n00064|     }\n00065| \n00066|     return () => {\n00067|       if (intervalRef.current) {\n00068|         clearInterval(intervalRef.current)\n00069|       }\n00070|     }\n00071|   }, [isRunning, isPaused])\n00072| \n00073|   useEffect(() => {\n00074|     const phase = testPhases[currentPhase]\n00075|     if (phase && timeElapsed >= phase.duration && currentPhase < testPhases.length - 1) {\n00076|       setCurrentPhase(prev => prev + 1)\n00077|       setTimeElapsed(0)\n00078|     } else if (phase && timeElapsed >= phase.duration && currentPhase === testPhases.length - 1) {\n00079|       setIsRunning(false)\n00080|       setIsComplete(true)\n00081|     }\n00082|   }, [timeElapsed, currentPhase])\n00083| \n00084|   const startTest = () => {\n00085|     setIsRunning(true)\n00086|     setIsPaused(false)\n00087|     setTimeElapsed(0)\n00088|     setCurrentPhase(0)\n00089|     setReadings([])\n00090|     setIsComplete(false)\n00091|   }\n00092| \n00093|   const pauseTest = () => {\n00094|     setIsPaused(!isPaused)\n00095|   }\n00096| \n00097|   const stopTest = () => {\n00098|     setIsRunning(false)\n00099|     setIsPaused(false)\n00100|     setTimeElapsed(0)\n00101|     setCurrentPhase(0)\n00102|   }\n00103| \n00104|   const addReading = () => {\n00105|     if (currentHR) {\n00106|       const reading: HeartRateReading = {\n00107|         time: timeElapsed,\n00108|         hr: currentHR,\n00109|         bp: currentBP || undefined\n00110|       }\n00111|       setReadings(prev => [...prev, reading])\n00112|       setCurrentHR(null)\n00113|       setCurrentBP(null)\n00114|     }\n00115|   }\n00116| \n00117|   const calculateResults = () => {\n00118|     const lyingReadings = readings.filter(r => r.time < 300)\n00119|     const standingReadings = readings.filter(r => r.time >= 300)\n00120|     \n00121|     if (lyingReadings.length === 0 || standingReadings.length === 0) {\n00122|       return null\n00123|     }\n00124| \n00125|     const baselineHR = lyingReadings.reduce((sum, r) => sum + r.hr, 0) / lyingReadings.length\n00126|     const maxStandingHR = Math.max(...standingReadings.map(r => r.hr))\n00127|     const hrIncrease = maxStandingHR - baselineHR\n00128| \n00129|     // POTS criteria: HR increase ≥30 bpm (≥40 for ages 12-19)\n00130|     const potsThreshold = 30\n00131|     const meetsPOTSCriteria = hrIncrease >= potsThreshold\n00132| \n00133|     // Calculate sustained HR increase (average of standing phase)\n00134|     const sustainedStandingHR = standingReadings.reduce((sum, r) => sum + r.hr, 0) / standingReadings.length\n00135|     const sustainedHRIncrease = sustainedStandingHR - baselineHR\n00136| \n00137|     return {\n00138|       baselineHR: Math.round(baselineHR),\n00139|       maxStandingHR: Math.round(maxStandingHR),\n00140|       sustainedStandingHR: Math.round(sustainedStandingHR),\n00141|       hrIncrease: Math.round(hrIncrease),\n00142|       sustainedHRIncrease: Math.round(sustainedHRIncrease),\n00143|       meetsPOTSCriteria,\n00144|       potsThreshold\n00145|     }\n00146|   }\n00147| \n00148|   const formatTime = (seconds: number) => {\n00149|     const mins = Math.floor(seconds / 60)\n00150|     const secs = seconds % 60\n00151|     return `${mins.toString().padStart(2, '0')}:${secs.toString().padStart(2, '0')}`\n00152|   }\n00153| \n00154|   const currentPhaseData = testPhases[currentPhase]\n00155|   const progress = currentPhaseData ? (timeElapsed / currentPhaseData.duration) * 100 : 0\n00156|   const results = calculateResults()\n00157| \n00158|   if (isComplete && results) {\n00159|     return (\n00160|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00161|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00162|           <Card>\n00163|             <CardHeader className=\"text-center\">\n00164|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00165|                 <Heart className=\"h-6 w-6 text-red-600\" />\n00166|                 Stand-Test Results\n00167|               </CardTitle>\n00168|               <CardDescription>\n00169|                 NASA Lean Stand Test Results - 10 minute protocol\n00170|               </CardDescription>\n00171|             </CardHeader>\n00172|             <CardContent className=\"space-y-6\">\n00173|               <div className=\"text-center\">\n00174|                 <Badge \n00175|                   className={`px-4 py-2 text-lg ${\n00176|                     results.meetsPOTSCriteria \n00177|                       ? 'bg-red-100 text-red-800' \n00178|                       : 'bg-green-100 text-green-800'\n00179|                   }`}\n00180|                 >\n00181|                   {results.meetsPOTSCriteria ? 'POTS Criteria Met' : 'POTS Criteria Not Met'}\n00182|                 </Badge>\n00183|               </div>\n00184| \n00185|               <div className=\"grid md:grid-cols-3 gap-4\">\n00186|                 <Card className=\"border-blue-200\">\n00187|                   <CardHeader className=\"pb-3\">\n00188|                     <CardTitle className=\"text-lg text-blue-800\">Baseline (Lying)</CardTitle>\n00189|                   </CardHeader>\n00190|                   <CardContent>\n00191|                     <div className=\"text-2xl font-bold text-blue-900\">\n00192|                       {results.baselineHR} bpm\n00193|                     </div>\n00194|                     <p className=\"text-sm text-blue-700\">Average heart rate</p>\n00195|                   </CardContent>\n00196|                 </Card>\n00197| \n00198|                 <Card className=\"border-orange-200\">\n00199|                   <CardHeader className=\"pb-3\">\n00200|                     <CardTitle className=\"text-lg text-orange-800\">Peak Standing</CardTitle>\n00201|                   </CardHeader>\n00202|                   <CardContent>\n00203|                     <div className=\"text-2xl font-bold text-orange-900\">\n00204|                       {results.maxStandingHR} bpm\n00205|                     </div>\n00206|                     <p className=\"text-sm text-orange-700\">Maximum heart rate</p>\n00207|                     <Badge variant=\"outline\" className=\"mt-1\">\n00208|                       +{results.hrIncrease} bpm\n00209|                     </Badge>\n00210|                   </CardContent>\n00211|                 </Card>\n00212| \n00213|                 <Card className=\"border-purple-200\">\n00214|                   <CardHeader className=\"pb-3\">\n00215|                     <CardTitle className=\"text-lg text-purple-800\">Sustained Standing</CardTitle>\n00216|                   </CardHeader>\n00217|                   <CardContent>\n00218|                     <div className=\"text-2xl font-bold text-purple-900\">\n00219|                       {results.sustainedStandingHR} bpm\n00220|                     </div>\n00221|                     <p className=\"text-sm text-purple-700\">Average standing HR</p>\n00222|                     <Badge variant=\"outline\" className=\"mt-1\">\n00223|                       +{results.sustainedHRIncrease} bpm\n00224|                     </Badge>\n00225|                   </CardContent>\n00226|                 </Card>\n00227|               </div>\n00228| \n00229|               {results.meetsPOTSCriteria && (\n00230|                 <Alert className=\"border-red-200 bg-red-50\">\n00231|                   <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n00232|                   <AlertDescription className=\"text-red-800\">\n00233|                     <strong>POTS Criteria Met:</strong> Heart rate increase of {results.hrIncrease} bpm \n00234|                     exceeds the threshold of {results.potsThreshold} bpm. Consider POTS subtyping and \n00235|                     further evaluation.\n00236|                   </AlertDescription>\n00237|                 </Alert>\n00238|               )}\n00239| \n00240|               <div className=\"bg-gray-50 p-4 rounded-lg\">\n00241|                 <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n00242|                   <TrendingUp className=\"h-4 w-4\" />\n00243|                   Clinical Interpretation\n00244|                 </h4>\n00245|                 <div className=\"text-sm space-y-2\">\n00246|                   {results.meetsPOTSCriteria ? (\n00247|                     <>\n00248|                       <p>• Heart rate increase suggests orthostatic intolerance consistent with POTS</p>\n00249|                       <p>• Proceed to POTS subtyping for targeted treatment recommendations</p>\n00250|                       <p>• Consider additional autonomic testing if clinically indicated</p>\n00251|                       <p>• Rule out secondary causes (dehydration, medications, other conditions)</p>\n00252|                     </>\n00253|                   ) : (\n00254|                     <>\n00255|                       <p>• Normal orthostatic heart rate response</p>\n00256|                       <p>• POTS unlikely based on current criteria</p>\n00257|                       <p>• Consider other causes of symptoms (ME/CFS, Long COVID without POTS)</p>\n00258|                       <p>• Repeat testing if symptoms persist or worsen</p>\n00259|                     </>\n00260|                   )}\n00261|                 </div>\n00262|               </div>\n00263| \n00264|               <div className=\"bg-blue-50 p-4 rounded-lg\">\n00265|                 <h4 className=\"font-semibold mb-2 text-blue-900\">Next Steps</h4>\n00266|                 <div className=\"text-sm text-blue-800 space-y-1\">\n00267|                   <p>• Complete PEM-Quest assessment</p>\n00268|                   <p>• Proceed to Criteria Engine for comprehensive diagnosis</p>\n00269|                   {results.meetsPOTSCriteria && (\n00270|                     <p>• Continue to Subtype & Treatment Advisor for POTS management</p>\n00271|                   )}\n00272|                 </div>\n00273|               </div>\n00274| \n00275|               <div className=\"flex gap-4 justify-center\">\n00276|                 <Button onClick={() => {\n00277|                   setIsComplete(false)\n00278|                   setReadings([])\n00279|                   setTimeElapsed(0)\n00280|                   setCurrentPhase(0)\n00281|                 }} variant=\"outline\">\n00282|                   Repeat Test\n00283|                 </Button>\n00284|                 <Button asChild>\n00285|                   <Link href=\"/pem-quest\">\n00286|                     Continue to PEM-Quest\n00287|                   </Link>\n00288|                 </Button>\n00289|               </div>\n00290|             </CardContent>\n00291|           </Card>\n00292|         </div>\n00293|       </div>\n00294|     )\n00295|   }\n00296| \n00297|   return (\n00298|     <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00299|       <div className=\"container mx-auto px-4 max-w-4xl\">\n00300|         <div className=\"mb-6\">\n00301|           <Link href=\"/\" className=\"inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 mb-4\">\n00302|             <ArrowLeft className=\"h-4 w-4\" />\n00303|             Back to Dashboard\n00304|           </Link>\n00305|           \n00306|           <div className=\"flex items-center gap-4 mb-4\">\n00307|             <Heart className=\"h-5 w-5 text-red-600\" />\n00308|             <div>\n00309|               <h1 className=\"text-2xl font-bold text-gray-900\">Stand-Test Pro</h1>\n00310|               <p className=\"text-gray-600\">NASA Lean Stand Test Protocol - 10 minute heart rate monitoring</p>\n00311|             </div>\n00312|           </div>\n00313|         </div>\n00314| \n00315|         <div className=\"space-y-6\">\n00316|           {!isRunning && readings.length === 0 && (\n00317|             <Card>\n00318|               <CardHeader>\n00319|                 <CardTitle>Test Setup</CardTitle>\n00320|                 <CardDescription>\n00321|                   Choose your preferred method for heart rate monitoring\n00322|                 </CardDescription>\n00323|               </CardHeader>\n00324|               <CardContent className=\"space-y-4\">\n00325|                 <div className=\"grid md:grid-cols-2 gap-4\">\n00326|                   <Card \n00327|                     className={`cursor-pointer transition-all ${\n00328|                       testMethod === 'manual' ? 'ring-2 ring-blue-500' : ''\n00329|                     }`}\n00330|                     onClick={() => setTestMethod('manual')}\n00331|                   >\n00332|                     <CardContent className=\"pt-6\">\n00333|                       <h3 className=\"font-semibold mb-2\">Manual Entry</h3>\n00334|                       <p className=\"text-sm text-gray-600 mb-4\">\n00335|                         Use pulse oximeter, fitness tracker, or manual pulse counting\n00336|                       </p>\n00337|                       <Badge variant=\"outline\">Recommended</Badge>\n00338|                     </CardContent>\n00339|                   </Card>\n00340|                   \n00341|                   <Card \n00342|                     className={`cursor-pointer transition-all ${\n00343|                       testMethod === 'camera' ? 'ring-2 ring-blue-500' : ''\n00344|                     }`}\n00345|                     onClick={() => setTestMethod('camera')}\n00346|                   >\n00347|                     <CardContent className=\"pt-6\">\n00348|                       <h3 className=\"font-semibold mb-2\">Camera PPG</h3>\n00349|                       <p className=\"text-sm text-gray-600 mb-4\">\n00350|                         Use device camera for photoplethysmography (experimental)\n00351|                       </p>\n00352|                       <Badge variant=\"secondary\">Beta Feature</Badge>\n00353|                     </CardContent>\n00354|                   </Card>\n00355|                 </div>\n00356| \n00357|                 <Alert>\n00358|                   <AlertTriangle className=\"h-4 w-4\" />\n00359|                   <AlertDescription>\n00360|                     <strong>Safety Note:</strong> Stop the test immediately if you experience chest pain, \n00361|                     severe dizziness, or feel faint. Have a chair nearby for safety.\n00362|                   </AlertDescription>\n00363|                 </Alert>\n00364| \n00365|                 <Button onClick={startTest} className=\"w-full\" size=\"lg\">\n00366|                   <Play className=\"h-4 w-4 mr-2\" />\n00367|                   Start Stand Test\n00368|                 </Button>\n00369|               </CardContent>\n00370|             </Card>\n00371|           )}\n00372| \n00373|           {isRunning && (\n00374|             <>\n00375|               <Card>\n00376|                 <CardHeader>\n00377|                   <CardTitle className=\"flex items-center justify-between\">\n00378|                     <span>Phase: {currentPhaseData?.name}</span>\n00379|                     <div className=\"flex items-center gap-2\">\n00380|                       <Timer className=\"h-4 w-4\" />\n00381|                       {formatTime(timeElapsed)} / {formatTime(currentPhaseData?.duration || 0)}\n00382|                     </div>\n00383|                   </CardTitle>\n00384|                   <CardDescription>\n00385|                     {currentPhaseData?.instructions}\n00386|                   </CardDescription>\n00387|                 </CardHeader>\n00388|                 <CardContent>\n00389|                   <Progress value={progress} className=\"h-3 mb-4\" />\n00390|                   \n00391|                   <div className=\"flex gap-4 justify-center mb-4\">\n00392|                     <Button onClick={pauseTest} variant=\"outline\">\n00393|                       {isPaused ? <Play className=\"h-4 w-4\" /> : <Pause className=\"h-4 w-4\" />}\n00394|                       {isPaused ? 'Resume' : 'Pause'}\n00395|                     </Button>\n00396|                     <Button onClick={stopTest} variant=\"destructive\">\n00397|                       <Square className=\"h-4 w-4 mr-2\" />\n00398|                       Stop Test\n00399|                     </Button>\n00400|                   </div>\n00401|                 </CardContent>\n00402|               </Card>\n00403| \n00404|               <Card>\n00405|                 <CardHeader>\n00406|                   <CardTitle>Record Heart Rate</CardTitle>\n00407|                   <CardDescription>\n00408|                     Enter current heart rate reading (record every 1-2 minutes)\n00409|                   </CardDescription>\n00410|                 </CardHeader>\n00411|                 <CardContent className=\"space-y-4\">\n00412|                   <div className=\"grid md:grid-cols-3 gap-4\">\n00413|                     <div>\n00414|                       <Label htmlFor=\"hr\">Heart Rate (bpm)</Label>\n00415|                       <Input\n00416|                         id=\"hr\"\n00417|                         type=\"number\"\n00418|                         placeholder=\"75\"\n00419|                         value={currentHR || ''}\n00420|                         onChange={(e) => setCurrentHR(parseInt(e.target.value) || null)}\n00421|                       />\n00422|                     </div>\n00423|                     <div>\n00424|                       <Label htmlFor=\"systolic\">Systolic BP (optional)</Label>\n00425|                       <Input\n00426|                         id=\"systolic\"\n00427|                         type=\"number\"\n00428|                         placeholder=\"120\"\n00429|                         value={currentBP?.systolic || ''}\n00430|                         onChange={(e) => setCurrentBP(prev => ({\n00431|                           ...prev,\n00432|                           systolic: parseInt(e.target.value) || 0,\n00433|                           diastolic: prev?.diastolic || 0\n00434|                         }))}\n00435|                       />\n00436|                     </div>\n00437|                     <div>\n00438|                       <Label htmlFor=\"diastolic\">Diastolic BP (optional)</Label>\n00439|                       <Input\n00440|                         id=\"diastolic\"\n00441|                         type=\"number\"\n00442|                         placeholder=\"80\"\n00443|                         value={currentBP?.diastolic || ''}\n00444|                         onChange={(e) => setCurrentBP(prev => ({\n00445|                           ...prev,\n00446|                           systolic: prev?.systolic || 0,\n00447|                           diastolic: parseInt(e.target.value) || 0\n00448|                         }))}\n00449|                       />\n00450|                     </div>\n00451|                   </div>\n00452|                   \n00453|                   <Button onClick={addReading} disabled={!currentHR} className=\"w-full\">\n00454|                     Record Reading at {formatTime(timeElapsed)}\n00455|                   </Button>\n00456|                   \n00457|                   {readings.length > 0 && (\n00458|                     <div className=\"bg-gray-50 p-4 rounded-lg\">\n00459|                       <h4 className=\"font-semibold mb-2\">Recent Readings</h4>\n00460|                       <div className=\"text-sm space-y-1\">\n00461|                         {readings.slice(-5).map((reading, index) => (\n00462|                           <div key={index} className=\"flex justify-between\">\n00463|                             <span>{formatTime(reading.time)}</span>\n00464|                             <span>{reading.hr} bpm</span>\n00465|                           </div>\n00466|                         ))}\n00467|                       </div>\n00468|                     </div>\n00469|                   )}\n00470|                 </CardContent>\n00471|               </Card>\n00472|             </>\n00473|           )}\n00474|         </div>\n00475|       </div>\n00476|     </div>\n00477|   )\n00478| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect, useRef } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { ArrowLeft, Heart, Play, Pause, Square, Timer, TrendingUp, AlertTriangle } from 'lucide-react'\nimport Link from 'next/link'\n\ninterface HeartRateReading {\n  time: number\n  hr: number\n  bp?: { systolic: number; diastolic: number }\n}\n\ninterface TestPhase {"
    },
    "title": "app/stand-test/page.tsx",
    "time": {
      "start": 1758128169447,
      "end": 1758128169449
    }
  }
}