{
  "id": "prt_958a07583001MdOWSwWtilbWus",
  "messageID": "msg_9589aaf47001q8uvGQ3Wp3dX8a",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "edit",
  "callID": "toolu_01KkcW8RmpamB3VXYKJj3Qnv",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/pem-quest/page.tsx",
      "oldString": "  const calculatePEMScore = () => {\n    const totalScore = pemQuestions.reduce((sum, question) => {\n      const answer = answers[question.id]\n      const option = question.options.find(opt => opt.value === answer)\n      return sum + (option?.score || 0)\n    }, 0)\n\n    const maxScore = pemQuestions.reduce((sum, question) => {\n      return sum + Math.max(...question.options.map(opt => opt.score))\n    }, 0)",
      "newString": "  const getPEMQuestions = () => {\n    const scoreArrays = [[0,1,2,3,4], [0,1,2,3,4], [0,2,3,4,3], [0,1,2,3,4], [0,1,2,3,4]]\n    \n    return [\n      {\n        id: 'frequency',\n        question: t.pem.questions.frequency.question,\n        description: t.pem.questions.frequency.description,\n        options: t.pem.questions.frequency.options.map((label, index) => ({\n          value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n          label,\n          score: scoreArrays[0][index]\n        }))\n      },\n      {\n        id: 'mental_frequency',\n        question: t.pem.questions.mentalFrequency.question,\n        description: t.pem.questions.mentalFrequency.description,\n        options: t.pem.questions.mentalFrequency.options.map((label, index) => ({\n          value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n          label,\n          score: scoreArrays[1][index]\n        }))\n      },\n      {\n        id: 'onset_time',\n        question: t.pem.questions.onsetTime.question,\n        options: t.pem.questions.onsetTime.options.map((label, index) => ({\n          value: ['no_worsening', 'during', 'immediately', 'hours', 'next_day'][index],\n          label,\n          score: scoreArrays[2][index]\n        }))\n      },\n      {\n        id: 'severity',\n        question: t.pem.questions.severity.question,\n        options: t.pem.questions.severity.options.map((label, index) => ({\n          value: ['none', 'mild', 'moderate', 'severe', 'very_severe'][index],\n          label,\n          score: scoreArrays[3][index]\n        }))\n      },\n      {\n        id: 'recovery_time',\n        question: t.pem.questions.recoveryTime.question,\n        options: t.pem.questions.recoveryTime.options.map((label, index) => ({\n          value: ['no_recovery_needed', 'hours', 'one_day', 'several_days', 'week_or_more'][index],\n          label,\n          score: scoreArrays[4][index]\n        }))\n      }\n    ]\n  }\n\n  const calculatePEMScore = () => {\n    const pemQuestions = getPEMQuestions()\n    const totalScore = pemQuestions.reduce((sum, question) => {\n      const answer = answers[question.id]\n      const option = question.options.find(opt => opt.value === answer)\n      return sum + (option?.score || 0)\n    }, 0)\n\n    const maxScore = pemQuestions.reduce((sum, question) => {\n      return sum + Math.max(...question.options.map(opt => opt.score))\n    }, 0)"
    },
    "output": "",
    "metadata": {
      "diagnostics": {},
      "diff": "Index: /home/user/project/app/pem-quest/page.tsx\n===================================================================\n--- /home/user/project/app/pem-quest/page.tsx\n+++ /home/user/project/app/pem-quest/page.tsx\n@@ -47,9 +47,64 @@\n     setCurrentQuestion(prev => prev - 1)\n   }\n }\n \n+const getPEMQuestions = () => {\n+  const scoreArrays = [[0,1,2,3,4], [0,1,2,3,4], [0,2,3,4,3], [0,1,2,3,4], [0,1,2,3,4]]\n+  \n+  return [\n+    {\n+      id: 'frequency',\n+      question: t.pem.questions.frequency.question,\n+      description: t.pem.questions.frequency.description,\n+      options: t.pem.questions.frequency.options.map((label, index) => ({\n+        value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n+        label,\n+        score: scoreArrays[0][index]\n+      }))\n+    },\n+    {\n+      id: 'mental_frequency',\n+      question: t.pem.questions.mentalFrequency.question,\n+      description: t.pem.questions.mentalFrequency.description,\n+      options: t.pem.questions.mentalFrequency.options.map((label, index) => ({\n+        value: ['never', 'rarely', 'sometimes', 'often', 'always'][index],\n+        label,\n+        score: scoreArrays[1][index]\n+      }))\n+    },\n+    {\n+      id: 'onset_time',\n+      question: t.pem.questions.onsetTime.question,\n+      options: t.pem.questions.onsetTime.options.map((label, index) => ({\n+        value: ['no_worsening', 'during', 'immediately', 'hours', 'next_day'][index],\n+        label,\n+        score: scoreArrays[2][index]\n+      }))\n+    },\n+    {\n+      id: 'severity',\n+      question: t.pem.questions.severity.question,\n+      options: t.pem.questions.severity.options.map((label, index) => ({\n+        value: ['none', 'mild', 'moderate', 'severe', 'very_severe'][index],\n+        label,\n+        score: scoreArrays[3][index]\n+      }))\n+    },\n+    {\n+      id: 'recovery_time',\n+      question: t.pem.questions.recoveryTime.question,\n+      options: t.pem.questions.recoveryTime.options.map((label, index) => ({\n+        value: ['no_recovery_needed', 'hours', 'one_day', 'several_days', 'week_or_more'][index],\n+        label,\n+        score: scoreArrays[4][index]\n+      }))\n+    }\n+  ]\n+}\n+\n const calculatePEMScore = () => {\n+  const pemQuestions = getPEMQuestions()\n   const totalScore = pemQuestions.reduce((sum, question) => {\n     const answer = answers[question.id]\n     const option = question.options.find(opt => opt.value === answer)\n     return sum + (option?.score || 0)\n"
    },
    "title": "app/pem-quest/page.tsx",
    "time": {
      "start": 1758128544599,
      "end": 1758128544608
    }
  }
}