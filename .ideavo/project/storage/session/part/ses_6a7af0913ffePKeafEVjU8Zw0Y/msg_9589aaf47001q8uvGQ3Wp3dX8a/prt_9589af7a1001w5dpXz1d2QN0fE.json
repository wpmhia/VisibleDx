{
  "id": "prt_9589af7a1001w5dpXz1d2QN0fE",
  "messageID": "msg_9589aaf47001q8uvGQ3Wp3dX8a",
  "sessionID": "ses_6a7af0913ffePKeafEVjU8Zw0Y",
  "type": "tool",
  "tool": "read",
  "callID": "toolu_01TD7EQHd9UtvKLAWi89cC8X",
  "state": {
    "status": "completed",
    "input": {
      "filePath": "/home/user/project/app/new-patient/page.tsx"
    },
    "output": "<file>\n00001| 'use client'\n00002| \n00003| import { useState, useEffect } from 'react'\n00004| import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\n00005| import { Button } from '@/components/ui/button'\n00006| import { Input } from '@/components/ui/input'\n00007| import { Label } from '@/components/ui/label'\n00008| import { Progress } from '@/components/ui/progress'\n00009| import { Badge } from '@/components/ui/badge'\n00010| import { Alert, AlertDescription } from '@/components/ui/alert'\n00011| import { Checkbox } from '@/components/ui/checkbox'\n00012| import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\n00013| import { ArrowLeft, ArrowRight, User, ClipboardList, FileText, Download, CheckCircle, AlertTriangle, Activity, Heart, Clock, BarChart3 } from 'lucide-react'\n00014| import Link from 'next/link'\n00015| \n00016| interface PatientData {\n00017|   demographics: {\n00018|     age: number | null\n00019|     gender: string\n00020|     clinicianName: string\n00021|     patientId: string\n00022|   }\n00023|   quickScreen: {\n00024|     answers: Record<number, boolean>\n00025|     score: number\n00026|     riskLevel: string\n00027|   }\n00028|   redFlags: {\n00029|     symptoms: string[]\n00030|     labsRecommended: string[]\n00031|     priority: string\n00032|   }\n00033|   standTest: {\n00034|     performed: boolean\n00035|     baselineHR: number | null\n00036|     peakHR: number | null\n00037|     sustainedHR: number | null\n00038|     meetsPOTS: boolean\n00039|   }\n00040|   pemQuest: {\n00041|     answers: Record<string, string>\n00042|     score: number\n00043|     severity: string\n00044|     present: boolean\n00045|   }\n00046|   diagnoses: {\n00047|     mecfs: { met: boolean; confidence: string }\n00048|     longCovid: { met: boolean; confidence: string }\n00049|     pots: { met: boolean; confidence: string; subtype?: string }\n00050|   }\n00051| }\n00052| \n00053| const initialPatientData: PatientData = {\n00054|   demographics: {\n00055|     age: null,\n00056|     gender: '',\n00057|     clinicianName: '',\n00058|     patientId: ''\n00059|   },\n00060|   quickScreen: {\n00061|     answers: {},\n00062|     score: 0,\n00063|     riskLevel: 'low'\n00064|   },\n00065|   redFlags: {\n00066|     symptoms: [],\n00067|     labsRecommended: [],\n00068|     priority: 'routine'\n00069|   },\n00070|   standTest: {\n00071|     performed: false,\n00072|     baselineHR: null,\n00073|     peakHR: null,\n00074|     sustainedHR: null,\n00075|     meetsPOTS: false\n00076|   },\n00077|   pemQuest: {\n00078|     answers: {},\n00079|     score: 0,\n00080|     severity: 'none',\n00081|     present: false\n00082|   },\n00083|   diagnoses: {\n00084|     mecfs: { met: false, confidence: 'low' },\n00085|     longCovid: { met: false, confidence: 'low' },\n00086|     pots: { met: false, confidence: 'low' }\n00087|   }\n00088| }\n00089| \n00090| type WorkflowStep = 'demographics' | 'quickScreen' | 'redFlags' | 'standTest' | 'pemQuest' | 'criteria' | 'summary'\n00091| \n00092| const screeningQuestions = [\n00093|   { id: 1, question: \"Do you experience severe fatigue that is not relieved by rest?\", category: \"core\" },\n00094|   { id: 2, question: \"Does physical or mental activity make your symptoms worse (Post-Exertional Malaise)?\", category: \"pem\" },\n00095|   { id: 3, question: \"Do you have unrefreshing sleep, regardless of duration?\", category: \"core\" },\n00096|   { id: 4, question: \"Do you experience cognitive difficulties (brain fog, memory problems)?\", category: \"core\" },\n00097|   { id: 5, question: \"Do you have palpitations or rapid heart rate, especially when standing?\", category: \"cardiovascular\" },\n00098|   { id: 6, question: \"Do you experience dizziness or lightheadedness when standing up?\", category: \"orthostatic\" },\n00099|   { id: 7, question: \"Have you had COVID-19 or suspected COVID-19 infection?\", category: \"history\" },\n00100|   { id: 8, question: \"Have your symptoms persisted for 3 months or longer?\", category: \"duration\" },\n00101|   { id: 9, question: \"Do you experience muscle pain or joint pain without swelling?\", category: \"pain\" },\n00102|   { id: 10, question: \"Do you have frequent headaches or changes in headache patterns?\", category: \"neurological\" },\n00103|   { id: 11, question: \"Do you experience temperature dysregulation (feeling too hot/cold)?\", category: \"autonomic\" },\n00104|   { id: 12, question: \"Do you have gastrointestinal symptoms (nausea, bloating, changes in bowel habits)?\", category: \"gi\" },\n00105|   { id: 13, question: \"Do you experience shortness of breath or breathing difficulties?\", category: \"respiratory\" },\n00106|   { id: 14, question: \"Have you noticed decreased exercise tolerance or physical capacity?\", category: \"functional\" },\n00107|   { id: 15, question: \"Do you experience sensitivity to light, sound, or touch?\", category: \"sensory\" },\n00108|   { id: 16, question: \"Have you been unable to maintain your previous level of activity?\", category: \"functional\" }\n00109| ]\n00110| \n00111| const redFlagSymptoms = [\n00112|   { id: 'fever', symptom: 'Persistent fever or night sweats', priority: 'high' },\n00113|   { id: 'weight_loss', symptom: 'Unintentional weight loss >10% in 6 months', priority: 'high' },\n00114|   { id: 'chest_pain', symptom: 'Chest pain with exertion or at rest', priority: 'high' },\n00115|   { id: 'dyspnea', symptom: 'Progressive shortness of breath', priority: 'high' },\n00116|   { id: 'neurological', symptom: 'New neurological symptoms (weakness, numbness, seizures)', priority: 'high' },\n00117|   { id: 'bleeding', symptom: 'Abnormal bleeding or bruising', priority: 'high' }\n00118| ]\n00119| \n00120| const pemQuestions = [\n00121|   {\n00122|     id: 'frequency',\n00123|     question: 'How often do you experience a worsening of symptoms following physical activity?',\n00124|     options: [\n00125|       { value: 'never', label: 'Never', score: 0 },\n00126|       { value: 'rarely', label: 'Rarely (less than 25% of the time)', score: 1 },\n00127|       { value: 'sometimes', label: 'Sometimes (25-50% of the time)', score: 2 },\n00128|       { value: 'often', label: 'Often (50-75% of the time)', score: 3 },\n00129|       { value: 'always', label: 'Always or almost always (more than 75% of the time)', score: 4 }\n00130|     ]\n00131|   },\n00132|   {\n00133|     id: 'severity',\n00134|     question: 'How severe is the worsening of your symptoms after activity?',\n00135|     options: [\n00136|       { value: 'none', label: 'No worsening', score: 0 },\n00137|       { value: 'mild', label: 'Mild - slightly worse than before activity', score: 1 },\n00138|       { value: 'moderate', label: 'Moderate - noticeably worse, but manageable', score: 2 },\n00139|       { value: 'severe', label: 'Severe - significantly worse, difficult to function', score: 3 },\n00140|       { value: 'very_severe', label: 'Very severe - unable to function, bedridden', score: 4 }\n00141|     ]\n00142|   },\n00143|   {\n00144|     id: 'recovery_time',\n00145|     question: 'How long does it typically take for your symptoms to return to baseline after activity?',\n00146|     options: [\n00147|       { value: 'no_recovery_needed', label: 'No recovery time needed', score: 0 },\n00148|       { value: 'hours', label: 'A few hours', score: 1 },\n00149|       { value: 'one_day', label: 'About one day', score: 2 },\n00150|       { value: 'several_days', label: 'Several days (2-6 days)', score: 3 },\n00151|       { value: 'week_or_more', label: 'A week or more', score: 4 }\n00152|     ]\n00153|   }\n00154| ]\n00155| \n00156| export default function NewPatientWorkflow() {\n00157|   const [currentStep, setCurrentStep] = useState<WorkflowStep>('demographics')\n00158|   const [patientData, setPatientData] = useState<PatientData>(initialPatientData)\n00159|   const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0)\n00160|   const [isComplete, setIsComplete] = useState(false)\n00161| \n00162|   const getStepProgress = () => {\n00163|     const steps: WorkflowStep[] = ['demographics', 'quickScreen', 'redFlags', 'standTest', 'pemQuest', 'criteria', 'summary']\n00164|     const currentIndex = steps.indexOf(currentStep)\n00165|     return ((currentIndex + 1) / steps.length) * 100\n00166|   }\n00167| \n00168|   const calculateQuickScreenRisk = (answers: Record<number, boolean>) => {\n00169|     const totalYes = Object.values(answers).filter(Boolean).length\n00170|     const coreSymptoms = [1, 3, 4].filter(id => answers[id]).length\n00171|     const pemPresent = answers[2]\n00172|     const chronicity = answers[8]\n00173|     \n00174|     let riskLevel = 'low'\n00175|     if (totalYes >= 8 && coreSymptoms >= 2 && pemPresent && chronicity) {\n00176|       riskLevel = 'high'\n00177|     } else if (totalYes >= 5 && (coreSymptoms >= 2 || pemPresent)) {\n00178|       riskLevel = 'medium'\n00179|     }\n00180|     \n00181|     return { score: totalYes, riskLevel }\n00182|   }\n00183| \n00184|   const calculatePEMScore = (answers: Record<string, string>) => {\n00185|     const totalScore = pemQuestions.reduce((sum, question) => {\n00186|       const answer = answers[question.id]\n00187|       const option = question.options.find(opt => opt.value === answer)\n00188|       return sum + (option?.score || 0)\n00189|     }, 0)\n00190| \n00191|     const maxScore = pemQuestions.reduce((sum, question) => {\n00192|       return sum + Math.max(...question.options.map(opt => opt.score))\n00193|     }, 0)\n00194| \n00195|     const percentage = (totalScore / maxScore) * 100\n00196|     \n00197|     let severity = 'none'\n00198|     if (percentage >= 75) severity = 'severe'\n00199|     else if (percentage >= 50) severity = 'moderate'\n00200|     else if (percentage >= 25) severity = 'mild'\n00201| \n00202|     return { score: totalScore, severity, present: percentage >= 25 }\n00203|   }\n00204| \n00205|   const determineNextStep = () => {\n00206|     switch (currentStep) {\n00207|       case 'demographics':\n00208|         return 'quickScreen'\n00209|       case 'quickScreen':\n00210|         return patientData.quickScreen.riskLevel !== 'low' ? 'redFlags' : 'standTest'\n00211|       case 'redFlags':\n00212|         return patientData.redFlags.priority === 'urgent' ? 'summary' : 'standTest'\n00213|       case 'standTest':\n00214|         return 'pemQuest'\n00215|       case 'pemQuest':\n00216|         return 'criteria'\n00217|       case 'criteria':\n00218|         return 'summary'\n00219|       default:\n00220|         return 'summary'\n00221|     }\n00222|   }\n00223| \n00224|   const generateSOAPNote = () => {\n00225|     const { demographics, quickScreen, redFlags, standTest, pemQuest, diagnoses } = patientData\n00226|     const currentDate = new Date().toLocaleDateString()\n00227|     \n00228|     let soap = `CLINICAL ASSESSMENT - AutoDx Report\\n`\n00229|     soap += `=========================================\\n\\n`\n00230|     soap += `Date: ${currentDate}\\n`\n00231|     soap += `Clinician: ${demographics.clinicianName || 'Not specified'}\\n`\n00232|     soap += `Patient ID: ${demographics.patientId || 'Not specified'}\\n`\n00233|     soap += `Age: ${demographics.age || 'Not specified'} | Gender: ${demographics.gender || 'Not specified'}\\n\\n`\n00234| \n00235|     soap += `SUBJECTIVE:\\n`\n00236|     soap += `Chief Complaint: Chronic fatigue, post-exertional symptoms, and orthostatic intolerance\\n`\n00237|     soap += `Quick-Screen Risk Assessment: ${quickScreen.riskLevel.toUpperCase()} (${quickScreen.score}/16 positive responses)\\n`\n00238|     \n00239|     if (redFlags.symptoms.length > 0) {\n00240|       soap += `Red Flag Symptoms: ${redFlags.symptoms.join(', ')}\\n`\n00241|     } else {\n00242|       soap += `Red Flag Symptoms: None identified\\n`\n00243|     }\n00244|     \n00245|     soap += `Post-Exertional Malaise: ${pemQuest.present ? `Present (${pemQuest.severity} severity)` : 'Not present'}\\n`\n00246|     soap += `Symptom Duration: ${patientData.quickScreen.answers[8] ? '≥3 months' : '<3 months or unclear'}\\n\\n`\n00247| \n00248|     soap += `OBJECTIVE:\\n`\n00249|     if (standTest.performed) {\n00250|       soap += `Orthostatic Vital Signs (10-min stand test):\\n`\n00251|       soap += `  - Baseline HR: ${standTest.baselineHR || 'Not recorded'} bpm\\n`\n00252|       soap += `  - Peak Standing HR: ${standTest.peakHR || 'Not recorded'} bpm\\n`\n00253|       soap += `  - HR Increase: ${standTest.peakHR && standTest.baselineHR ? standTest.peakHR - standTest.baselineHR : 'Cannot calculate'} bpm\\n`\n00254|       soap += `  - POTS Criteria: ${standTest.meetsPOTS ? 'MET (≥30 bpm increase)' : 'Not met'}\\n`\n00255|     } else {\n00256|       soap += `Orthostatic Testing: Not performed\\n`\n00257|     }\n00258|     \n00259|     if (redFlags.labsRecommended.length > 0) {\n00260|       soap += `Recommended Laboratory Studies: ${redFlags.labsRecommended.join(', ')}\\n`\n00261|     }\n00262|     soap += `\\n`\n00263| \n00264|     soap += `ASSESSMENT:\\n`\n00265|     const positiveDiagnoses: string[] = []\n00266|     if (diagnoses.mecfs.met) positiveDiagnoses.push(`ME/CFS (G93.32) - ${diagnoses.mecfs.confidence} confidence`)\n00267|     if (diagnoses.longCovid.met) positiveDiagnoses.push(`Long COVID (U09.9) - ${diagnoses.longCovid.confidence} confidence`)\n00268|     if (diagnoses.pots.met) positiveDiagnoses.push(`POTS (I47.1) - ${diagnoses.pots.confidence} confidence`)\n00269|     \n00270|     if (positiveDiagnoses.length > 0) {\n00271|       soap += `Diagnoses meeting criteria:\\n`\n00272|       positiveDiagnoses.forEach(dx => soap += `  • ${dx}\\n`)\n00273|     } else {\n00274|       soap += `No definitive diagnostic criteria met at this time\\n`\n00275|       soap += `Consider: Alternative diagnoses, subclinical presentations, symptom monitoring\\n`\n00276|     }\n00277|     soap += `\\n`\n00278| \n00279|     soap += `PLAN:\\n`\n00280|     \n00281|     if (redFlags.priority === 'urgent') {\n00282|       soap += `URGENT: Complete red flag workup before proceeding with chronic illness evaluation\\n`\n00283|       soap += `  - Expedite recommended laboratory studies\\n`\n00284|       soap += `  - Consider same-day or next-day specialist consultation\\n\\n`\n00285|     }\n00286|     \n00287|     if (diagnoses.mecfs.met) {\n00288|       soap += `ME/CFS Management:\\n`\n00289|       soap += `  • Activity pacing and energy management education\\n`\n00290|       soap += `  • Avoid graded exercise therapy (contraindicated)\\n`\n00291|       soap += `  • Symptom-directed treatments (sleep, pain, orthostatic symptoms)\\n`\n00292|       soap += `  • ME/CFS specialist referral if available\\n`\n00293|       soap += `  • Disability evaluation if functional capacity severely impaired\\n\\n`\n00294|     }\n00295|     \n00296|     if (diagnoses.longCovid.met) {\n00297|       soap += `Long COVID Management:\\n`\n00298|       soap += `  • Multidisciplinary symptom management approach\\n`\n00299|       soap += `  • Long COVID clinic referral if available\\n`\n00300|       soap += `  • Monitor for improvement over time\\n`\n00301|       soap += `  • Address individual symptoms (fatigue, cognitive, respiratory)\\n\\n`\n00302|     }\n00303|     \n00304|     if (diagnoses.pots.met) {\n00305|       soap += `POTS Management:\\n`\n00306|       soap += `  • Non-pharmacological: Increase salt (8-10g/day), fluids (2.5-3L/day)\\n`\n00307|       soap += `  • Compression garments (30-40 mmHg)\\n`\n00308|       soap += `  • Consider pharmacological therapy based on subtype\\n`\n00309|       soap += `  • Cardiology or autonomic specialist referral\\n`\n00310|       soap += `  • Gradual exercise reconditioning when appropriate\\n\\n`\n00311|     }\n00312|     \n00313|     soap += `Follow-up:\\n`\n00314|     soap += `  • Reassess in 4-6 weeks or sooner if symptoms worsen\\n`\n00315|     soap += `  • Repeat stand test if POTS suspected but initial test inconclusive\\n`\n00316|     soap += `  • Review laboratory results and adjust treatment accordingly\\n`\n00317|     soap += `  • Patient education materials provided\\n\\n`\n00318|     \n00319|     soap += `Clinical Decision Support provided by AutoDx v1.0\\n`\n00320|     soap += `This assessment is for clinical decision support only and does not replace physician judgment.\\n`\n00321| \n00322|     return soap\n00323|   }\n00324| \n00325|   const handleDemographicsNext = () => {\n00326|     if (patientData.demographics.age && patientData.demographics.gender) {\n00327|       setCurrentStep('quickScreen')\n00328|     }\n00329|   }\n00330| \n00331|   const handleQuickScreenAnswer = (questionId: number, answer: boolean) => {\n00332|     const newAnswers = { ...patientData.quickScreen.answers, [questionId]: answer }\n00333|     const risk = calculateQuickScreenRisk(newAnswers)\n00334|     \n00335|     setPatientData(prev => ({\n00336|       ...prev,\n00337|       quickScreen: {\n00338|         answers: newAnswers,\n00339|         score: risk.score,\n00340|         riskLevel: risk.riskLevel\n00341|       }\n00342|     }))\n00343|   }\n00344| \n00345|   const handlePEMAnswer = (questionId: string, value: string) => {\n00346|     const newAnswers = { ...patientData.pemQuest.answers, [questionId]: value }\n00347|     const pemScore = calculatePEMScore(newAnswers)\n00348|     \n00349|     setPatientData(prev => ({\n00350|       ...prev,\n00351|       pemQuest: {\n00352|         answers: newAnswers,\n00353|         score: pemScore.score,\n00354|         severity: pemScore.severity,\n00355|         present: pemScore.present\n00356|       }\n00357|     }))\n00358|   }\n00359| \n00360|   const finalizeDiagnoses = () => {\n00361|     const { quickScreen, pemQuest, standTest } = patientData\n00362|     \n00363|     // ME/CFS criteria\n00364|     const coreSymptoms = [1, 3, 4].filter(id => quickScreen.answers[id]).length\n00365|     const hasPEM = pemQuest.present\n00366|     const hasOrthostatic = quickScreen.answers[6] || standTest.meetsPOTS\n00367|     const mecfsMet = coreSymptoms >= 3 && hasPEM && hasOrthostatic && quickScreen.answers[8]\n00368|     \n00369|     // Long COVID criteria\n00370|     const hasCovidHistory = quickScreen.answers[7]\n00371|     const hasDuration = quickScreen.answers[8]\n00372|     const hasMultiSystem = quickScreen.score >= 4\n00373|     const longCovidMet = hasCovidHistory && hasDuration && hasMultiSystem\n00374|     \n00375|     // POTS criteria\n00376|     const potsMet = standTest.meetsPOTS && quickScreen.answers[8] && (quickScreen.answers[5] || quickScreen.answers[6])\n00377|     \n00378|     setPatientData(prev => ({\n00379|       ...prev,\n00380|       diagnoses: {\n00381|         mecfs: { \n00382|           met: mecfsMet, \n00383|           confidence: mecfsMet ? (coreSymptoms === 3 && hasPEM ? 'high' : 'medium') : 'low' \n00384|         },\n00385|         longCovid: { \n00386|           met: longCovidMet, \n00387|           confidence: longCovidMet ? 'high' : 'low' \n00388|         },\n00389|         pots: { \n00390|           met: potsMet, \n00391|           confidence: potsMet ? 'high' : 'low' \n00392|         }\n00393|       }\n00394|     }))\n00395|     \n00396|     setCurrentStep('summary')\n00397|     setIsComplete(true)\n00398|   }\n00399| \n00400|   if (isComplete) {\n00401|     const soap = generateSOAPNote()\n00402|     const anyDiagnosis = Object.values(patientData.diagnoses).some(d => d.met)\n00403|     \n00404|     return (\n00405|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00406|         <div className=\"container mx-auto px-4 max-w-4xl\">\n00407|           <Card>\n00408|             <CardHeader className=\"text-center\">\n00409|               <CardTitle className=\"flex items-center justify-center gap-2 text-2xl\">\n00410|                 <CheckCircle className=\"h-6 w-6 text-green-600\" />\n00411|                 Patient Assessment Complete\n00412|               </CardTitle>\n00413|               <CardDescription>\n00414|                 Comprehensive clinical evaluation with SOAP documentation\n00415|               </CardDescription>\n00416|             </CardHeader>\n00417|             <CardContent className=\"space-y-6\">\n00418|               <div className=\"grid md:grid-cols-3 gap-4\">\n00419|                 <Card className={`border-2 ${patientData.diagnoses.mecfs.met ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>\n00420|                   <CardContent className=\"pt-4\">\n00421|                     <div className=\"text-center\">\n00422|                       <h3 className=\"font-semibold text-sm\">ME/CFS (G93.32)</h3>\n00423|                       <Badge variant={patientData.diagnoses.mecfs.met ? 'default' : 'secondary'} className=\"mt-2\">\n00424|                         {patientData.diagnoses.mecfs.met ? 'CRITERIA MET' : 'Not Met'}\n00425|                       </Badge>\n00426|                       {patientData.diagnoses.mecfs.met && (\n00427|                         <p className=\"text-xs text-green-700 mt-1\">\n00428|                           Confidence: {patientData.diagnoses.mecfs.confidence}\n00429|                         </p>\n00430|                       )}\n00431|                     </div>\n00432|                   </CardContent>\n00433|                 </Card>\n00434| \n00435|                 <Card className={`border-2 ${patientData.diagnoses.longCovid.met ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>\n00436|                   <CardContent className=\"pt-4\">\n00437|                     <div className=\"text-center\">\n00438|                       <h3 className=\"font-semibold text-sm\">Long COVID (U09.9)</h3>\n00439|                       <Badge variant={patientData.diagnoses.longCovid.met ? 'default' : 'secondary'} className=\"mt-2\">\n00440|                         {patientData.diagnoses.longCovid.met ? 'CRITERIA MET' : 'Not Met'}\n00441|                       </Badge>\n00442|                       {patientData.diagnoses.longCovid.met && (\n00443|                         <p className=\"text-xs text-green-700 mt-1\">\n00444|                           Confidence: {patientData.diagnoses.longCovid.confidence}\n00445|                         </p>\n00446|                       )}\n00447|                     </div>\n00448|                   </CardContent>\n00449|                 </Card>\n00450| \n00451|                 <Card className={`border-2 ${patientData.diagnoses.pots.met ? 'border-green-500 bg-green-50' : 'border-gray-200'}`}>\n00452|                   <CardContent className=\"pt-4\">\n00453|                     <div className=\"text-center\">\n00454|                       <h3 className=\"font-semibold text-sm\">POTS (I47.1)</h3>\n00455|                       <Badge variant={patientData.diagnoses.pots.met ? 'default' : 'secondary'} className=\"mt-2\">\n00456|                         {patientData.diagnoses.pots.met ? 'CRITERIA MET' : 'Not Met'}\n00457|                       </Badge>\n00458|                       {patientData.diagnoses.pots.met && (\n00459|                         <p className=\"text-xs text-green-700 mt-1\">\n00460|                           Confidence: {patientData.diagnoses.pots.confidence}\n00461|                         </p>\n00462|                       )}\n00463|                     </div>\n00464|                   </CardContent>\n00465|                 </Card>\n00466|               </div>\n00467| \n00468|               {!anyDiagnosis && (\n00469|                 <Alert>\n00470|                   <AlertTriangle className=\"h-4 w-4\" />\n00471|                   <AlertDescription>\n00472|                     <strong>No Definitive Diagnoses:</strong> Consider alternative diagnoses, \n00473|                     subclinical presentations, or ongoing symptom monitoring. Some patients may \n00474|                     benefit from symptomatic treatment while monitoring for progression.\n00475|                   </AlertDescription>\n00476|                 </Alert>\n00477|               )}\n00478| \n00479|               <div className=\"bg-blue-50 p-4 rounded-lg\">\n00480|                 <h4 className=\"font-semibold mb-2 text-blue-900\">Key Assessment Results</h4>\n00481|                 <div className=\"grid md:grid-cols-2 gap-4 text-sm\">\n00482|                   <div>\n00483|                     <p><strong>Risk Level:</strong> {patientData.quickScreen.riskLevel.toUpperCase()}</p>\n00484|                     <p><strong>Screening Score:</strong> {patientData.quickScreen.score}/16</p>\n00485|                     <p><strong>PEM Present:</strong> {patientData.pemQuest.present ? 'Yes' : 'No'}</p>\n00486|                   </div>\n00487|                   <div>\n00488|                     <p><strong>POTS Criteria:</strong> {patientData.standTest.meetsPOTS ? 'Met' : 'Not met'}</p>\n00489|                     <p><strong>Red Flags:</strong> {patientData.redFlags.symptoms.length > 0 ? patientData.redFlags.symptoms.length + ' identified' : 'None'}</p>\n00490|                     <p><strong>Priority:</strong> {patientData.redFlags.priority}</p>\n00491|                   </div>\n00492|                 </div>\n00493|               </div>\n00494| \n00495|               <div className=\"flex gap-4 justify-center\">\n00496|                 <Button onClick={() => {\n00497|                   setPatientData(initialPatientData)\n00498|                   setCurrentStep('demographics')\n00499|                   setCurrentQuestionIndex(0)\n00500|                   setIsComplete(false)\n00501|                 }} variant=\"outline\">\n00502|                   New Assessment\n00503|                 </Button>\n00504|                 <Button onClick={() => {\n00505|                   const blob = new Blob([soap], { type: 'text/plain' })\n00506|                   const url = URL.createObjectURL(blob)\n00507|                   const a = document.createElement('a')\n00508|                   a.href = url\n00509|                   a.download = `autodx-soap-note-${new Date().toISOString().split('T')[0]}.txt`\n00510|                   a.click()\n00511|                   URL.revokeObjectURL(url)\n00512|                 }} className=\"flex items-center gap-2\">\n00513|                   <Download className=\"h-4 w-4\" />\n00514|                   Download SOAP Note\n00515|                 </Button>\n00516|               </div>\n00517|             </CardContent>\n00518|           </Card>\n00519|         </div>\n00520|       </div>\n00521|     )\n00522|   }\n00523| \n00524|   // Demographics Step\n00525|   if (currentStep === 'demographics') {\n00526|     return (\n00527|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00528|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00529|           <div className=\"mb-6\">\n00530|             <Link href=\"/\" className=\"inline-flex items-center gap-2 text-blue-600 hover:text-blue-800 mb-4\">\n00531|               <ArrowLeft className=\"h-4 w-4\" />\n00532|               Back to Dashboard\n00533|             </Link>\n00534|             \n00535|             <div className=\"flex items-center gap-4 mb-4\">\n00536|               <User className=\"h-5 w-5 text-blue-600\" />\n00537|               <div>\n00538|                 <h1 className=\"text-2xl font-bold text-gray-900\">New Patient Assessment</h1>\n00539|                 <p className=\"text-gray-600\">Intelligent guided evaluation for ME/CFS, Long COVID, and POTS</p>\n00540|               </div>\n00541|             </div>\n00542|             \n00543|             <Progress value={getStepProgress()} className=\"h-2\" />\n00544|             <p className=\"text-sm text-gray-600 mt-2\">Step 1 of 7: Patient Demographics</p>\n00545|           </div>\n00546| \n00547|           <Card>\n00548|             <CardHeader>\n00549|               <CardTitle>Patient Information</CardTitle>\n00550|               <CardDescription>Basic demographics for clinical documentation</CardDescription>\n00551|             </CardHeader>\n00552|             <CardContent className=\"space-y-4\">\n00553|               <div className=\"grid md:grid-cols-2 gap-4\">\n00554|                 <div>\n00555|                   <Label htmlFor=\"age\">Patient Age *</Label>\n00556|                   <Input\n00557|                     id=\"age\"\n00558|                     type=\"number\"\n00559|                     placeholder=\"25\"\n00560|                     value={patientData.demographics.age || ''}\n00561|                     onChange={(e) => setPatientData(prev => ({\n00562|                       ...prev,\n00563|                       demographics: { ...prev.demographics, age: parseInt(e.target.value) || null }\n00564|                     }))}\n00565|                   />\n00566|                 </div>\n00567|                 <div>\n00568|                   <Label>Gender *</Label>\n00569|                   <RadioGroup \n00570|                     value={patientData.demographics.gender} \n00571|                     onValueChange={(value) => setPatientData(prev => ({\n00572|                       ...prev,\n00573|                       demographics: { ...prev.demographics, gender: value }\n00574|                     }))}\n00575|                     className=\"flex gap-4 mt-2\"\n00576|                   >\n00577|                     <div className=\"flex items-center space-x-2\">\n00578|                       <RadioGroupItem value=\"female\" id=\"female\" />\n00579|                       <Label htmlFor=\"female\">Female</Label>\n00580|                     </div>\n00581|                     <div className=\"flex items-center space-x-2\">\n00582|                       <RadioGroupItem value=\"male\" id=\"male\" />\n00583|                       <Label htmlFor=\"male\">Male</Label>\n00584|                     </div>\n00585|                     <div className=\"flex items-center space-x-2\">\n00586|                       <RadioGroupItem value=\"other\" id=\"other\" />\n00587|                       <Label htmlFor=\"other\">Other</Label>\n00588|                     </div>\n00589|                   </RadioGroup>\n00590|                 </div>\n00591|               </div>\n00592|               \n00593|               <div className=\"grid md:grid-cols-2 gap-4\">\n00594|                 <div>\n00595|                   <Label htmlFor=\"clinician\">Clinician Name</Label>\n00596|                   <Input\n00597|                     id=\"clinician\"\n00598|                     placeholder=\"Dr. Smith\"\n00599|                     value={patientData.demographics.clinicianName}\n00600|                     onChange={(e) => setPatientData(prev => ({\n00601|                       ...prev,\n00602|                       demographics: { ...prev.demographics, clinicianName: e.target.value }\n00603|                     }))}\n00604|                   />\n00605|                 </div>\n00606|                 <div>\n00607|                   <Label htmlFor=\"patientId\">Patient ID/MRN</Label>\n00608|                   <Input\n00609|                     id=\"patientId\"\n00610|                     placeholder=\"12345\"\n00611|                     value={patientData.demographics.patientId}\n00612|                     onChange={(e) => setPatientData(prev => ({\n00613|                       ...prev,\n00614|                       demographics: { ...prev.demographics, patientId: e.target.value }\n00615|                     }))}\n00616|                   />\n00617|                 </div>\n00618|               </div>\n00619| \n00620|               <div className=\"flex justify-end pt-4\">\n00621|                 <Button \n00622|                   onClick={handleDemographicsNext}\n00623|                   disabled={!patientData.demographics.age || !patientData.demographics.gender}\n00624|                   className=\"flex items-center gap-2\"\n00625|                 >\n00626|                   Start Assessment\n00627|                   <ArrowRight className=\"h-4 w-4\" />\n00628|                 </Button>\n00629|               </div>\n00630|             </CardContent>\n00631|           </Card>\n00632|         </div>\n00633|       </div>\n00634|     )\n00635|   }\n00636| \n00637|   // Quick Screen Step\n00638|   if (currentStep === 'quickScreen') {\n00639|     const currentQuestion = screeningQuestions[currentQuestionIndex]\n00640|     const currentAnswer = patientData.quickScreen.answers[currentQuestion.id]\n00641|     const progress = ((currentQuestionIndex + 1) / screeningQuestions.length) * 100\n00642| \n00643|     return (\n00644|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00645|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00646|           <div className=\"mb-6\">\n00647|             <div className=\"flex items-center gap-4 mb-4\">\n00648|               <Clock className=\"h-5 w-5 text-orange-600\" />\n00649|               <div>\n00650|                 <h1 className=\"text-2xl font-bold text-gray-900\">Quick Screening Assessment</h1>\n00651|                 <p className=\"text-gray-600\">16 evidence-based questions (92% sensitivity)</p>\n00652|               </div>\n00653|             </div>\n00654|             \n00655|             <Progress value={getStepProgress()} className=\"h-2 mb-2\" />\n00656|             <Progress value={progress} className=\"h-1\" />\n00657|             <p className=\"text-sm text-gray-600 mt-2\">\n00658|               Question {currentQuestionIndex + 1} of {screeningQuestions.length}\n00659|             </p>\n00660|           </div>\n00661| \n00662|           <Card>\n00663|             <CardHeader>\n00664|               <CardTitle className=\"text-lg\">{currentQuestion.question}</CardTitle>\n00665|               <CardDescription>Category: {currentQuestion.category}</CardDescription>\n00666|             </CardHeader>\n00667|             <CardContent>\n00668|               <div className=\"space-y-4\">\n00669|                 <div className=\"flex gap-4 justify-center\">\n00670|                   <Button\n00671|                     onClick={() => handleQuickScreenAnswer(currentQuestion.id, true)}\n00672|                     variant={currentAnswer === true ? \"default\" : \"outline\"}\n00673|                     className=\"flex items-center gap-2 px-8\"\n00674|                   >\n00675|                     Yes\n00676|                   </Button>\n00677|                   <Button\n00678|                     onClick={() => handleQuickScreenAnswer(currentQuestion.id, false)}\n00679|                     variant={currentAnswer === false ? \"default\" : \"outline\"}\n00680|                     className=\"flex items-center gap-2 px-8\"\n00681|                   >\n00682|                     No\n00683|                   </Button>\n00684|                 </div>\n00685| \n00686|                 <div className=\"flex justify-between pt-6\">\n00687|                   <Button \n00688|                     onClick={() => setCurrentQuestionIndex(prev => prev - 1)} \n00689|                     disabled={currentQuestionIndex === 0}\n00690|                     variant=\"outline\"\n00691|                   >\n00692|                     Previous\n00693|                   </Button>\n00694|                   \n00695|                   <Button \n00696|                     onClick={() => {\n00697|                       if (currentQuestionIndex < screeningQuestions.length - 1) {\n00698|                         setCurrentQuestionIndex(prev => prev + 1)\n00699|                       } else {\n00700|                         setCurrentStep(determineNextStep())\n00701|                       }\n00702|                     }}\n00703|                     disabled={currentAnswer === undefined}\n00704|                   >\n00705|                     {currentQuestionIndex === screeningQuestions.length - 1 ? 'Continue' : 'Next'}\n00706|                   </Button>\n00707|                 </div>\n00708|               </div>\n00709|             </CardContent>\n00710|           </Card>\n00711|         </div>\n00712|       </div>\n00713|     )\n00714|   }\n00715| \n00716|   // Red Flags Step\n00717|   if (currentStep === 'redFlags') {\n00718|     return (\n00719|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00720|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00721|           <div className=\"mb-6\">\n00722|             <div className=\"flex items-center gap-4 mb-4\">\n00723|               <AlertTriangle className=\"h-5 w-5 text-red-600\" />\n00724|               <div>\n00725|                 <h1 className=\"text-2xl font-bold text-gray-900\">Red Flag Assessment</h1>\n00726|                 <p className=\"text-gray-600\">Check for symptoms requiring urgent evaluation</p>\n00727|               </div>\n00728|             </div>\n00729|             <Progress value={getStepProgress()} className=\"h-2\" />\n00730|           </div>\n00731| \n00732|           <Card>\n00733|             <CardHeader>\n00734|               <CardTitle>Red Flag Symptoms</CardTitle>\n00735|               <CardDescription>Select any symptoms present</CardDescription>\n00736|             </CardHeader>\n00737|             <CardContent>\n00738|               <div className=\"space-y-3\">\n00739|                 {redFlagSymptoms.map((flag) => (\n00740|                   <div key={flag.id} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00741|                     <Checkbox\n00742|                       id={flag.id}\n00743|                       checked={patientData.redFlags.symptoms.includes(flag.id)}\n00744|                       onCheckedChange={(checked) => {\n00745|                         if (checked) {\n00746|                           setPatientData(prev => ({\n00747|                             ...prev,\n00748|                             redFlags: {\n00749|                               ...prev.redFlags,\n00750|                               symptoms: [...prev.redFlags.symptoms, flag.id],\n00751|                               priority: flag.priority === 'high' ? 'urgent' : prev.redFlags.priority\n00752|                             }\n00753|                           }))\n00754|                         } else {\n00755|                           const newSymptoms = patientData.redFlags.symptoms.filter(s => s !== flag.id)\n00756|                           setPatientData(prev => ({\n00757|                             ...prev,\n00758|                             redFlags: {\n00759|                               ...prev.redFlags,\n00760|                               symptoms: newSymptoms,\n00761|                               priority: newSymptoms.some(s => redFlagSymptoms.find(rf => rf.id === s)?.priority === 'high') ? 'urgent' : 'routine'\n00762|                             }\n00763|                           }))\n00764|                         }\n00765|                       }}\n00766|                     />\n00767|                     <Label htmlFor={flag.id} className=\"cursor-pointer text-sm flex-1\">\n00768|                       {flag.symptom}\n00769|                     </Label>\n00770|                   </div>\n00771|                 ))}\n00772|               </div>\n00773|               \n00774|               <div className=\"flex justify-center pt-6\">\n00775|                 <Button onClick={() => setCurrentStep(determineNextStep())}>\n00776|                   Continue Assessment\n00777|                 </Button>\n00778|               </div>\n00779|             </CardContent>\n00780|           </Card>\n00781|         </div>\n00782|       </div>\n00783|     )\n00784|   }\n00785| \n00786|   // Stand Test Step\n00787|   if (currentStep === 'standTest') {\n00788|     return (\n00789|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00790|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00791|           <div className=\"mb-6\">\n00792|             <div className=\"flex items-center gap-4 mb-4\">\n00793|               <Heart className=\"h-5 w-5 text-red-600\" />\n00794|               <div>\n00795|                 <h1 className=\"text-2xl font-bold text-gray-900\">Orthostatic Assessment</h1>\n00796|                 <p className=\"text-gray-600\">Record baseline and standing heart rates</p>\n00797|               </div>\n00798|             </div>\n00799|             <Progress value={getStepProgress()} className=\"h-2\" />\n00800|           </div>\n00801| \n00802|           <Card>\n00803|             <CardHeader>\n00804|               <CardTitle>Heart Rate Measurements</CardTitle>\n00805|               <CardDescription>Enter heart rate after 5 minutes lying down and peak heart rate within 10 minutes of standing</CardDescription>\n00806|             </CardHeader>\n00807|             <CardContent className=\"space-y-4\">\n00808|               <div className=\"grid md:grid-cols-2 gap-4\">\n00809|                 <div>\n00810|                   <Label htmlFor=\"baselineHR\">Baseline HR (lying down)</Label>\n00811|                   <Input\n00812|                     id=\"baselineHR\"\n00813|                     type=\"number\"\n00814|                     placeholder=\"70\"\n00815|                     value={patientData.standTest.baselineHR || ''}\n00816|                     onChange={(e) => setPatientData(prev => ({\n00817|                       ...prev,\n00818|                       standTest: {\n00819|                         ...prev.standTest,\n00820|                         baselineHR: parseInt(e.target.value) || null\n00821|                       }\n00822|                     }))}\n00823|                   />\n00824|                 </div>\n00825|                 <div>\n00826|                   <Label htmlFor=\"peakHR\">Peak Standing HR</Label>\n00827|                   <Input\n00828|                     id=\"peakHR\"\n00829|                     type=\"number\"\n00830|                     placeholder=\"110\"\n00831|                     value={patientData.standTest.peakHR || ''}\n00832|                     onChange={(e) => {\n00833|                       const peakHR = parseInt(e.target.value) || null\n00834|                       const baselineHR = patientData.standTest.baselineHR\n00835|                       const meetsPOTS = peakHR && baselineHR ? (peakHR - baselineHR >= 30) : false\n00836|                       \n00837|                       setPatientData(prev => ({\n00838|                         ...prev,\n00839|                         standTest: {\n00840|                           ...prev.standTest,\n00841|                           peakHR,\n00842|                           sustainedHR: peakHR,\n00843|                           meetsPOTS,\n00844|                           performed: true\n00845|                         }\n00846|                       }))\n00847|                     }}\n00848|                   />\n00849|                 </div>\n00850|               </div>\n00851|               \n00852|               {patientData.standTest.baselineHR && patientData.standTest.peakHR && (\n00853|                 <Alert className={patientData.standTest.meetsPOTS ? 'border-red-200 bg-red-50' : 'border-green-200 bg-green-50'}>\n00854|                   <Heart className=\"h-4 w-4\" />\n00855|                   <AlertDescription>\n00856|                     <strong>HR Increase: {patientData.standTest.peakHR - patientData.standTest.baselineHR} bpm</strong><br />\n00857|                     POTS Criteria (≥30 bpm): {patientData.standTest.meetsPOTS ? 'MET' : 'Not met'}\n00858|                   </AlertDescription>\n00859|                 </Alert>\n00860|               )}\n00861|               \n00862|               <div className=\"flex justify-center pt-4\">\n00863|                 <Button \n00864|                   onClick={() => setCurrentStep(determineNextStep())}\n00865|                   disabled={!patientData.standTest.baselineHR || !patientData.standTest.peakHR}\n00866|                 >\n00867|                   Continue to PEM Assessment\n00868|                 </Button>\n00869|               </div>\n00870|             </CardContent>\n00871|           </Card>\n00872|         </div>\n00873|       </div>\n00874|     )\n00875|   }\n00876| \n00877|   // PEM Quest Step\n00878|   if (currentStep === 'pemQuest') {\n00879|     const currentPEMQuestion = pemQuestions[currentQuestionIndex % pemQuestions.length]\n00880|     const currentAnswer = patientData.pemQuest.answers[currentPEMQuestion.id]\n00881|     const progress = ((currentQuestionIndex + 1) / pemQuestions.length) * 100\n00882| \n00883|     return (\n00884|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00885|         <div className=\"container mx-auto px-4 max-w-3xl\">\n00886|           <div className=\"mb-6\">\n00887|             <div className=\"flex items-center gap-4 mb-4\">\n00888|               <Activity className=\"h-5 w-5 text-orange-600\" />\n00889|               <div>\n00890|                 <h1 className=\"text-2xl font-bold text-gray-900\">PEM Assessment</h1>\n00891|                 <p className=\"text-gray-600\">Post-Exertional Malaise evaluation</p>\n00892|               </div>\n00893|             </div>\n00894|             <Progress value={getStepProgress()} className=\"h-2 mb-2\" />\n00895|             <Progress value={progress} className=\"h-1\" />\n00896|             <p className=\"text-sm text-gray-600 mt-2\">\n00897|               Question {(currentQuestionIndex % pemQuestions.length) + 1} of {pemQuestions.length}\n00898|             </p>\n00899|           </div>\n00900| \n00901|           <Card>\n00902|             <CardHeader>\n00903|               <CardTitle className=\"text-lg\">{currentPEMQuestion.question}</CardTitle>\n00904|             </CardHeader>\n00905|             <CardContent>\n00906|               <RadioGroup \n00907|                 value={currentAnswer || ''} \n00908|                 onValueChange={(value) => handlePEMAnswer(currentPEMQuestion.id, value)}\n00909|                 className=\"space-y-3\"\n00910|               >\n00911|                 {currentPEMQuestion.options.map((option) => (\n00912|                   <div key={option.value} className=\"flex items-start space-x-3 p-3 rounded-lg border hover:bg-gray-50\">\n00913|                     <RadioGroupItem value={option.value} id={option.value} className=\"mt-1\" />\n00914|                     <Label htmlFor={option.value} className=\"cursor-pointer flex-1\">\n00915|                       {option.label}\n00916|                     </Label>\n00917|                   </div>\n00918|                 ))}\n00919|               </RadioGroup>\n00920| \n00921|               <div className=\"flex justify-between pt-6\">\n00922|                 <Button \n00923|                   onClick={() => setCurrentQuestionIndex(prev => prev - 1)} \n00924|                   disabled={currentQuestionIndex === 0}\n00925|                   variant=\"outline\"\n00926|                 >\n00927|                   Previous\n00928|                 </Button>\n00929|                 \n00930|                 <Button \n00931|                   onClick={() => {\n00932|                     if (currentQuestionIndex < pemQuestions.length - 1) {\n00933|                       setCurrentQuestionIndex(prev => prev + 1)\n00934|                     } else {\n00935|                       setCurrentStep('criteria')\n00936|                     }\n00937|                   }}\n00938|                   disabled={!currentAnswer}\n00939|                 >\n00940|                   {currentQuestionIndex === pemQuestions.length - 1 ? 'Finalize Assessment' : 'Next'}\n00941|                 </Button>\n00942|               </div>\n00943|             </CardContent>\n00944|           </Card>\n00945|         </div>\n00946|       </div>\n00947|     )\n00948|   }\n00949| \n00950|   // Criteria Step (auto-process)\n00951|   if (currentStep === 'criteria') {\n00952|     useEffect(() => {\n00953|       finalizeDiagnoses()\n00954|     }, [])\n00955|     \n00956|     return (\n00957|       <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 py-8\">\n00958|         <div className=\"container mx-auto px-4 max-w-2xl\">\n00959|           <Card>\n00960|             <CardContent className=\"pt-6 text-center\">\n00961|               <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mx-auto mb-4\"></div>\n00962|               <h3 className=\"text-lg font-semibold mb-2\">Processing Diagnostic Criteria...</h3>\n00963|               <p className=\"text-gray-600\">Analyzing responses against CDC, NASEM, ESC, and WHO guidelines</p>\n00964|             </CardContent>\n00965|           </Card>\n00966|         </div>\n00967|       </div>\n00968|     )\n00969|   }\n00970| \n00971|   return <div>Loading...</div>\n00972| }\n</file>",
    "metadata": {
      "preview": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'\nimport { Button } from '@/components/ui/button'\nimport { Input } from '@/components/ui/input'\nimport { Label } from '@/components/ui/label'\nimport { Progress } from '@/components/ui/progress'\nimport { Badge } from '@/components/ui/badge'\nimport { Alert, AlertDescription } from '@/components/ui/alert'\nimport { Checkbox } from '@/components/ui/checkbox'\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group'\nimport { ArrowLeft, ArrowRight, User, ClipboardList, FileText, Download, CheckCircle, AlertTriangle, Activity, Heart, Clock, BarChart3 } from 'lucide-react'\nimport Link from 'next/link'\n\ninterface PatientData {\n  demographics: {\n    age: number | null\n    gender: string\n    clinicianName: string"
    },
    "title": "app/new-patient/page.tsx",
    "time": {
      "start": 1758128175438,
      "end": 1758128175440
    }
  }
}